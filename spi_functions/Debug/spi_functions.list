
spi_functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000374  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b851  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190d  00000000  00000000  0002b88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002da18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020747  00000000  00000000  0002e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdce  00000000  00000000  0004e93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c42c2  00000000  00000000  0005a70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e9cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002230  00000000  00000000  0011ea20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003dec 	.word	0x08003dec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003dec 	.word	0x08003dec

080001d4 <max_read_reg>:




unsigned char * max_read_reg( unsigned char  reg_addr,uint8_t count)
{
 80001d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d8:	b08d      	sub	sp, #52	; 0x34
 80001da:	af02      	add	r7, sp, #8
 80001dc:	4603      	mov	r3, r0
 80001de:	460a      	mov	r2, r1
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	4613      	mov	r3, r2
 80001e4:	73bb      	strb	r3, [r7, #14]
 80001e6:	466b      	mov	r3, sp
 80001e8:	461e      	mov	r6, r3
	unsigned char tx[count+2];
 80001ea:	7bbb      	ldrb	r3, [r7, #14]
 80001ec:	1c99      	adds	r1, r3, #2
 80001ee:	1e4b      	subs	r3, r1, #1
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24
 80001f2:	460a      	mov	r2, r1
 80001f4:	2300      	movs	r3, #0
 80001f6:	603a      	str	r2, [r7, #0]
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	f04f 0200 	mov.w	r2, #0
 80001fe:	f04f 0300 	mov.w	r3, #0
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	00c3      	lsls	r3, r0, #3
 8000206:	6838      	ldr	r0, [r7, #0]
 8000208:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800020c:	6838      	ldr	r0, [r7, #0]
 800020e:	00c2      	lsls	r2, r0, #3
 8000210:	460a      	mov	r2, r1
 8000212:	2300      	movs	r3, #0
 8000214:	4692      	mov	sl, r2
 8000216:	469b      	mov	fp, r3
 8000218:	f04f 0200 	mov.w	r2, #0
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800022c:	460b      	mov	r3, r1
 800022e:	3307      	adds	r3, #7
 8000230:	08db      	lsrs	r3, r3, #3
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	ebad 0d03 	sub.w	sp, sp, r3
 8000238:	ab02      	add	r3, sp, #8
 800023a:	3300      	adds	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
	unsigned char rx[count+2];
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	1c99      	adds	r1, r3, #2
 8000242:	1e4b      	subs	r3, r1, #1
 8000244:	617b      	str	r3, [r7, #20]
 8000246:	460a      	mov	r2, r1
 8000248:	2300      	movs	r3, #0
 800024a:	4690      	mov	r8, r2
 800024c:	4699      	mov	r9, r3
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	f04f 0300 	mov.w	r3, #0
 8000256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800025a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800025e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000262:	460a      	mov	r2, r1
 8000264:	2300      	movs	r3, #0
 8000266:	4614      	mov	r4, r2
 8000268:	461d      	mov	r5, r3
 800026a:	f04f 0200 	mov.w	r2, #0
 800026e:	f04f 0300 	mov.w	r3, #0
 8000272:	00eb      	lsls	r3, r5, #3
 8000274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000278:	00e2      	lsls	r2, r4, #3
 800027a:	460b      	mov	r3, r1
 800027c:	3307      	adds	r3, #7
 800027e:	08db      	lsrs	r3, r3, #3
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	ebad 0d03 	sub.w	sp, sp, r3
 8000286:	ab02      	add	r3, sp, #8
 8000288:	3300      	adds	r3, #0
 800028a:	613b      	str	r3, [r7, #16]

	//read


	tx[0] = reg_addr;
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	7bfa      	ldrb	r2, [r7, #15]
 8000290:	701a      	strb	r2, [r3, #0]
	tx[1] = 0x80;
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	705a      	strb	r2, [r3, #1]
	tx[2] = 0xff;
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	709a      	strb	r2, [r3, #2]

	for(int i=3;i<count+2;i++)
 800029e:	2303      	movs	r3, #3
 80002a0:	61fb      	str	r3, [r7, #28]
 80002a2:	e007      	b.n	80002b4 <max_read_reg+0xe0>
	{
		tx[i]=0xff;
 80002a4:	69ba      	ldr	r2, [r7, #24]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	4413      	add	r3, r2
 80002aa:	22ff      	movs	r2, #255	; 0xff
 80002ac:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<count+2;i++)
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3301      	adds	r3, #1
 80002b2:	61fb      	str	r3, [r7, #28]
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	3301      	adds	r3, #1
 80002b8:	69fa      	ldr	r2, [r7, #28]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	ddf2      	ble.n	80002a4 <max_read_reg+0xd0>
	}

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2108      	movs	r1, #8
 80002c2:	481a      	ldr	r0, [pc, #104]	; (800032c <max_read_reg+0x158>)
 80002c4:	f000 ff34 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	4817      	ldr	r0, [pc, #92]	; (800032c <max_read_reg+0x158>)
 80002ce:	f000 ff2f 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, tx, rx, (uint16_t)count+2, (uint32_t)1000);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	3302      	adds	r3, #2
 80002d8:	b29b      	uxth	r3, r3
 80002da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	693a      	ldr	r2, [r7, #16]
 80002e2:	69b9      	ldr	r1, [r7, #24]
 80002e4:	4812      	ldr	r0, [pc, #72]	; (8000330 <max_read_reg+0x15c>)
 80002e6:	f002 fdfc 	bl	8002ee2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	480f      	ldr	r0, [pc, #60]	; (800032c <max_read_reg+0x158>)
 80002f0:	f000 ff1e 	bl	8001130 <HAL_GPIO_WritePin>


	for (int i = 0; i < count+2; i++) {
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
 80002f8:	e00b      	b.n	8000312 <max_read_reg+0x13e>
		rx_global[i] = rx[i];
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	6a3b      	ldr	r3, [r7, #32]
 80002fe:	4413      	add	r3, r2
 8000300:	7819      	ldrb	r1, [r3, #0]
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <max_read_reg+0x160>)
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	4413      	add	r3, r2
 8000308:	460a      	mov	r2, r1
 800030a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < count+2; i++) {
 800030c:	6a3b      	ldr	r3, [r7, #32]
 800030e:	3301      	adds	r3, #1
 8000310:	623b      	str	r3, [r7, #32]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	3301      	adds	r3, #1
 8000316:	6a3a      	ldr	r2, [r7, #32]
 8000318:	429a      	cmp	r2, r3
 800031a:	ddee      	ble.n	80002fa <max_read_reg+0x126>




	}
	return rx_global;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <max_read_reg+0x160>)
 800031e:	46b5      	mov	sp, r6

}
 8000320:	4618      	mov	r0, r3
 8000322:	372c      	adds	r7, #44	; 0x2c
 8000324:	46bd      	mov	sp, r7
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	bf00      	nop
 800032c:	48000800 	.word	0x48000800
 8000330:	20000294 	.word	0x20000294
 8000334:	20000028 	.word	0x20000028

08000338 <max_write_reg>:


	void  max_write_reg(uint8_t reg_addr,uint8_t  write_val,uint8_t count)
	{
 8000338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800033c:	b087      	sub	sp, #28
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]
 8000344:	460b      	mov	r3, r1
 8000346:	71bb      	strb	r3, [r7, #6]
 8000348:	4613      	mov	r3, r2
 800034a:	717b      	strb	r3, [r7, #5]
 800034c:	466b      	mov	r3, sp
 800034e:	461e      	mov	r6, r3

		unsigned char tx[count+2];
 8000350:	797b      	ldrb	r3, [r7, #5]
 8000352:	1c99      	adds	r1, r3, #2
 8000354:	1e4b      	subs	r3, r1, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	460a      	mov	r2, r1
 800035a:	2300      	movs	r3, #0
 800035c:	4690      	mov	r8, r2
 800035e:	4699      	mov	r9, r3
 8000360:	f04f 0200 	mov.w	r2, #0
 8000364:	f04f 0300 	mov.w	r3, #0
 8000368:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800036c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000370:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000374:	460a      	mov	r2, r1
 8000376:	2300      	movs	r3, #0
 8000378:	4614      	mov	r4, r2
 800037a:	461d      	mov	r5, r3
 800037c:	f04f 0200 	mov.w	r2, #0
 8000380:	f04f 0300 	mov.w	r3, #0
 8000384:	00eb      	lsls	r3, r5, #3
 8000386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800038a:	00e2      	lsls	r2, r4, #3
 800038c:	460b      	mov	r3, r1
 800038e:	3307      	adds	r3, #7
 8000390:	08db      	lsrs	r3, r3, #3
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	ebad 0d03 	sub.w	sp, sp, r3
 8000398:	466b      	mov	r3, sp
 800039a:	3300      	adds	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]

		max_read_reg(reg_addr,count);  //dummy read
 800039e:	797a      	ldrb	r2, [r7, #5]
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff15 	bl	80001d4 <max_read_reg>

		//write
		tx[0] = reg_addr;
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	701a      	strb	r2, [r3, #0]
		tx[1] = 0x00;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
		tx[2] = write_val;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	709a      	strb	r2, [r3, #2]

		for(int i=3;i<count+2;i++)
 80003bc:	2303      	movs	r3, #3
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	e007      	b.n	80003d2 <max_write_reg+0x9a>
		{
			tx[i]=0xff;
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	4413      	add	r3, r2
 80003c8:	22ff      	movs	r2, #255	; 0xff
 80003ca:	701a      	strb	r2, [r3, #0]
		for(int i=3;i<count+2;i++)
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	3301      	adds	r3, #1
 80003d0:	613b      	str	r3, [r7, #16]
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	3301      	adds	r3, #1
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	ddf2      	ble.n	80003c2 <max_write_reg+0x8a>
		}


		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	4815      	ldr	r0, [pc, #84]	; (8000438 <max_write_reg+0x100>)
 80003e2:	f000 fea5 	bl	8001130 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, tx, (uint16_t)count+2, (uint32_t)1000);
 80003e6:	797b      	ldrb	r3, [r7, #5]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	3302      	adds	r3, #2
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <max_write_reg+0x104>)
 80003f6:	f002 fc06 	bl	8002c06 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2108      	movs	r1, #8
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <max_write_reg+0x100>)
 8000400:	f000 fe96 	bl	8001130 <HAL_GPIO_WritePin>
		tx[2] = 0xff;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	22ff      	movs	r2, #255	; 0xff
 8000408:	709a      	strb	r2, [r3, #2]

		for(int i=3;i<count+2;i++)
 800040a:	2303      	movs	r3, #3
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e007      	b.n	8000420 <max_write_reg+0xe8>
		{
			tx[i]=0xff;
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	4413      	add	r3, r2
 8000416:	22ff      	movs	r2, #255	; 0xff
 8000418:	701a      	strb	r2, [r3, #0]
		for(int i=3;i<count+2;i++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	797b      	ldrb	r3, [r7, #5]
 8000422:	3301      	adds	r3, #1
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	429a      	cmp	r2, r3
 8000428:	ddf2      	ble.n	8000410 <max_write_reg+0xd8>
 800042a:	46b5      	mov	sp, r6
		}

	}
 800042c:	bf00      	nop
 800042e:	371c      	adds	r7, #28
 8000430:	46bd      	mov	sp, r7
 8000432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000436:	bf00      	nop
 8000438:	48000800 	.word	0x48000800
 800043c:	20000294 	.word	0x20000294

08000440 <ppg_init>:



	unsigned char * ppg_init()

	{
 8000440:	b580      	push	{r7, lr}
 8000442:	b0a4      	sub	sp, #144	; 0x90
 8000444:	af00      	add	r7, sp, #0

		}

		flag=15;
		return flag;*/
		unsigned char ppg_config[122]={
 8000446:	4a34      	ldr	r2, [pc, #208]	; (8000518 <ppg_init+0xd8>)
 8000448:	463b      	mov	r3, r7
 800044a:	4611      	mov	r1, r2
 800044c:	227a      	movs	r2, #122	; 0x7a
 800044e:	4618      	mov	r0, r3
 8000450:	f003 fcb6 	bl	8003dc0 <memcpy>



		};

		for(int i=0; i<122;i=i+2)
 8000454:	2300      	movs	r3, #0
 8000456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800045a:	e014      	b.n	8000486 <ppg_init+0x46>
		{

			max_write_reg(ppg_config[i],ppg_config[i+1],1);
 800045c:	463a      	mov	r2, r7
 800045e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000462:	4413      	add	r3, r2
 8000464:	7818      	ldrb	r0, [r3, #0]
 8000466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800046a:	3301      	adds	r3, #1
 800046c:	3390      	adds	r3, #144	; 0x90
 800046e:	443b      	add	r3, r7
 8000470:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8000474:	2201      	movs	r2, #1
 8000476:	4619      	mov	r1, r3
 8000478:	f7ff ff5e 	bl	8000338 <max_write_reg>
		for(int i=0; i<122;i=i+2)
 800047c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000480:	3302      	adds	r3, #2
 8000482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800048a:	2b79      	cmp	r3, #121	; 0x79
 800048c:	dde6      	ble.n	800045c <ppg_init+0x1c>

		}

		unsigned char *temp;

		int k = 0,count_sample = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000494:	2300      	movs	r3, #0
 8000496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(int j=0;j<30;++j)
 800049a:	2300      	movs	r3, #0
 800049c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80004a0:	e030      	b.n	8000504 <ppg_init+0xc4>
		{


			while (*(max_read_reg(0x0b,1)+2)!=0x06)
 80004a2:	bf00      	nop
 80004a4:	2101      	movs	r1, #1
 80004a6:	200b      	movs	r0, #11
 80004a8:	f7ff fe94 	bl	80001d4 <max_read_reg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	3302      	adds	r3, #2
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b06      	cmp	r3, #6
 80004b4:	d1f6      	bne.n	80004a4 <ppg_init+0x64>
					{

					}

					temp=max_read_reg(0x0c,18);
 80004b6:	2112      	movs	r1, #18
 80004b8:	200c      	movs	r0, #12
 80004ba:	f7ff fe8b 	bl	80001d4 <max_read_reg>
 80004be:	67f8      	str	r0, [r7, #124]	; 0x7c

					while(k<20){
 80004c0:	e014      	b.n	80004ec <ppg_init+0xac>

						sample[count_sample]=*(temp+k);
 80004c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80004c8:	4413      	add	r3, r2
 80004ca:	7819      	ldrb	r1, [r3, #0]
 80004cc:	4a13      	ldr	r2, [pc, #76]	; (800051c <ppg_init+0xdc>)
 80004ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80004d2:	4413      	add	r3, r2
 80004d4:	460a      	mov	r2, r1
 80004d6:	701a      	strb	r2, [r3, #0]
						k++;
 80004d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004dc:	3301      	adds	r3, #1
 80004de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						count_sample++;
 80004e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80004e6:	3301      	adds	r3, #1
 80004e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					while(k<20){
 80004ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004f0:	2b13      	cmp	r3, #19
 80004f2:	dde6      	ble.n	80004c2 <ppg_init+0x82>
					}

					k=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		for(int j=0;j<30;++j)
 80004fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004fe:	3301      	adds	r3, #1
 8000500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000508:	2b1d      	cmp	r3, #29
 800050a:	ddca      	ble.n	80004a2 <ppg_init+0x62>


//}


		return sample;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <ppg_init+0xdc>)
	}
 800050e:	4618      	mov	r0, r3
 8000510:	3790      	adds	r7, #144	; 0x90
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	08003e04 	.word	0x08003e04
 800051c:	2000003c 	.word	0x2000003c

08000520 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	f5ad 6d63 	sub.w	sp, sp, #3632	; 0xe30
 8000526:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000528:	f000 fb2c 	bl	8000b84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800052c:	f000 f8d5 	bl	80006da <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000530:	f000 f99e 	bl	8000870 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000534:	f000 f92e 	bl	8000794 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 8000538:	f000 f96a 	bl	8000810 <MX_USART2_UART_Init>



	///
	unsigned char *x, temp1;
	uint32_t temp2 = 0,c1=0,c2=0,c3=0;
 800053c:	2300      	movs	r3, #0
 800053e:	f8c7 3e18 	str.w	r3, [r7, #3608]	; 0xe18
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 3e2c 	str.w	r3, [r7, #3628]	; 0xe2c
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 3e28 	str.w	r3, [r7, #3624]	; 0xe28
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 3e24 	str.w	r3, [r7, #3620]	; 0xe24
	uint32_t samples_p2_m3[50];




	x=ppg_init();
 8000554:	f7ff ff74 	bl	8000440 <ppg_init>
 8000558:	4603      	mov	r3, r0
 800055a:	f8c7 3e14 	str.w	r3, [r7, #3604]	; 0xe14

	for (int l =0 ;l<600;l=l+2){
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 3e20 	str.w	r3, [r7, #3616]	; 0xe20
 8000564:	e013      	b.n	800058e <main+0x6e>
		samples[l] = *(x+l);
 8000566:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	; 0xe20
 800056a:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	; 0xe14
 800056e:	4413      	add	r3, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000578:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800057c:	f8d7 2e20 	ldr.w	r2, [r7, #3616]	; 0xe20
 8000580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int l =0 ;l<600;l=l+2){
 8000584:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	; 0xe20
 8000588:	3302      	adds	r3, #2
 800058a:	f8c7 3e20 	str.w	r3, [r7, #3616]	; 0xe20
 800058e:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	; 0xe20
 8000592:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000596:	dbe6      	blt.n	8000566 <main+0x46>
	}

	for(int l=0;l<600;l=l+6){
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3e1c 	str.w	r3, [r7, #3612]	; 0xe1c
 800059e:	e090      	b.n	80006c2 <main+0x1a2>

		temp1 = (uint8_t)samples[l];
 80005a0:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80005a4:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 80005a8:	f8d7 2e1c 	ldr.w	r2, [r7, #3612]	; 0xe1c
 80005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005b0:	f887 3e13 	strb.w	r3, [r7, #3603]	; 0xe13
		temp1 = temp1 >> 4;
 80005b4:	f897 3e13 	ldrb.w	r3, [r7, #3603]	; 0xe13
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	f887 3e13 	strb.w	r3, [r7, #3603]	; 0xe13




		switch(temp1){
 80005be:	f897 3e13 	ldrb.w	r3, [r7, #3603]	; 0xe13
 80005c2:	2b10      	cmp	r3, #16
 80005c4:	d052      	beq.n	800066c <main+0x14c>
 80005c6:	2b10      	cmp	r3, #16
 80005c8:	dc76      	bgt.n	80006b8 <main+0x198>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <main+0xb4>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d026      	beq.n	8000620 <main+0x100>
 80005d2:	e071      	b.n	80006b8 <main+0x198>

		case 0x00: // measurement 1 ===> 00

			samples_p1_m1[c1] = samples[l];
 80005d4:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80005d8:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 80005dc:	f8d7 2e1c 	ldr.w	r2, [r7, #3612]	; 0xe1c
 80005e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005e4:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80005e8:	f6a3 2348 	subw	r3, r3, #2632	; 0xa48
 80005ec:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	; 0xe2c
 80005f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			samples_p2_m1[c1] = samples[l+1];
 80005f4:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	; 0xe1c
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80005fe:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8000602:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000606:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800060a:	f5a3 6331 	sub.w	r3, r3, #2832	; 0xb10
 800060e:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	; 0xe2c
 8000612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			c1++;
 8000616:	f8d7 3e2c 	ldr.w	r3, [r7, #3628]	; 0xe2c
 800061a:	3301      	adds	r3, #1
 800061c:	f8c7 3e2c 	str.w	r3, [r7, #3628]	; 0xe2c


		case 0x01: //measurement 2 ===> 01
			samples_p1_m2[c2] = samples[l];
 8000620:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000624:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8000628:	f8d7 2e1c 	ldr.w	r2, [r7, #3612]	; 0xe1c
 800062c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000630:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000634:	f6a3 33d8 	subw	r3, r3, #3032	; 0xbd8
 8000638:	f8d7 2e28 	ldr.w	r2, [r7, #3624]	; 0xe28
 800063c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			samples_p2_m2[c2] = samples[l+1];
 8000640:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	; 0xe1c
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800064a:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800064e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000652:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000656:	f5a3 634a 	sub.w	r3, r3, #3232	; 0xca0
 800065a:	f8d7 2e28 	ldr.w	r2, [r7, #3624]	; 0xe28
 800065e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			c2++;
 8000662:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	; 0xe28
 8000666:	3301      	adds	r3, #1
 8000668:	f8c7 3e28 	str.w	r3, [r7, #3624]	; 0xe28


		case 0x10: //measurement 3 ===>10
			samples_p1_m3[c3] = samples[l];
 800066c:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000670:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8000674:	f8d7 2e1c 	ldr.w	r2, [r7, #3612]	; 0xe1c
 8000678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800067c:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000680:	f6a3 5368 	subw	r3, r3, #3432	; 0xd68
 8000684:	f8d7 2e24 	ldr.w	r2, [r7, #3620]	; 0xe24
 8000688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			samples_p2_m3[c3] = samples[l+1];
 800068c:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	; 0xe1c
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8000696:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800069a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800069e:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80006a2:	f5a3 6363 	sub.w	r3, r3, #3632	; 0xe30
 80006a6:	f8d7 2e24 	ldr.w	r2, [r7, #3620]	; 0xe24
 80006aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			c3++;
 80006ae:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	; 0xe24
 80006b2:	3301      	adds	r3, #1
 80006b4:	f8c7 3e24 	str.w	r3, [r7, #3620]	; 0xe24
	for(int l=0;l<600;l=l+6){
 80006b8:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	; 0xe1c
 80006bc:	3306      	adds	r3, #6
 80006be:	f8c7 3e1c 	str.w	r3, [r7, #3612]	; 0xe1c
 80006c2:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	; 0xe1c
 80006c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80006ca:	f6ff af69 	blt.w	80005a0 <main+0x80>
 80006ce:	2300      	movs	r3, #0

	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	f507 6763 	add.w	r7, r7, #3632	; 0xe30
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b0a6      	sub	sp, #152	; 0x98
 80006de:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006e4:	2228      	movs	r2, #40	; 0x28
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fb77 	bl	8003ddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2258      	movs	r2, #88	; 0x58
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fb69 	bl	8003ddc <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2310      	movs	r3, #16
 8000714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fd12 	bl	8001160 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x6c>
	{
		Error_Handler();
 8000742:	f000 f8eb 	bl	800091c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fd51 	bl	8002208 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x96>
	{
		Error_Handler();
 800076c:	f000 f8d6 	bl	800091c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000770:	2302      	movs	r3, #2
 8000772:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f001 ff7a 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000786:	f000 f8c9 	bl	800091c <Error_Handler>
	}
}
 800078a:	bf00      	nop
 800078c:	3798      	adds	r7, #152	; 0x98
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_SPI2_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_SPI2_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_SPI2_Init+0x74>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_SPI2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI2_Init+0x74>)
 80007ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007b2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI2_Init+0x74>)
 80007c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c6:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI2_Init+0x74>)
 80007ca:	2228      	movs	r2, #40	; 0x28
 80007cc:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SPI2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI2_Init+0x74>)
 80007e2:	2207      	movs	r2, #7
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SPI2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI2_Init+0x74>)
 80007ee:	2208      	movs	r2, #8
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_SPI2_Init+0x74>)
 80007f4:	f002 f95c 	bl	8002ab0 <HAL_SPI_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 80007fe:	f000 f88d 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000294 	.word	0x20000294
 800080c:	40003800 	.word	0x40003800

08000810 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000820:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f002 febc 	bl	80035d0 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800085e:	f000 f85d 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200002f8 	.word	0x200002f8
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0xa4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <MX_GPIO_Init+0xa4>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_GPIO_Init+0xa4>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0xa8>)
 80008ec:	f000 fc20 	bl	8001130 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f0:	2308      	movs	r3, #8
 80008f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0xa8>)
 8000908:	f000 fa88 	bl	8000e1c <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800

0800091c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <HAL_SPI_MspInit+0xb4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d144      	bne.n	8000a1c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009da:	2302      	movs	r3, #2
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ea:	2305      	movs	r3, #5
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <HAL_SPI_MspInit+0xbc>)
 80009f6:	f000 fa11 	bl	8000e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_SPI_MspInit+0xc0>)
 8000a18:	f000 fa00 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40003800 	.word	0x40003800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48001400 	.word	0x48001400
 8000a30:	48000400 	.word	0x48000400

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x7c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d128      	bne.n	8000aa8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 f9ba 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f884 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5a:	f7ff ffd7 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f003 f90b 	bl	8003d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fcdd 	bl	8000520 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b74:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 8000b78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b7c:	20000380 	.word	0x20000380

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x28>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f90d 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fec2 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f917 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 f8ed 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	2000037c 	.word	0x2000037c

08000c38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000037c 	.word	0x2000037c

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e160      	b.n	80010ee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8152 	beq.w	80010e8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d017      	beq.n	8000efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0203 	and.w	r2, r3, #3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80ac 	beq.w	80010e8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b5e      	ldr	r3, [pc, #376]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a5d      	ldr	r2, [pc, #372]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b5b      	ldr	r3, [pc, #364]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	4a59      	ldr	r2, [pc, #356]	; (8001110 <HAL_GPIO_Init+0x2f4>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd2:	d025      	beq.n	8001020 <HAL_GPIO_Init+0x204>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_GPIO_Init+0x2f8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d01f      	beq.n	800101c <HAL_GPIO_Init+0x200>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_GPIO_Init+0x2fc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x1fc>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4d      	ldr	r2, [pc, #308]	; (800111c <HAL_GPIO_Init+0x300>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1f8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <HAL_GPIO_Init+0x304>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1f4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <HAL_GPIO_Init+0x308>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1f0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1ec>
 8001004:	2306      	movs	r3, #6
 8001006:	e00c      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001008:	2307      	movs	r3, #7
 800100a:	e00a      	b.n	8001022 <HAL_GPIO_Init+0x206>
 800100c:	2305      	movs	r3, #5
 800100e:	e008      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001010:	2304      	movs	r3, #4
 8001012:	e006      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001014:	2303      	movs	r3, #3
 8001016:	e004      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001018:	2302      	movs	r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x206>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001020:	2300      	movs	r3, #0
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	f002 0203 	and.w	r2, r2, #3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4093      	lsls	r3, r2
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001032:	4937      	ldr	r1, [pc, #220]	; (8001110 <HAL_GPIO_Init+0x2f4>)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_GPIO_Init+0x310>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001064:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_GPIO_Init+0x310>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_GPIO_Init+0x310>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_GPIO_Init+0x310>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_GPIO_Init+0x310>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_GPIO_Init+0x310>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_GPIO_Init+0x310>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_GPIO_Init+0x310>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f47f ae97 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	48001000 	.word	0x48001000
 8001124:	48001400 	.word	0x48001400
 8001128:	48001800 	.word	0x48001800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001166:	af00      	add	r7, sp, #0
 8001168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001170:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001176:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	f001 b83a 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800118a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 816f 	beq.w	800147a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800119c:	4bb5      	ldr	r3, [pc, #724]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a8:	4bb2      	ldr	r3, [pc, #712]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d15c      	bne.n	800126e <HAL_RCC_OscConfig+0x10e>
 80011b4:	4baf      	ldr	r3, [pc, #700]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d155      	bne.n	800126e <HAL_RCC_OscConfig+0x10e>
 80011c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0x94>
 80011ee:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	e015      	b.n	8001220 <HAL_RCC_OscConfig+0xc0>
 80011f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001210:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800121c:	4b95      	ldr	r3, [pc, #596]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001224:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001228:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001234:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f002 021f 	and.w	r2, r2, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 8111 	beq.w	8001478 <HAL_RCC_OscConfig+0x318>
 8001256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800125a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 8108 	bne.w	8001478 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	f000 bfc6 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x12e>
 8001280:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a7b      	ldr	r2, [pc, #492]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e036      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 800128e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x158>
 800129e:	4b75      	ldr	r3, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a74      	ldr	r2, [pc, #464]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b72      	ldr	r3, [pc, #456]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a71      	ldr	r2, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e021      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 80012b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x184>
 80012ca:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a69      	ldr	r2, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a66      	ldr	r2, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 80012e4:	4b63      	ldr	r3, [pc, #396]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a62      	ldr	r2, [pc, #392]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b60      	ldr	r3, [pc, #384]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001300:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d059      	beq.n	80013c0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fc94 	bl	8000c38 <HAL_GetTick>
 8001310:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff fc8f 	bl	8000c38 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d902      	bls.n	800132c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	f000 bf67 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 800132c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001330:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001340:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x1fe>
 8001358:	4b46      	ldr	r3, [pc, #280]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x22a>
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001376:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800137a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800138e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001392:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800139e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ab      	beq.n	8001316 <HAL_RCC_OscConfig+0x1b6>
 80013be:	e05c      	b.n	800147a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc3a 	bl	8000c38 <HAL_GetTick>
 80013c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ca:	f7ff fc35 	bl	8000c38 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d902      	bls.n	80013e0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	f000 bf0d 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80013e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <HAL_RCC_OscConfig+0x2b2>
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x2de>
 8001412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001416:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800142e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001442:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001446:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800144a:	fa92 f2a2 	rbit	r2, r2
 800144e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001452:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001456:	fab2 f282 	clz	r2, r2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f042 0220 	orr.w	r2, r2, #32
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f002 021f 	and.w	r2, r2, #31
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ab      	bne.n	80013ca <HAL_RCC_OscConfig+0x26a>
 8001472:	e002      	b.n	800147a <HAL_RCC_OscConfig+0x31a>
 8001474:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 817f 	beq.w	800178e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001490:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800149c:	4ba4      	ldr	r3, [pc, #656]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d173      	bne.n	8001590 <HAL_RCC_OscConfig+0x430>
 80014a8:	4ba1      	ldr	r3, [pc, #644]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b4:	d16c      	bne.n	8001590 <HAL_RCC_OscConfig+0x430>
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x386>
 80014e0:	4b93      	ldr	r3, [pc, #588]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e013      	b.n	800150e <HAL_RCC_OscConfig+0x3ae>
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800150a:	4b89      	ldr	r3, [pc, #548]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2202      	movs	r2, #2
 8001510:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001514:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001518:	fa92 f2a2 	rbit	r2, r2
 800151c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001520:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001524:	fab2 f282 	clz	r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f002 021f 	and.w	r2, r2, #31
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00a      	beq.n	8001556 <HAL_RCC_OscConfig+0x3f6>
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	f000 be52 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001562:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	21f8      	movs	r1, #248	; 0xf8
 800156c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001574:	fa91 f1a1 	rbit	r1, r1
 8001578:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800157c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001580:	fab1 f181 	clz	r1, r1
 8001584:	b2c9      	uxtb	r1, r1
 8001586:	408b      	lsls	r3, r1
 8001588:	4969      	ldr	r1, [pc, #420]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e0fe      	b.n	800178e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001594:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8088 	beq.w	80016b2 <HAL_RCC_OscConfig+0x552>
 80015a2:	2301      	movs	r3, #1
 80015a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb33 	bl	8000c38 <HAL_GetTick>
 80015d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fb2e 	bl	8000c38 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d902      	bls.n	80015ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f000 be06 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001600:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x4be>
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e013      	b.n	8001646 <HAL_RCC_OscConfig+0x4e6>
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001636:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2202      	movs	r2, #2
 8001648:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800164c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001650:	fa92 f2a2 	rbit	r2, r2
 8001654:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001658:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0af      	beq.n	80015d8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	21f8      	movs	r1, #248	; 0xf8
 800168e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001696:	fa91 f1a1 	rbit	r1, r1
 800169a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800169e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016a2:	fab1 f181 	clz	r1, r1
 80016a6:	b2c9      	uxtb	r1, r1
 80016a8:	408b      	lsls	r3, r1
 80016aa:	4921      	ldr	r1, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e06d      	b.n	800178e <HAL_RCC_OscConfig+0x62e>
 80016b2:	2301      	movs	r3, #1
 80016b4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	461a      	mov	r2, r3
 80016da:	2300      	movs	r3, #0
 80016dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff faab 	bl	8000c38 <HAL_GetTick>
 80016e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff faa6 	bl	8000c38 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d902      	bls.n	80016fe <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f000 bd7e 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001710:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x5d4>
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	e016      	b.n	800175c <HAL_RCC_OscConfig+0x5fc>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800174c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001758:	4bbf      	ldr	r3, [pc, #764]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2202      	movs	r2, #2
 800175e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001762:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800176e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ac      	bne.n	80016e8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8113 	beq.w	80019ca <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d07c      	beq.n	80018ae <HAL_RCC_OscConfig+0x74e>
 80017b4:	2301      	movs	r3, #1
 80017b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	4ba2      	ldr	r3, [pc, #648]	; (8001a5c <HAL_RCC_OscConfig+0x8fc>)
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	461a      	mov	r2, r3
 80017da:	2301      	movs	r3, #1
 80017dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa2b 	bl	8000c38 <HAL_GetTick>
 80017e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fa26 	bl	8000c38 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d902      	bls.n	80017fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f000 bcfe 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001842:	2202      	movs	r2, #2
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800185c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b7e      	ldr	r3, [pc, #504]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 8001860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001866:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800186a:	2102      	movs	r1, #2
 800186c:	6019      	str	r1, [r3, #0]
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f1a3 	rbit	r1, r3
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001884:	6019      	str	r1, [r3, #0]
  return result;
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d09d      	beq.n	80017e8 <HAL_RCC_OscConfig+0x688>
 80018ac:	e08d      	b.n	80019ca <HAL_RCC_OscConfig+0x86a>
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018d0:	601a      	str	r2, [r3, #0]
  return result;
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x8fc>)
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	461a      	mov	r2, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff f9a2 	bl	8000c38 <HAL_GetTick>
 80018f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff f99d 	bl	8000c38 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d902      	bls.n	8001910 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	f000 bc75 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001918:	2202      	movs	r2, #2
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800197a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 800197e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001988:	2102      	movs	r1, #2
 800198a:	6019      	str	r1, [r3, #0]
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f1a3 	rbit	r1, r3
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019a2:	6019      	str	r1, [r3, #0]
  return result;
 80019a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d197      	bne.n	80018fa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 81a5 	beq.w	8001d2a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_RCC_OscConfig+0x900>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d121      	bne.n	8001a70 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x900>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x900>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f8fe 	bl	8000c38 <HAL_GetTick>
 8001a3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e010      	b.n	8001a64 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff f8f9 	bl	8000c38 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d908      	bls.n	8001a64 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e3d1      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	10908120 	.word	0x10908120
 8001a60:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <HAL_RCC_OscConfig+0xb3c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0e8      	beq.n	8001a42 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x92e>
 8001a80:	4b87      	ldr	r3, [pc, #540]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a86      	ldr	r2, [pc, #536]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	e035      	b.n	8001afa <HAL_RCC_OscConfig+0x99a>
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x958>
 8001a9e:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a7c      	ldr	r2, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e020      	b.n	8001afa <HAL_RCC_OscConfig+0x99a>
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x982>
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a74      	ldr	r2, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a71      	ldr	r2, [pc, #452]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x99a>
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a6b      	ldr	r2, [pc, #428]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8081 	beq.w	8001c0e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f894 	bl	8000c38 <HAL_GetTick>
 8001b10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff f88f 	bl	8000c38 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e365      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0xa3a>
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	e013      	b.n	8001bc2 <HAL_RCC_OscConfig+0xa62>
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bca:	2102      	movs	r1, #2
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bea:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d084      	beq.n	8001b16 <HAL_RCC_OscConfig+0x9b6>
 8001c0c:	e083      	b.n	8001d16 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f813 	bl	8000c38 <HAL_GetTick>
 8001c12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f80e 	bl	8000c38 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e2e4      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c38:	2202      	movs	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c76:	601a      	str	r2, [r3, #0]
  return result;
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xb44>
 8001c96:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	e017      	b.n	8001ccc <HAL_RCC_OscConfig+0xb6c>
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4bb3      	ldr	r3, [pc, #716]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	6011      	str	r1, [r2, #0]
 8001cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cdc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fa92 f1a2 	rbit	r1, r2
 8001ce6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cea:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cee:	6011      	str	r1, [r2, #0]
  return result;
 8001cf0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	fab2 f282 	clz	r2, r2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f002 021f 	and.w	r2, r2, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d180      	bne.n	8001c18 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d16:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a9d      	ldr	r2, [pc, #628]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 825e 	beq.w	80021f8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	4b96      	ldr	r3, [pc, #600]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	f000 821f 	beq.w	8002188 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	f040 8170 	bne.w	800203c <HAL_RCC_OscConfig+0xedc>
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d80:	601a      	str	r2, [r3, #0]
  return result;
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d8a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe ff49 	bl	8000c38 <HAL_GetTick>
 8001da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e009      	b.n	8001dc0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe ff44 	bl	8000c38 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e21c      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001de4:	601a      	str	r2, [r3, #0]
  return result;
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0xcaa>
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	e027      	b.n	8001e5a <HAL_RCC_OscConfig+0xcfa>
 8001e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e66:	6011      	str	r1, [r2, #0]
 8001e68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	fa92 f1a2 	rbit	r1, r2
 8001e76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e7e:	6011      	str	r1, [r2, #0]
  return result;
 8001e80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e84:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d182      	bne.n	8001dac <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f023 020f 	bic.w	r2, r3, #15
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a19      	ldr	r1, [r3, #32]
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	492d      	ldr	r1, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f0c:	601a      	str	r2, [r3, #0]
  return result;
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f16:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fe83 	bl	8000c38 <HAL_GetTick>
 8001f32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f36:	e009      	b.n	8001f4c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe fe7e 	bl	8000c38 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e156      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f70:	601a      	str	r2, [r3, #0]
  return result;
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0xe3c>
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e02a      	b.n	8001fec <HAL_RCC_OscConfig+0xe8c>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ff4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff8:	6011      	str	r1, [r2, #0]
 8001ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fa92 f1a2 	rbit	r1, r2
 8002008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002010:	6011      	str	r1, [r2, #0]
  return result;
 8002012:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002016:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	fab2 f282 	clz	r2, r2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f042 0220 	orr.w	r2, r2, #32
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f002 021f 	and.w	r2, r2, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f202 	lsl.w	r2, r1, r2
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	f43f af7f 	beq.w	8001f38 <HAL_RCC_OscConfig+0xdd8>
 800203a:	e0dd      	b.n	80021f8 <HAL_RCC_OscConfig+0x1098>
 800203c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002040:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002060:	601a      	str	r2, [r3, #0]
  return result;
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800206a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	461a      	mov	r2, r3
 800207e:	2300      	movs	r3, #0
 8002080:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fdd9 	bl	8000c38 <HAL_GetTick>
 8002086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fdd4 	bl	8000c38 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0ac      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020c4:	601a      	str	r2, [r3, #0]
  return result;
 80020c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_OscConfig+0xf8a>
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e027      	b.n	800213a <HAL_RCC_OscConfig+0xfda>
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002142:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002146:	6011      	str	r1, [r2, #0]
 8002148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	fa92 f1a2 	rbit	r1, r2
 8002156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800215e:	6011      	str	r1, [r2, #0]
  return result;
 8002160:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002164:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d182      	bne.n	800208c <HAL_RCC_OscConfig+0xf2c>
 8002186:	e037      	b.n	80021f8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e02e      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d117      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021c8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b09e      	sub	sp, #120	; 0x78
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e162      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b90      	ldr	r3, [pc, #576]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	498b      	ldr	r1, [pc, #556]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e14a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	497f      	ldr	r1, [pc, #508]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80dc 	beq.w	8002434 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d13c      	bne.n	80022fe <HAL_RCC_ClockConfig+0xf6>
 8002284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002288:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_ClockConfig+0xa6>
 80022a8:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	e00f      	b.n	80022ce <HAL_RCC_ClockConfig+0xc6>
 80022ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
 80022bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c0:	663b      	str	r3, [r7, #96]	; 0x60
 80022c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80022d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d17b      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0f3      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d13c      	bne.n	8002380 <HAL_RCC_ClockConfig+0x178>
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d102      	bne.n	8002330 <HAL_RCC_ClockConfig+0x128>
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	e00f      	b.n	8002350 <HAL_RCC_ClockConfig+0x148>
 8002330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
 800233e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
 8002344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002354:	63ba      	str	r2, [r7, #56]	; 0x38
 8002356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800235e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d13a      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b2      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
 8002380:	2302      	movs	r3, #2
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x1a0>
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e00d      	b.n	80023c4 <HAL_RCC_ClockConfig+0x1bc>
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	61ba      	str	r2, [r7, #24]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	617a      	str	r2, [r7, #20]
  return result;
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e079      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	491a      	ldr	r1, [pc, #104]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7fe fc18 	bl	8000c38 <HAL_GetTick>
 8002408:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe fc14 	bl	8000c38 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e061      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d214      	bcs.n	800246c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4906      	ldr	r1, [pc, #24]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e040      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	491a      	ldr	r1, [pc, #104]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4912      	ldr	r1, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024aa:	f000 f829 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024ae:	4601      	mov	r1, r0
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	22f0      	movs	r2, #240	; 0xf0
 80024ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	60fa      	str	r2, [r7, #12]
  return result;
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	40d3      	lsrs	r3, r2
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x2ec>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	fa21 f303 	lsr.w	r3, r1, r3
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_RCC_ClockConfig+0x2f0>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_RCC_ClockConfig+0x2f4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fb66 	bl	8000bb0 <HAL_InitTick>
  
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3778      	adds	r7, #120	; 0x78
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08003e80 	.word	0x08003e80
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b08b      	sub	sp, #44	; 0x2c
 8002504:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
 800252a:	2b08      	cmp	r3, #8
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x36>
 800252e:	e03f      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002532:	623b      	str	r3, [r7, #32]
      break;
 8002534:	e03f      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800253c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002540:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	607a      	str	r2, [r7, #4]
  return result;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	40d3      	lsrs	r3, r2
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	220f      	movs	r2, #15
 8002564:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	60fa      	str	r2, [r7, #12]
  return result;
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	e007      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	623b      	str	r3, [r7, #32]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	6a3b      	ldr	r3, [r7, #32]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	372c      	adds	r7, #44	; 0x2c
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08003e98 	.word	0x08003e98
 80025d0:	08003ea8 	.word	0x08003ea8

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025f2:	f7ff ffef 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002600:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002604:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	fa92 f2a2 	rbit	r2, r2
 800260c:	603a      	str	r2, [r7, #0]
  return result;
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	40d3      	lsrs	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_RCC_GetPCLK1Freq+0x40>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	08003e90 	.word	0x08003e90

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002636:	f7ff ffcd 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800263a:	4601      	mov	r1, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002644:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002648:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	fa92 f2a2 	rbit	r2, r2
 8002650:	603a      	str	r2, [r7, #0]
  return result;
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	40d3      	lsrs	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x40>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08003e90 	.word	0x08003e90

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b092      	sub	sp, #72	; 0x48
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80d4 	beq.w	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002698:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10e      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	61d3      	str	r3, [r2, #28]
 80026b0:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe faad 	bl	8000c38 <HAL_GetTick>
 80026de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe faa9 	bl	8000c38 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	; 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1d6      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8084 	beq.w	800281a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800271c:	429a      	cmp	r2, r3
 800271e:	d07c      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	461a      	mov	r2, r3
 800274a:	2301      	movs	r3, #1
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2300      	movs	r3, #0
 8002770:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002776:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d04b      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fa59 	bl	8000c38 <HAL_GetTick>
 8002786:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fa55 	bl	8000c38 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e180      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	61fb      	str	r3, [r7, #28]
  return result;
 80027b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d108      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027ce:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	e00d      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	10908100 	.word	0x10908100
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	4b9a      	ldr	r3, [pc, #616]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	613a      	str	r2, [r7, #16]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	60fa      	str	r2, [r7, #12]
  return result;
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0b7      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800281a:	4b8f      	ldr	r3, [pc, #572]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	498c      	ldr	r1, [pc, #560]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800282c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a87      	ldr	r2, [pc, #540]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284c:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f023 0203 	bic.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	497f      	ldr	r1, [pc, #508]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4978      	ldr	r1, [pc, #480]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002888:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4970      	ldr	r1, [pc, #448]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028a6:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f023 0210 	bic.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4969      	ldr	r1, [pc, #420]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	4961      	ldr	r1, [pc, #388]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f023 0220 	bic.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	495a      	ldr	r1, [pc, #360]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	4952      	ldr	r1, [pc, #328]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	494b      	ldr	r1, [pc, #300]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4943      	ldr	r1, [pc, #268]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	493c      	ldr	r1, [pc, #240]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	4934      	ldr	r1, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	4925      	ldr	r1, [pc, #148]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	491e      	ldr	r1, [pc, #120]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	e002      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	4913      	ldr	r1, [pc, #76]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	490b      	ldr	r1, [pc, #44]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3748      	adds	r7, #72	; 0x48
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e09d      	b.n	8002bfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad2:	d009      	beq.n	8002ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
 8002ada:	e005      	b.n	8002ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd ff34 	bl	8000970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b28:	d902      	bls.n	8002b30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e002      	b.n	8002b36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b3e:	d007      	beq.n	8002b50 <HAL_SPI_Init+0xa0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	ea42 0103 	orr.w	r1, r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	0c1b      	lsrs	r3, r3, #16
 8002bac:	f003 0204 	and.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002bcc:	ea42 0103 	orr.w	r1, r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b088      	sub	sp, #32
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_SPI_Transmit+0x22>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e158      	b.n	8002eda <HAL_SPI_Transmit+0x2d4>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c30:	f7fe f802 	bl	8000c38 <HAL_GetTick>
 8002c34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d002      	beq.n	8002c4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
 8002c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c4a:	e13d      	b.n	8002ec8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x52>
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c5c:	e134      	b.n	8002ec8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	d10f      	bne.n	8002cca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d007      	beq.n	8002ce8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf0:	d94b      	bls.n	8002d8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Transmit+0xfa>
 8002cfa:	8afb      	ldrh	r3, [r7, #22]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d13e      	bne.n	8002d7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d24:	e02b      	b.n	8002d7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d112      	bne.n	8002d5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d58:	e011      	b.n	8002d7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5a:	f7fd ff6d 	bl	8000c38 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d803      	bhi.n	8002d72 <HAL_SPI_Transmit+0x16c>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x172>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d7c:	e0a4      	b.n	8002ec8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ce      	bne.n	8002d26 <HAL_SPI_Transmit+0x120>
 8002d88:	e07c      	b.n	8002e84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0x192>
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d170      	bne.n	8002e7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d912      	bls.n	8002dc8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	1c9a      	adds	r2, r3, #2
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b02      	subs	r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dc6:	e058      	b.n	8002e7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002dee:	e044      	b.n	8002e7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d12b      	bne.n	8002e56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d912      	bls.n	8002e2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	1c9a      	adds	r2, r3, #2
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b02      	subs	r3, #2
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e2c:	e025      	b.n	8002e7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	7812      	ldrb	r2, [r2, #0]
 8002e3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e54:	e011      	b.n	8002e7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e56:	f7fd feef 	bl	8000c38 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d803      	bhi.n	8002e6e <HAL_SPI_Transmit+0x268>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_Transmit+0x26e>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e78:	e026      	b.n	8002ec8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1b5      	bne.n	8002df0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fb5b 	bl	8003544 <SPI_EndRxTxTransaction>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e000      	b.n	8002ec8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08a      	sub	sp, #40	; 0x28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x26>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e1fb      	b.n	8003300 <HAL_SPI_TransmitReceive+0x41e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f10:	f7fd fe92 	bl	8000c38 <HAL_GetTick>
 8002f14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f2c:	7efb      	ldrb	r3, [r7, #27]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d00e      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x6e>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f38:	d106      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x66>
 8002f42:	7efb      	ldrb	r3, [r7, #27]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d003      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f4e:	e1cd      	b.n	80032ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x80>
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f68:	e1c0      	b.n	80032ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d003      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2205      	movs	r2, #5
 8002f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	887a      	ldrh	r2, [r7, #2]
 8002faa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc0:	d802      	bhi.n	8002fc8 <HAL_SPI_TransmitReceive+0xe6>
 8002fc2:	8a3b      	ldrh	r3, [r7, #16]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d908      	bls.n	8002fda <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	e007      	b.n	8002fea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fe8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d007      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003010:	d97c      	bls.n	800310c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x13e>
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d169      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003044:	e056      	b.n	80030f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d11b      	bne.n	800308c <HAL_SPI_TransmitReceive+0x1aa>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_SPI_TransmitReceive+0x1aa>
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d113      	bne.n	800308c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	1c9a      	adds	r2, r3, #2
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d11c      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x1f2>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	b292      	uxth	r2, r2
 80030b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030d4:	f7fd fdb0 	bl	8000c38 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d807      	bhi.n	80030f4 <HAL_SPI_TransmitReceive+0x212>
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d003      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030f2:	e0fb      	b.n	80032ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1a3      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x164>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d19d      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x164>
 800310a:	e0df      	b.n	80032cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_SPI_TransmitReceive+0x23a>
 8003114:	8a7b      	ldrh	r3, [r7, #18]
 8003116:	2b01      	cmp	r3, #1
 8003118:	f040 80cb 	bne.w	80032b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d912      	bls.n	800314c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b02      	subs	r3, #2
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800314a:	e0b2      	b.n	80032b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003172:	e09e      	b.n	80032b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d134      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x30a>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02f      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x30a>
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	2b01      	cmp	r3, #1
 8003190:	d12c      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d912      	bls.n	80031c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b02      	subs	r3, #2
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031c0:	e012      	b.n	80031e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d148      	bne.n	800328c <HAL_SPI_TransmitReceive+0x3aa>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d042      	beq.n	800328c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d923      	bls.n	800325a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	b292      	uxth	r2, r2
 800321e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	1c9a      	adds	r2, r3, #2
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b02      	subs	r3, #2
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d81f      	bhi.n	8003288 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e016      	b.n	8003288 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f103 020c 	add.w	r2, r3, #12
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800328c:	f7fd fcd4 	bl	8000c38 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	429a      	cmp	r2, r3
 800329a:	d803      	bhi.n	80032a4 <HAL_SPI_TransmitReceive+0x3c2>
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x3c8>
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032b0:	e01c      	b.n	80032ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f47f af5b 	bne.w	8003174 <HAL_SPI_TransmitReceive+0x292>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f47f af54 	bne.w	8003174 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f937 	bl	8003544 <SPI_EndRxTxTransaction>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
 80032e8:	e000      	b.n	80032ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80032ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003318:	f7fd fc8e 	bl	8000c38 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4413      	add	r3, r2
 8003326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003328:	f7fd fc86 	bl	8000c38 <HAL_GetTick>
 800332c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800332e:	4b39      	ldr	r3, [pc, #228]	; (8003414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	015b      	lsls	r3, r3, #5
 8003334:	0d1b      	lsrs	r3, r3, #20
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800333e:	e054      	b.n	80033ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d050      	beq.n	80033ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003348:	f7fd fc76 	bl	8000c38 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d902      	bls.n	800335e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d13d      	bne.n	80033da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800336c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003376:	d111      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d004      	beq.n	800338c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	d107      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a4:	d10f      	bne.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e017      	b.n	800340a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d19b      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000

08003418 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800342a:	f7fd fc05 	bl	8000c38 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	4413      	add	r3, r2
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800343a:	f7fd fbfd 	bl	8000c38 <HAL_GetTick>
 800343e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003448:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00da      	lsls	r2, r3, #3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	0d1b      	lsrs	r3, r3, #20
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003460:	e060      	b.n	8003524 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003468:	d107      	bne.n	800347a <SPI_WaitFifoStateUntilTimeout+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d104      	bne.n	800347a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003478:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d050      	beq.n	8003524 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003482:	f7fd fbd9 	bl	8000c38 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	429a      	cmp	r2, r3
 8003490:	d902      	bls.n	8003498 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d13d      	bne.n	8003514 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b0:	d111      	bne.n	80034d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d004      	beq.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d107      	bne.n	80034d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	d10f      	bne.n	8003500 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e010      	b.n	8003536 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3b01      	subs	r3, #1
 8003522:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d196      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000000 	.word	0x20000000

08003544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2200      	movs	r2, #0
 8003558:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ff5b 	bl	8003418 <SPI_WaitFifoStateUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e027      	b.n	80035c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff fec0 	bl	8003308 <SPI_WaitFlagStateUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e014      	b.n	80035c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff ff34 	bl	8003418 <SPI_WaitFifoStateUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e000      	b.n	80035c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e040      	b.n	8003664 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fa1e 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f82c 	bl	800366c <UART_SetConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9f6 	bl	8003a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa7d 	bl	8003b5c <UART_CheckIdleState>
 8003662:	4603      	mov	r3, r0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <UART_SetConfig+0x274>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a80      	ldr	r2, [pc, #512]	; (80038e4 <UART_SetConfig+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d120      	bne.n	800372a <UART_SetConfig+0xbe>
 80036e8:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <UART_SetConfig+0x27c>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d817      	bhi.n	8003724 <UART_SetConfig+0xb8>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x90>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003719 	.word	0x08003719
 8003704:	0800371f 	.word	0x0800371f
 8003708:	08003713 	.word	0x08003713
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e0b5      	b.n	800387e <UART_SetConfig+0x212>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e0b2      	b.n	800387e <UART_SetConfig+0x212>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e0af      	b.n	800387e <UART_SetConfig+0x212>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e0ac      	b.n	800387e <UART_SetConfig+0x212>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e0a9      	b.n	800387e <UART_SetConfig+0x212>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6f      	ldr	r2, [pc, #444]	; (80038ec <UART_SetConfig+0x280>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d124      	bne.n	800377e <UART_SetConfig+0x112>
 8003734:	4b6c      	ldr	r3, [pc, #432]	; (80038e8 <UART_SetConfig+0x27c>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800373c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003740:	d011      	beq.n	8003766 <UART_SetConfig+0xfa>
 8003742:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003746:	d817      	bhi.n	8003778 <UART_SetConfig+0x10c>
 8003748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800374c:	d011      	beq.n	8003772 <UART_SetConfig+0x106>
 800374e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003752:	d811      	bhi.n	8003778 <UART_SetConfig+0x10c>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <UART_SetConfig+0xf4>
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d006      	beq.n	800376c <UART_SetConfig+0x100>
 800375e:	e00b      	b.n	8003778 <UART_SetConfig+0x10c>
 8003760:	2300      	movs	r3, #0
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e08b      	b.n	800387e <UART_SetConfig+0x212>
 8003766:	2302      	movs	r3, #2
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e088      	b.n	800387e <UART_SetConfig+0x212>
 800376c:	2304      	movs	r3, #4
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e085      	b.n	800387e <UART_SetConfig+0x212>
 8003772:	2308      	movs	r3, #8
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e082      	b.n	800387e <UART_SetConfig+0x212>
 8003778:	2310      	movs	r3, #16
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e07f      	b.n	800387e <UART_SetConfig+0x212>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <UART_SetConfig+0x284>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d124      	bne.n	80037d2 <UART_SetConfig+0x166>
 8003788:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <UART_SetConfig+0x27c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003790:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003794:	d011      	beq.n	80037ba <UART_SetConfig+0x14e>
 8003796:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800379a:	d817      	bhi.n	80037cc <UART_SetConfig+0x160>
 800379c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037a0:	d011      	beq.n	80037c6 <UART_SetConfig+0x15a>
 80037a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037a6:	d811      	bhi.n	80037cc <UART_SetConfig+0x160>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <UART_SetConfig+0x148>
 80037ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037b0:	d006      	beq.n	80037c0 <UART_SetConfig+0x154>
 80037b2:	e00b      	b.n	80037cc <UART_SetConfig+0x160>
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e061      	b.n	800387e <UART_SetConfig+0x212>
 80037ba:	2302      	movs	r3, #2
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e05e      	b.n	800387e <UART_SetConfig+0x212>
 80037c0:	2304      	movs	r3, #4
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e05b      	b.n	800387e <UART_SetConfig+0x212>
 80037c6:	2308      	movs	r3, #8
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e058      	b.n	800387e <UART_SetConfig+0x212>
 80037cc:	2310      	movs	r3, #16
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e055      	b.n	800387e <UART_SetConfig+0x212>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a47      	ldr	r2, [pc, #284]	; (80038f4 <UART_SetConfig+0x288>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d124      	bne.n	8003826 <UART_SetConfig+0x1ba>
 80037dc:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <UART_SetConfig+0x27c>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037e8:	d011      	beq.n	800380e <UART_SetConfig+0x1a2>
 80037ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037ee:	d817      	bhi.n	8003820 <UART_SetConfig+0x1b4>
 80037f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f4:	d011      	beq.n	800381a <UART_SetConfig+0x1ae>
 80037f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037fa:	d811      	bhi.n	8003820 <UART_SetConfig+0x1b4>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <UART_SetConfig+0x19c>
 8003800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003804:	d006      	beq.n	8003814 <UART_SetConfig+0x1a8>
 8003806:	e00b      	b.n	8003820 <UART_SetConfig+0x1b4>
 8003808:	2300      	movs	r3, #0
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e037      	b.n	800387e <UART_SetConfig+0x212>
 800380e:	2302      	movs	r3, #2
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e034      	b.n	800387e <UART_SetConfig+0x212>
 8003814:	2304      	movs	r3, #4
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e031      	b.n	800387e <UART_SetConfig+0x212>
 800381a:	2308      	movs	r3, #8
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e02e      	b.n	800387e <UART_SetConfig+0x212>
 8003820:	2310      	movs	r3, #16
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e02b      	b.n	800387e <UART_SetConfig+0x212>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <UART_SetConfig+0x28c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d124      	bne.n	800387a <UART_SetConfig+0x20e>
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <UART_SetConfig+0x27c>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800383c:	d011      	beq.n	8003862 <UART_SetConfig+0x1f6>
 800383e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003842:	d817      	bhi.n	8003874 <UART_SetConfig+0x208>
 8003844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003848:	d011      	beq.n	800386e <UART_SetConfig+0x202>
 800384a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384e:	d811      	bhi.n	8003874 <UART_SetConfig+0x208>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <UART_SetConfig+0x1f0>
 8003854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003858:	d006      	beq.n	8003868 <UART_SetConfig+0x1fc>
 800385a:	e00b      	b.n	8003874 <UART_SetConfig+0x208>
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e00d      	b.n	800387e <UART_SetConfig+0x212>
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e00a      	b.n	800387e <UART_SetConfig+0x212>
 8003868:	2304      	movs	r3, #4
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e007      	b.n	800387e <UART_SetConfig+0x212>
 800386e:	2308      	movs	r3, #8
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e004      	b.n	800387e <UART_SetConfig+0x212>
 8003874:	2310      	movs	r3, #16
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e001      	b.n	800387e <UART_SetConfig+0x212>
 800387a:	2310      	movs	r3, #16
 800387c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d16c      	bne.n	8003962 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d838      	bhi.n	8003900 <UART_SetConfig+0x294>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x228>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	08003901 	.word	0x08003901
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	08003901 	.word	0x08003901
 80038ac:	08003901 	.word	0x08003901
 80038b0:	08003901 	.word	0x08003901
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fe98 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e024      	b.n	800390a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe feb6 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80038c4:	61b8      	str	r0, [r7, #24]
        break;
 80038c6:	e020      	b.n	800390a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <UART_SetConfig+0x290>)
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e01d      	b.n	800390a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe fe17 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80038d2:	61b8      	str	r0, [r7, #24]
        break;
 80038d4:	e019      	b.n	800390a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e015      	b.n	800390a <UART_SetConfig+0x29e>
 80038de:	bf00      	nop
 80038e0:	efff69f3 	.word	0xefff69f3
 80038e4:	40013800 	.word	0x40013800
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40004400 	.word	0x40004400
 80038f0:	40004800 	.word	0x40004800
 80038f4:	40004c00 	.word	0x40004c00
 80038f8:	40005000 	.word	0x40005000
 80038fc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	77bb      	strb	r3, [r7, #30]
        break;
 8003908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d075      	beq.n	80039fc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	005a      	lsls	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	b29b      	uxth	r3, r3
 8003926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b0f      	cmp	r3, #15
 800392c:	d916      	bls.n	800395c <UART_SetConfig+0x2f0>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d212      	bcs.n	800395c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f023 030f 	bic.w	r3, r3, #15
 800393e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	b29b      	uxth	r3, r3
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	b29a      	uxth	r2, r3
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	4313      	orrs	r3, r2
 8003950:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	89fa      	ldrh	r2, [r7, #14]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e04f      	b.n	80039fc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	77bb      	strb	r3, [r7, #30]
 8003960:	e04c      	b.n	80039fc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003962:	7ffb      	ldrb	r3, [r7, #31]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d828      	bhi.n	80039ba <UART_SetConfig+0x34e>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0x304>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003995 	.word	0x08003995
 8003974:	0800399d 	.word	0x0800399d
 8003978:	080039a5 	.word	0x080039a5
 800397c:	080039bb 	.word	0x080039bb
 8003980:	080039ab 	.word	0x080039ab
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039bb 	.word	0x080039bb
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7fe fe2a 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8003998:	61b8      	str	r0, [r7, #24]
        break;
 800399a:	e013      	b.n	80039c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe fe48 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80039a0:	61b8      	str	r0, [r7, #24]
        break;
 80039a2:	e00f      	b.n	80039c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <UART_SetConfig+0x3a8>)
 80039a6:	61bb      	str	r3, [r7, #24]
        break;
 80039a8:	e00c      	b.n	80039c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fda9 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80039ae:	61b8      	str	r0, [r7, #24]
        break;
 80039b0:	e008      	b.n	80039c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b6:	61bb      	str	r3, [r7, #24]
        break;
 80039b8:	e004      	b.n	80039c4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	77bb      	strb	r3, [r7, #30]
        break;
 80039c2:	bf00      	nop
    }

    if (pclk != 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	085a      	lsrs	r2, r3, #1
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d908      	bls.n	80039f8 <UART_SetConfig+0x38c>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d204      	bcs.n	80039f8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	e001      	b.n	80039fc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a08:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	007a1200 	.word	0x007a1200

08003a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b16:	d10a      	bne.n	8003b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b6c:	f7fd f864 	bl	8000c38 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d10e      	bne.n	8003b9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f82d 	bl	8003bee <UART_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e023      	b.n	8003be6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d10e      	bne.n	8003bca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f817 	bl	8003bee <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00d      	b.n	8003be6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b09c      	sub	sp, #112	; 0x70
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	e0a5      	b.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	f000 80a1 	beq.w	8003d4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fd f815 	bl	8000c38 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d13e      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c34:	667b      	str	r3, [r7, #100]	; 0x64
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e067      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d04f      	beq.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cba:	d147      	bne.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e6      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	613b      	str	r3, [r7, #16]
   return(result);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d18:	623a      	str	r2, [r7, #32]
 8003d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	69f9      	ldr	r1, [r7, #28]
 8003d1e:	6a3a      	ldr	r2, [r7, #32]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e010      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	f43f af4a 	beq.w	8003c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3770      	adds	r7, #112	; 0x70
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <__libc_init_array>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	4d0d      	ldr	r5, [pc, #52]	; (8003db0 <__libc_init_array+0x38>)
 8003d7c:	4c0d      	ldr	r4, [pc, #52]	; (8003db4 <__libc_init_array+0x3c>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	2600      	movs	r6, #0
 8003d84:	42a6      	cmp	r6, r4
 8003d86:	d109      	bne.n	8003d9c <__libc_init_array+0x24>
 8003d88:	4d0b      	ldr	r5, [pc, #44]	; (8003db8 <__libc_init_array+0x40>)
 8003d8a:	4c0c      	ldr	r4, [pc, #48]	; (8003dbc <__libc_init_array+0x44>)
 8003d8c:	f000 f82e 	bl	8003dec <_init>
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	2600      	movs	r6, #0
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	d105      	bne.n	8003da6 <__libc_init_array+0x2e>
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da0:	4798      	blx	r3
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7ee      	b.n	8003d84 <__libc_init_array+0xc>
 8003da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003daa:	4798      	blx	r3
 8003dac:	3601      	adds	r6, #1
 8003dae:	e7f2      	b.n	8003d96 <__libc_init_array+0x1e>
 8003db0:	08003eb8 	.word	0x08003eb8
 8003db4:	08003eb8 	.word	0x08003eb8
 8003db8:	08003eb8 	.word	0x08003eb8
 8003dbc:	08003ebc 	.word	0x08003ebc

08003dc0 <memcpy>:
 8003dc0:	440a      	add	r2, r1
 8003dc2:	4291      	cmp	r1, r2
 8003dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dc8:	d100      	bne.n	8003dcc <memcpy+0xc>
 8003dca:	4770      	bx	lr
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dd6:	4291      	cmp	r1, r2
 8003dd8:	d1f9      	bne.n	8003dce <memcpy+0xe>
 8003dda:	bd10      	pop	{r4, pc}

08003ddc <memset>:
 8003ddc:	4402      	add	r2, r0
 8003dde:	4603      	mov	r3, r0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <_init>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	bf00      	nop
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr

08003df8 <_fini>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	bf00      	nop
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr
