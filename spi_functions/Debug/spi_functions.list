
spi_functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800417c  0800417c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800417c  0800417c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcdf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e9  00000000  00000000  0002bd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000800  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205bc  00000000  00000000  0002e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1d7  00000000  00000000  0004edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3444  00000000  00000000  0005afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e3e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024c0  00000000  00000000  0011e438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040b0 	.word	0x080040b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080040b0 	.word	0x080040b0

080001d4 <max_read_reg>:
//unsigned char sample[9000];

extern SPI_HandleTypeDef hspi2;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
unsigned char * max_read_reg( unsigned char  reg_addr,uint8_t count)
{
 80001d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d8:	b08d      	sub	sp, #52	; 0x34
 80001da:	af02      	add	r7, sp, #8
 80001dc:	4603      	mov	r3, r0
 80001de:	460a      	mov	r2, r1
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	4613      	mov	r3, r2
 80001e4:	73bb      	strb	r3, [r7, #14]
 80001e6:	466b      	mov	r3, sp
 80001e8:	461e      	mov	r6, r3
	unsigned char tx[count+2];
 80001ea:	7bbb      	ldrb	r3, [r7, #14]
 80001ec:	1c99      	adds	r1, r3, #2
 80001ee:	1e4b      	subs	r3, r1, #1
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24
 80001f2:	460a      	mov	r2, r1
 80001f4:	2300      	movs	r3, #0
 80001f6:	603a      	str	r2, [r7, #0]
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	f04f 0200 	mov.w	r2, #0
 80001fe:	f04f 0300 	mov.w	r3, #0
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	00c3      	lsls	r3, r0, #3
 8000206:	6838      	ldr	r0, [r7, #0]
 8000208:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800020c:	6838      	ldr	r0, [r7, #0]
 800020e:	00c2      	lsls	r2, r0, #3
 8000210:	460a      	mov	r2, r1
 8000212:	2300      	movs	r3, #0
 8000214:	4692      	mov	sl, r2
 8000216:	469b      	mov	fp, r3
 8000218:	f04f 0200 	mov.w	r2, #0
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800022c:	460b      	mov	r3, r1
 800022e:	3307      	adds	r3, #7
 8000230:	08db      	lsrs	r3, r3, #3
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	ebad 0d03 	sub.w	sp, sp, r3
 8000238:	ab02      	add	r3, sp, #8
 800023a:	3300      	adds	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
	unsigned char rx[count+2];
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	1c99      	adds	r1, r3, #2
 8000242:	1e4b      	subs	r3, r1, #1
 8000244:	617b      	str	r3, [r7, #20]
 8000246:	460a      	mov	r2, r1
 8000248:	2300      	movs	r3, #0
 800024a:	4690      	mov	r8, r2
 800024c:	4699      	mov	r9, r3
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	f04f 0300 	mov.w	r3, #0
 8000256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800025a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800025e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000262:	460a      	mov	r2, r1
 8000264:	2300      	movs	r3, #0
 8000266:	4614      	mov	r4, r2
 8000268:	461d      	mov	r5, r3
 800026a:	f04f 0200 	mov.w	r2, #0
 800026e:	f04f 0300 	mov.w	r3, #0
 8000272:	00eb      	lsls	r3, r5, #3
 8000274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000278:	00e2      	lsls	r2, r4, #3
 800027a:	460b      	mov	r3, r1
 800027c:	3307      	adds	r3, #7
 800027e:	08db      	lsrs	r3, r3, #3
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	ebad 0d03 	sub.w	sp, sp, r3
 8000286:	ab02      	add	r3, sp, #8
 8000288:	3300      	adds	r3, #0
 800028a:	613b      	str	r3, [r7, #16]

	//read

	tx[0] = reg_addr;
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	7bfa      	ldrb	r2, [r7, #15]
 8000290:	701a      	strb	r2, [r3, #0]
	tx[1] = 0x80;
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	705a      	strb	r2, [r3, #1]
	tx[2] = 0xff;
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	709a      	strb	r2, [r3, #2]

	for(int i=3;i<count+2;i++)
 800029e:	2303      	movs	r3, #3
 80002a0:	61fb      	str	r3, [r7, #28]
 80002a2:	e007      	b.n	80002b4 <max_read_reg+0xe0>
	{
		tx[i]=0xff;
 80002a4:	69ba      	ldr	r2, [r7, #24]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	4413      	add	r3, r2
 80002aa:	22ff      	movs	r2, #255	; 0xff
 80002ac:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<count+2;i++)
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3301      	adds	r3, #1
 80002b2:	61fb      	str	r3, [r7, #28]
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	3301      	adds	r3, #1
 80002b8:	69fa      	ldr	r2, [r7, #28]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	ddf2      	ble.n	80002a4 <max_read_reg+0xd0>
	}

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2108      	movs	r1, #8
 80002c2:	481a      	ldr	r0, [pc, #104]	; (800032c <max_read_reg+0x158>)
 80002c4:	f000 ff2c 	bl	8001120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	4817      	ldr	r0, [pc, #92]	; (800032c <max_read_reg+0x158>)
 80002ce:	f000 ff27 	bl	8001120 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, tx, rx, (uint16_t)count+2, (uint32_t)1000);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	3302      	adds	r3, #2
 80002d8:	b29b      	uxth	r3, r3
 80002da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	693a      	ldr	r2, [r7, #16]
 80002e2:	69b9      	ldr	r1, [r7, #24]
 80002e4:	4812      	ldr	r0, [pc, #72]	; (8000330 <max_read_reg+0x15c>)
 80002e6:	f002 fdf4 	bl	8002ed2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	480f      	ldr	r0, [pc, #60]	; (800032c <max_read_reg+0x158>)
 80002f0:	f000 ff16 	bl	8001120 <HAL_GPIO_WritePin>


	for (int i = 0; i < count+2; i++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
 80002f8:	e00b      	b.n	8000312 <max_read_reg+0x13e>
	{
		rx_global[i] = rx[i];
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	6a3b      	ldr	r3, [r7, #32]
 80002fe:	4413      	add	r3, r2
 8000300:	7819      	ldrb	r1, [r3, #0]
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <max_read_reg+0x160>)
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	4413      	add	r3, r2
 8000308:	460a      	mov	r2, r1
 800030a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < count+2; i++)
 800030c:	6a3b      	ldr	r3, [r7, #32]
 800030e:	3301      	adds	r3, #1
 8000310:	623b      	str	r3, [r7, #32]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	3301      	adds	r3, #1
 8000316:	6a3a      	ldr	r2, [r7, #32]
 8000318:	429a      	cmp	r2, r3
 800031a:	ddee      	ble.n	80002fa <max_read_reg+0x126>

	}
	return rx_global;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <max_read_reg+0x160>)
 800031e:	46b5      	mov	sp, r6

}
 8000320:	4618      	mov	r0, r3
 8000322:	372c      	adds	r7, #44	; 0x2c
 8000324:	46bd      	mov	sp, r7
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	bf00      	nop
 800032c:	48000800 	.word	0x48000800
 8000330:	200000a0 	.word	0x200000a0
 8000334:	2000008c 	.word	0x2000008c

08000338 <max_write_reg>:
/*/////////////////////////////////////////////////////////////////////////////////////////////*/
void  max_write_reg(uint8_t reg_addr,uint8_t  write_val,uint8_t count)
{
 8000338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800033c:	b087      	sub	sp, #28
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]
 8000344:	460b      	mov	r3, r1
 8000346:	71bb      	strb	r3, [r7, #6]
 8000348:	4613      	mov	r3, r2
 800034a:	717b      	strb	r3, [r7, #5]
 800034c:	466b      	mov	r3, sp
 800034e:	461e      	mov	r6, r3

	unsigned char tx[count+2];
 8000350:	797b      	ldrb	r3, [r7, #5]
 8000352:	1c99      	adds	r1, r3, #2
 8000354:	1e4b      	subs	r3, r1, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	460a      	mov	r2, r1
 800035a:	2300      	movs	r3, #0
 800035c:	4690      	mov	r8, r2
 800035e:	4699      	mov	r9, r3
 8000360:	f04f 0200 	mov.w	r2, #0
 8000364:	f04f 0300 	mov.w	r3, #0
 8000368:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800036c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000370:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000374:	460a      	mov	r2, r1
 8000376:	2300      	movs	r3, #0
 8000378:	4614      	mov	r4, r2
 800037a:	461d      	mov	r5, r3
 800037c:	f04f 0200 	mov.w	r2, #0
 8000380:	f04f 0300 	mov.w	r3, #0
 8000384:	00eb      	lsls	r3, r5, #3
 8000386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800038a:	00e2      	lsls	r2, r4, #3
 800038c:	460b      	mov	r3, r1
 800038e:	3307      	adds	r3, #7
 8000390:	08db      	lsrs	r3, r3, #3
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	ebad 0d03 	sub.w	sp, sp, r3
 8000398:	466b      	mov	r3, sp
 800039a:	3300      	adds	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]

	max_read_reg(reg_addr,count);  //dummy read
 800039e:	797a      	ldrb	r2, [r7, #5]
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff15 	bl	80001d4 <max_read_reg>

	//write
	tx[0] = reg_addr;
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	701a      	strb	r2, [r3, #0]
	tx[1] = 0x00;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
	tx[2] = write_val;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	709a      	strb	r2, [r3, #2]

	for(int i=3;i<count+2;i++)
 80003bc:	2303      	movs	r3, #3
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	e007      	b.n	80003d2 <max_write_reg+0x9a>
	{
		tx[i]=0xff;
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	4413      	add	r3, r2
 80003c8:	22ff      	movs	r2, #255	; 0xff
 80003ca:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<count+2;i++)
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	3301      	adds	r3, #1
 80003d0:	613b      	str	r3, [r7, #16]
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	3301      	adds	r3, #1
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	ddf2      	ble.n	80003c2 <max_write_reg+0x8a>
	}


	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	4815      	ldr	r0, [pc, #84]	; (8000438 <max_write_reg+0x100>)
 80003e2:	f000 fe9d 	bl	8001120 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, tx, (uint16_t)count+2, (uint32_t)1000);
 80003e6:	797b      	ldrb	r3, [r7, #5]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	3302      	adds	r3, #2
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <max_write_reg+0x104>)
 80003f6:	f002 fbfe 	bl	8002bf6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2108      	movs	r1, #8
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <max_write_reg+0x100>)
 8000400:	f000 fe8e 	bl	8001120 <HAL_GPIO_WritePin>
	tx[2] = 0xff;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	22ff      	movs	r2, #255	; 0xff
 8000408:	709a      	strb	r2, [r3, #2]

	for(int i=3;i<count+2;i++)
 800040a:	2303      	movs	r3, #3
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e007      	b.n	8000420 <max_write_reg+0xe8>
	{
		tx[i]=0xff;
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	4413      	add	r3, r2
 8000416:	22ff      	movs	r2, #255	; 0xff
 8000418:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<count+2;i++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	797b      	ldrb	r3, [r7, #5]
 8000422:	3301      	adds	r3, #1
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	429a      	cmp	r2, r3
 8000428:	ddf2      	ble.n	8000410 <max_write_reg+0xd8>
 800042a:	46b5      	mov	sp, r6
	}

}
 800042c:	bf00      	nop
 800042e:	371c      	adds	r7, #28
 8000430:	46bd      	mov	sp, r7
 8000432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000436:	bf00      	nop
 8000438:	48000800 	.word	0x48000800
 800043c:	200000a0 	.word	0x200000a0

08000440 <ppg_init>:

/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

unsigned char * ppg_init()

{
 8000440:	b580      	push	{r7, lr}
 8000442:	b0a4      	sub	sp, #144	; 0x90
 8000444:	af00      	add	r7, sp, #0
	unsigned char ppg_config[122]=
 8000446:	4a32      	ldr	r2, [pc, #200]	; (8000510 <ppg_init+0xd0>)
 8000448:	463b      	mov	r3, r7
 800044a:	4611      	mov	r1, r2
 800044c:	227a      	movs	r2, #122	; 0x7a
 800044e:	4618      	mov	r0, r3
 8000450:	f003 fd50 	bl	8003ef4 <memcpy>



	};

	for(int i=0; i<122;i=i+2)
 8000454:	2300      	movs	r3, #0
 8000456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800045a:	e014      	b.n	8000486 <ppg_init+0x46>
	{
		max_write_reg(ppg_config[i],ppg_config[i+1],1);
 800045c:	463a      	mov	r2, r7
 800045e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000462:	4413      	add	r3, r2
 8000464:	7818      	ldrb	r0, [r3, #0]
 8000466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800046a:	3301      	adds	r3, #1
 800046c:	3390      	adds	r3, #144	; 0x90
 800046e:	443b      	add	r3, r7
 8000470:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8000474:	2201      	movs	r2, #1
 8000476:	4619      	mov	r1, r3
 8000478:	f7ff ff5e 	bl	8000338 <max_write_reg>
	for(int i=0; i<122;i=i+2)
 800047c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000480:	3302      	adds	r3, #2
 8000482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800048a:	2b79      	cmp	r3, #121	; 0x79
 800048c:	dde6      	ble.n	800045c <ppg_init+0x1c>
	}

	unsigned char *temp;

	int k = 2;
 800048e:	2302      	movs	r3, #2
 8000490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint8_t * buf;

	uint32_t number = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

//	uint8_t *xy =&buf;

	unsigned char* sample = calloc(18, sizeof(char));
 800049a:	2101      	movs	r1, #1
 800049c:	2012      	movs	r0, #18
 800049e:	f003 fcf7 	bl	8003e90 <calloc>
 80004a2:	4603      	mov	r3, r0
 80004a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
*/
	while(1)
{
		while (1)
		{
			if(*(max_read_reg(0x0b,1)+2)==0x06){
 80004a8:	2101      	movs	r1, #1
 80004aa:	200b      	movs	r0, #11
 80004ac:	f7ff fe92 	bl	80001d4 <max_read_reg>
 80004b0:	4603      	mov	r3, r0
 80004b2:	3302      	adds	r3, #2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b06      	cmp	r3, #6
 80004b8:	d000      	beq.n	80004bc <ppg_init+0x7c>
 80004ba:	e7f5      	b.n	80004a8 <ppg_init+0x68>
				break;
 80004bc:	bf00      	nop
			}

		}


		temp=max_read_reg(0x0c,18);
 80004be:	2112      	movs	r1, #18
 80004c0:	200c      	movs	r0, #12
 80004c2:	f7ff fe87 	bl	80001d4 <max_read_reg>
 80004c6:	67f8      	str	r0, [r7, #124]	; 0x7c

		while(k<20){
 80004c8:	e010      	b.n	80004ec <ppg_init+0xac>

			*(sample+(k-2))= *(temp+k);
 80004ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80004d0:	441a      	add	r2, r3
 80004d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004d6:	3b02      	subs	r3, #2
 80004d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80004dc:	440b      	add	r3, r1
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	701a      	strb	r2, [r3, #0]
			k++;
 80004e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004e6:	3301      	adds	r3, #1
 80004e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		while(k<20){
 80004ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004f0:	2b13      	cmp	r3, #19
 80004f2:	ddea      	ble.n	80004ca <ppg_init+0x8a>

		}


		k=2;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
//			number = shifter((uint32_t)*(sample+h),(uint32_t) *(sample+h+1),(uint32_t)*(sample+h+2));
////			buf = &number;
//			HAL_UART_Transmit(&huart1, (uint8_t *)number, sizeof(number), HAL_MAX_DELAY);
//		}

		HAL_UART_Transmit(&huart1, sample, 18, 100);
 80004fa:	2364      	movs	r3, #100	; 0x64
 80004fc:	2212      	movs	r2, #18
 80004fe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <ppg_init+0xd4>)
 8000504:	f003 f8aa 	bl	800365c <HAL_UART_Transmit>
		HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 fb75 	bl	8000bf8 <HAL_Delay>
	while(1)
 800050e:	e7cb      	b.n	80004a8 <ppg_init+0x68>
 8000510:	080040c8 	.word	0x080040c8
 8000514:	20000104 	.word	0x20000104

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fb05 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f810 	bl	8000546 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f90f 	bl	8000748 <MX_GPIO_Init>
  MX_SPI2_Init();
 800052a:	f000 f86b 	bl	8000604 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800052e:	f000 f8db 	bl	80006e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f8a5 	bl	8000680 <MX_USART1_UART_Init>

//	memset(sample, 0, number*sizeof(sample[0]));

///reading ppg data

	x=ppg_init();
 8000536:	f7ff ff83 	bl	8000440 <ppg_init>
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b0a6      	sub	sp, #152	; 0x98
 800054a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000550:	2228      	movs	r2, #40	; 0x28
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f003 fcdb 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2258      	movs	r2, #88	; 0x58
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f003 fccd 	bl	8003f10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fdd4 	bl	8001150 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005ae:	f000 f921 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fe13 	bl	80021f8 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d8:	f000 f90c 	bl	80007f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005dc:	2303      	movs	r3, #3
 80005de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f83a 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005f6:	f000 f8fd 	bl	80007f4 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3798      	adds	r7, #152	; 0x98
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_SPI2_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <MX_SPI2_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_SPI2_Init+0x74>)
 8000610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_SPI2_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_SPI2_Init+0x74>)
 800061e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000622:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_SPI2_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_SPI2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_SPI2_Init+0x74>)
 8000632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000636:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_SPI2_Init+0x74>)
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_SPI2_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_SPI2_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_SPI2_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_SPI2_Init+0x74>)
 8000652:	2207      	movs	r2, #7
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_SPI2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_SPI2_Init+0x74>)
 800065e:	2208      	movs	r2, #8
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_SPI2_Init+0x74>)
 8000664:	f002 fa1c 	bl	8002aa0 <HAL_SPI_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f8c1 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000a0 	.word	0x200000a0
 800067c:	40003800 	.word	0x40003800

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_USART1_UART_Init+0x64>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 800068c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006be:	2210      	movs	r2, #16
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART1_UART_Init+0x60>)
 80006cc:	f002 ff78 	bl	80035c0 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f88d 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000104 	.word	0x20000104
 80006e4:	40013800 	.word	0x40013800

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800072c:	f002 ff48 	bl	80035c0 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f85d 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000188 	.word	0x20000188
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xa4>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_GPIO_Init+0xa4>)
 800077c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_GPIO_Init+0xa4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_GPIO_Init+0xa4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_GPIO_Init+0xa4>)
 80007ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_GPIO_Init+0xa4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2108      	movs	r1, #8
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007c4:	f000 fcac 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007c8:	2308      	movs	r3, #8
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007e0:	f000 fb14 	bl	8000e0c <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000800 	.word	0x48000800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a25      	ldr	r2, [pc, #148]	; (80008fc <HAL_SPI_MspInit+0xb4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d144      	bne.n	80008f4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a24      	ldr	r2, [pc, #144]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 8000888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_SPI_MspInit+0xb8>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008b2:	2302      	movs	r3, #2
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <HAL_SPI_MspInit+0xbc>)
 80008ce:	f000 fa9d 	bl	8000e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_SPI_MspInit+0xc0>)
 80008f0:	f000 fa8c 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40003800 	.word	0x40003800
 8000900:	40021000 	.word	0x40021000
 8000904:	48001400 	.word	0x48001400
 8000908:	48000400 	.word	0x48000400

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <HAL_UART_MspInit+0xd8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d128      	bne.n	8000980 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092e:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a27      	ldr	r2, [pc, #156]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 800094c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800095e:	2330      	movs	r3, #48	; 0x30
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800096e:	2307      	movs	r3, #7
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <HAL_UART_MspInit+0xe0>)
 800097a:	f000 fa47 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097e:	e02d      	b.n	80009dc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <HAL_UART_MspInit+0xe4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d128      	bne.n	80009dc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_MspInit+0xdc>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ba:	230c      	movs	r3, #12
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ca:	2307      	movs	r3, #7
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f000 fa18 	bl	8000e0c <HAL_GPIO_Init>
}
 80009dc:	bf00      	nop
 80009de:	3730      	adds	r7, #48	; 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40013800 	.word	0x40013800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800
 80009f0:	40004400 	.word	0x40004400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f8ba 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f003 fa12 	bl	8003ea0 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20010000 	.word	0x20010000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	2000020c 	.word	0x2000020c
 8000ab0:	20000228 	.word	0x20000228

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b02:	f7ff ffd7 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f003 f9d1 	bl	8003eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fd05 	bl	8000518 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b1c:	08004184 	.word	0x08004184
  ldr r2, =_sbss
 8000b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b24:	20000224 	.word	0x20000224

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f931 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fe5a 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f93b 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f911 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000210 	.word	0x20000210

08000be0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000210 	.word	0x20000210

08000bf8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c1e:	bf00      	nop
 8000c20:	f7ff ffde 	bl	8000be0 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff47 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff5c 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff8e 	bl	8000cf8 <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffb0 	bl	8000d60 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e160      	b.n	80010de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8152 	beq.w	80010d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d005      	beq.n	8000e4c <HAL_GPIO_Init+0x40>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d130      	bne.n	8000eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	f003 0201 	and.w	r2, r3, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d017      	beq.n	8000eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d123      	bne.n	8000f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0203 	and.w	r2, r3, #3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80ac 	beq.w	80010d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f98:	4a59      	ldr	r2, [pc, #356]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc2:	d025      	beq.n	8001010 <HAL_GPIO_Init+0x204>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d01f      	beq.n	800100c <HAL_GPIO_Init+0x200>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d019      	beq.n	8001008 <HAL_GPIO_Init+0x1fc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_GPIO_Init+0x300>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d013      	beq.n	8001004 <HAL_GPIO_Init+0x1f8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x304>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d00d      	beq.n	8001000 <HAL_GPIO_Init+0x1f4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_GPIO_Init+0x308>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d007      	beq.n	8000ffc <HAL_GPIO_Init+0x1f0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4a      	ldr	r2, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x30c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	e00c      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	e00a      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001000:	2304      	movs	r3, #4
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x206>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_GPIO_Init+0x310>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_GPIO_Init+0x310>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_GPIO_Init+0x310>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800107e:	4a27      	ldr	r2, [pc, #156]	; (800111c <HAL_GPIO_Init+0x310>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_GPIO_Init+0x310>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_GPIO_Init+0x310>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_GPIO_Init+0x310>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_GPIO_Init+0x310>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae97 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	48001400 	.word	0x48001400
 8001118:	48001800 	.word	0x48001800
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800113c:	e002      	b.n	8001144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001156:	af00      	add	r7, sp, #0
 8001158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800115c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001160:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	f001 b83a 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 816f 	beq.w	800146a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800118c:	4bb5      	ldr	r3, [pc, #724]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001198:	4bb2      	ldr	r3, [pc, #712]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d15c      	bne.n	800125e <HAL_RCC_OscConfig+0x10e>
 80011a4:	4baf      	ldr	r3, [pc, #700]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b0:	d155      	bne.n	800125e <HAL_RCC_OscConfig+0x10e>
 80011b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x94>
 80011de:	4ba1      	ldr	r3, [pc, #644]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0xc0>
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001200:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800120c:	4b95      	ldr	r3, [pc, #596]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001214:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001218:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800121c:	fa92 f2a2 	rbit	r2, r2
 8001220:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001224:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001228:	fab2 f282 	clz	r2, r2
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f002 021f 	and.w	r2, r2, #31
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8111 	beq.w	8001468 <HAL_RCC_OscConfig+0x318>
 8001246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 8108 	bne.w	8001468 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	f000 bfc6 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001262:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x12e>
 8001270:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a7b      	ldr	r2, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e036      	b.n	80012ec <HAL_RCC_OscConfig+0x19c>
 800127e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001282:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x158>
 800128e:	4b75      	ldr	r3, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a74      	ldr	r2, [pc, #464]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a71      	ldr	r2, [pc, #452]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e021      	b.n	80012ec <HAL_RCC_OscConfig+0x19c>
 80012a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x184>
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a69      	ldr	r2, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a66      	ldr	r2, [pc, #408]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0x19c>
 80012d4:	4b63      	ldr	r3, [pc, #396]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a62      	ldr	r2, [pc, #392]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d059      	beq.n	80013b0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc70 	bl	8000be0 <HAL_GetTick>
 8001300:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fc6b 	bl	8000be0 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d902      	bls.n	800131c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	f000 bf67 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 800131c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001320:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001330:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <HAL_RCC_OscConfig+0x1fe>
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x22a>
 800134e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001352:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001366:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800136a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800137e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001382:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001386:	fa92 f2a2 	rbit	r2, r2
 800138a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800138e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f002 021f 	and.w	r2, r2, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0ab      	beq.n	8001306 <HAL_RCC_OscConfig+0x1b6>
 80013ae:	e05c      	b.n	800146a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc16 	bl	8000be0 <HAL_GetTick>
 80013b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ba:	f7ff fc11 	bl	8000be0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d902      	bls.n	80013d0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f000 bf0d 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80013d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_OscConfig+0x2b2>
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x2de>
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800141e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001432:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001436:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800143a:	fa92 f2a2 	rbit	r2, r2
 800143e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001442:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	f042 0220 	orr.w	r2, r2, #32
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f002 021f 	and.w	r2, r2, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ab      	bne.n	80013ba <HAL_RCC_OscConfig+0x26a>
 8001462:	e002      	b.n	800146a <HAL_RCC_OscConfig+0x31a>
 8001464:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 817f 	beq.w	800177e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001480:	4ba7      	ldr	r3, [pc, #668]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800148c:	4ba4      	ldr	r3, [pc, #656]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d173      	bne.n	8001580 <HAL_RCC_OscConfig+0x430>
 8001498:	4ba1      	ldr	r3, [pc, #644]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a4:	d16c      	bne.n	8001580 <HAL_RCC_OscConfig+0x430>
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x386>
 80014d0:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e013      	b.n	80014fe <HAL_RCC_OscConfig+0x3ae>
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014fa:	4b89      	ldr	r3, [pc, #548]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2202      	movs	r2, #2
 8001500:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001504:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001508:	fa92 f2a2 	rbit	r2, r2
 800150c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001510:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	f042 0220 	orr.w	r2, r2, #32
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f002 021f 	and.w	r2, r2, #31
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00a      	beq.n	8001546 <HAL_RCC_OscConfig+0x3f6>
 8001530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001534:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d002      	beq.n	8001546 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f000 be52 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001552:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	21f8      	movs	r1, #248	; 0xf8
 800155c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001564:	fa91 f1a1 	rbit	r1, r1
 8001568:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800156c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001570:	fab1 f181 	clz	r1, r1
 8001574:	b2c9      	uxtb	r1, r1
 8001576:	408b      	lsls	r3, r1
 8001578:	4969      	ldr	r1, [pc, #420]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e0fe      	b.n	800177e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001584:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8088 	beq.w	80016a2 <HAL_RCC_OscConfig+0x552>
 8001592:	2301      	movs	r3, #1
 8001594:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	461a      	mov	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb0f 	bl	8000be0 <HAL_GetTick>
 80015c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb0a 	bl	8000be0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d902      	bls.n	80015de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	f000 be06 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80015f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <HAL_RCC_OscConfig+0x4be>
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	e013      	b.n	8001636 <HAL_RCC_OscConfig+0x4e6>
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001626:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2202      	movs	r2, #2
 8001638:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800163c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001640:	fa92 f2a2 	rbit	r2, r2
 8001644:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001648:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800164c:	fab2 f282 	clz	r2, r2
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f042 0220 	orr.w	r2, r2, #32
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f002 021f 	and.w	r2, r2, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0af      	beq.n	80015c8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	21f8      	movs	r1, #248	; 0xf8
 800167e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001686:	fa91 f1a1 	rbit	r1, r1
 800168a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800168e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001692:	fab1 f181 	clz	r1, r1
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	408b      	lsls	r3, r1
 800169a:	4921      	ldr	r1, [pc, #132]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e06d      	b.n	800177e <HAL_RCC_OscConfig+0x62e>
 80016a2:	2301      	movs	r3, #1
 80016a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	461a      	mov	r2, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa87 	bl	8000be0 <HAL_GetTick>
 80016d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fa82 	bl	8000be0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d902      	bls.n	80016ee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f000 bd7e 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001700:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_RCC_OscConfig+0x5d4>
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	e016      	b.n	800174c <HAL_RCC_OscConfig+0x5fc>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800173c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001748:	4bbf      	ldr	r3, [pc, #764]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2202      	movs	r2, #2
 800174e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001752:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001756:	fa92 f2a2 	rbit	r2, r2
 800175a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800175e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001762:	fab2 f282 	clz	r2, r2
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f042 0220 	orr.w	r2, r2, #32
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	f002 021f 	and.w	r2, r2, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ac      	bne.n	80016d8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8113 	beq.w	80019ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d07c      	beq.n	800189e <HAL_RCC_OscConfig+0x74e>
 80017a4:	2301      	movs	r3, #1
 80017a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4ba2      	ldr	r3, [pc, #648]	; (8001a4c <HAL_RCC_OscConfig+0x8fc>)
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	461a      	mov	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fa07 	bl	8000be0 <HAL_GetTick>
 80017d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fa02 	bl	8000be0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d902      	bls.n	80017ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f000 bcfe 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f2a3 	rbit	r2, r3
 8001820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f2a3 	rbit	r2, r3
 8001844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001848:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800184c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b7e      	ldr	r3, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 8001850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800185a:	2102      	movs	r1, #2
 800185c:	6019      	str	r1, [r3, #0]
 800185e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f1a3 	rbit	r1, r3
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001874:	6019      	str	r1, [r3, #0]
  return result;
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d09d      	beq.n	80017d8 <HAL_RCC_OscConfig+0x688>
 800189c:	e08d      	b.n	80019ba <HAL_RCC_OscConfig+0x86a>
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018c0:	601a      	str	r2, [r3, #0]
  return result;
 80018c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_RCC_OscConfig+0x8fc>)
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff f97e 	bl	8000be0 <HAL_GetTick>
 80018e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff f979 	bl	8000be0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d902      	bls.n	8001900 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	f000 bc75 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001908:	2202      	movs	r2, #2
 800190a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001950:	2202      	movs	r2, #2
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001958:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800196a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 800196e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001974:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001978:	2102      	movs	r1, #2
 800197a:	6019      	str	r1, [r3, #0]
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f1a3 	rbit	r1, r3
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001992:	6019      	str	r1, [r3, #0]
  return result;
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d197      	bne.n	80018ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 81a5 	beq.w	8001d1a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a08:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_RCC_OscConfig+0x900>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x900>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x900>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a28:	f7ff f8da 	bl	8000be0 <HAL_GetTick>
 8001a2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e010      	b.n	8001a54 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff f8d5 	bl	8000be0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e3d1      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	10908120 	.word	0x10908120
 8001a50:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <HAL_RCC_OscConfig+0xb3c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0e8      	beq.n	8001a32 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x92e>
 8001a70:	4b87      	ldr	r3, [pc, #540]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a86      	ldr	r2, [pc, #536]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e035      	b.n	8001aea <HAL_RCC_OscConfig+0x99a>
 8001a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x958>
 8001a8e:	4b80      	ldr	r3, [pc, #512]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a7f      	ldr	r2, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a7c      	ldr	r2, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e020      	b.n	8001aea <HAL_RCC_OscConfig+0x99a>
 8001aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x982>
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a74      	ldr	r2, [pc, #464]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a71      	ldr	r2, [pc, #452]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e00b      	b.n	8001aea <HAL_RCC_OscConfig+0x99a>
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a6b      	ldr	r2, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8081 	beq.w	8001bfe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff f870 	bl	8000be0 <HAL_GetTick>
 8001b00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f86b 	bl	8000be0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e365      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b64:	601a      	str	r2, [r3, #0]
  return result;
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0xa3a>
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	e013      	b.n	8001bb2 <HAL_RCC_OscConfig+0xa62>
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bba:	2102      	movs	r1, #2
 8001bbc:	6011      	str	r1, [r2, #0]
 8001bbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	fa92 f1a2 	rbit	r1, r2
 8001bcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bd4:	6011      	str	r1, [r2, #0]
  return result;
 8001bd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bda:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d084      	beq.n	8001b06 <HAL_RCC_OscConfig+0x9b6>
 8001bfc:	e083      	b.n	8001d06 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe ffef 	bl	8000be0 <HAL_GetTick>
 8001c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7fe ffea 	bl	8000be0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2e4      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_OscConfig+0xb44>
 8001c86:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	e017      	b.n	8001cbc <HAL_RCC_OscConfig+0xb6c>
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4bb3      	ldr	r3, [pc, #716]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	6011      	str	r1, [r2, #0]
 8001cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ccc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fa92 f1a2 	rbit	r1, r2
 8001cd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cda:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cde:	6011      	str	r1, [r2, #0]
  return result;
 8001ce0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ce4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d180      	bne.n	8001c08 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d06:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0e:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a9d      	ldr	r2, [pc, #628]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 825e 	beq.w	80021e8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	4b96      	ldr	r3, [pc, #600]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f000 821f 	beq.w	8002178 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 8170 	bne.w	800202c <HAL_RCC_OscConfig+0xedc>
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d70:	601a      	str	r2, [r3, #0]
  return result;
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d7a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2300      	movs	r3, #0
 8001d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe ff25 	bl	8000be0 <HAL_GetTick>
 8001d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe ff20 	bl	8000be0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e21c      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dd4:	601a      	str	r2, [r3, #0]
  return result;
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0xcaa>
 8001df4:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_OscConfig+0xcfa>
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e32:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e4e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e56:	6011      	str	r1, [r2, #0]
 8001e58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e5c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	fa92 f1a2 	rbit	r1, r2
 8001e66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e6e:	6011      	str	r1, [r2, #0]
  return result;
 8001e70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e74:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d182      	bne.n	8001d9c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f023 020f 	bic.w	r2, r3, #15
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a19      	ldr	r1, [r3, #32]
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	492d      	ldr	r1, [pc, #180]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fe5f 	bl	8000be0 <HAL_GetTick>
 8001f22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f26:	e009      	b.n	8001f3c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe fe5a 	bl	8000be0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e156      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f60:	601a      	str	r2, [r3, #0]
  return result;
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe3c>
 8001f80:	4b01      	ldr	r3, [pc, #4]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e02a      	b.n	8001fdc <HAL_RCC_OscConfig+0xe8c>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b86      	ldr	r3, [pc, #536]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe8:	6011      	str	r1, [r2, #0]
 8001fea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	fa92 f1a2 	rbit	r1, r2
 8001ff8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002000:	6011      	str	r1, [r2, #0]
  return result;
 8002002:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002006:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	f43f af7f 	beq.w	8001f28 <HAL_RCC_OscConfig+0xdd8>
 800202a:	e0dd      	b.n	80021e8 <HAL_RCC_OscConfig+0x1098>
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002050:	601a      	str	r2, [r3, #0]
  return result;
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800205a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002066:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461a      	mov	r2, r3
 800206e:	2300      	movs	r3, #0
 8002070:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fdb5 	bl	8000be0 <HAL_GetTick>
 8002076:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e009      	b.n	8002090 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe fdb0 	bl	8000be0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0ac      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8002090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002094:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020b4:	601a      	str	r2, [r3, #0]
  return result;
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <HAL_RCC_OscConfig+0xf8a>
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e027      	b.n	800212a <HAL_RCC_OscConfig+0xfda>
 80020da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002132:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002136:	6011      	str	r1, [r2, #0]
 8002138:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	fa92 f1a2 	rbit	r1, r2
 8002146:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800214e:	6011      	str	r1, [r2, #0]
  return result;
 8002150:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002154:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d182      	bne.n	800207c <HAL_RCC_OscConfig+0xf2c>
 8002176:	e037      	b.n	80021e8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e02e      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800219c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021a0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d117      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b09e      	sub	sp, #120	; 0x78
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e162      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b90      	ldr	r3, [pc, #576]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d910      	bls.n	8002240 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b8d      	ldr	r3, [pc, #564]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	498b      	ldr	r1, [pc, #556]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b89      	ldr	r3, [pc, #548]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e14a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	497f      	ldr	r1, [pc, #508]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80dc 	beq.w	8002424 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d13c      	bne.n	80022ee <HAL_RCC_ClockConfig+0xf6>
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_RCC_ClockConfig+0xa6>
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e00f      	b.n	80022be <HAL_RCC_ClockConfig+0xc6>
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	667b      	str	r3, [r7, #100]	; 0x64
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
 80022b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80022c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d17b      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0f3      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d13c      	bne.n	8002370 <HAL_RCC_ClockConfig+0x178>
 80022f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_RCC_ClockConfig+0x128>
 800231a:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e00f      	b.n	8002340 <HAL_RCC_ClockConfig+0x148>
 8002320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
 800232e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002332:	643b      	str	r3, [r7, #64]	; 0x40
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002344:	63ba      	str	r2, [r7, #56]	; 0x38
 8002346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800234e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d13a      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b2      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
 8002370:	2302      	movs	r3, #2
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1a0>
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	e00d      	b.n	80023b4 <HAL_RCC_ClockConfig+0x1bc>
 8002398:	2302      	movs	r3, #2
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2202      	movs	r2, #2
 80023b6:	61ba      	str	r2, [r7, #24]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	617a      	str	r2, [r7, #20]
  return result;
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e079      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	491a      	ldr	r1, [pc, #104]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fbf4 	bl	8000be0 <HAL_GetTick>
 80023f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fbf0 	bl	8000be0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e061      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d214      	bcs.n	800245c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e040      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
 8002454:	40022000 	.word	0x40022000
 8002458:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	491a      	ldr	r1, [pc, #104]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4912      	ldr	r1, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800249a:	f000 f829 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 800249e:	4601      	mov	r1, r0
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a8:	22f0      	movs	r2, #240	; 0xf0
 80024aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	60fa      	str	r2, [r7, #12]
  return result;
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	40d3      	lsrs	r3, r2
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x2ec>)
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	fa21 f303 	lsr.w	r3, r1, r3
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x2f0>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_RCC_ClockConfig+0x2f4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fb42 	bl	8000b58 <HAL_InitTick>
  
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3778      	adds	r7, #120	; 0x78
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08004144 	.word	0x08004144
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b08b      	sub	sp, #44	; 0x2c
 80024f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x30>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x36>
 800251e:	e03f      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002522:	623b      	str	r3, [r7, #32]
      break;
 8002524:	e03f      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800252c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002530:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	607a      	str	r2, [r7, #4]
  return result;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	40d3      	lsrs	r3, r2
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	220f      	movs	r2, #15
 8002554:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	fa92 f2a2 	rbit	r2, r2
 800255c:	60fa      	str	r2, [r7, #12]
  return result;
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	40d3      	lsrs	r3, r2
 8002568:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	e007      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	623b      	str	r3, [r7, #32]
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a2:	623b      	str	r3, [r7, #32]
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	372c      	adds	r7, #44	; 0x2c
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	0800415c 	.word	0x0800415c
 80025c0:	0800416c 	.word	0x0800416c

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025e2:	f7ff ffef 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e6:	4601      	mov	r1, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	fa92 f2a2 	rbit	r2, r2
 80025fc:	603a      	str	r2, [r7, #0]
  return result;
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	fab2 f282 	clz	r2, r2
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	40d3      	lsrs	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x40>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08004154 	.word	0x08004154

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002626:	f7ff ffcd 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002634:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002638:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	fa92 f2a2 	rbit	r2, r2
 8002640:	603a      	str	r2, [r7, #0]
  return result;
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	fab2 f282 	clz	r2, r2
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	40d3      	lsrs	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x40>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08004154 	.word	0x08004154

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b092      	sub	sp, #72	; 0x48
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80d4 	beq.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002688:	4b4e      	ldr	r3, [pc, #312]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10e      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a4a      	ldr	r2, [pc, #296]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	61d3      	str	r3, [r2, #28]
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fa89 	bl	8000be0 <HAL_GetTick>
 80026ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe fa85 	bl	8000be0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1d6      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8084 	beq.w	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270c:	429a      	cmp	r2, r3
 800270e:	d07c      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	2301      	movs	r3, #1
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	2300      	movs	r3, #0
 8002760:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d04b      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fa35 	bl	8000be0 <HAL_GetTick>
 8002776:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fa31 	bl	8000be0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e180      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	2302      	movs	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	61fb      	str	r3, [r7, #28]
  return result;
 80027a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d108      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027be:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	e00d      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	10908100 	.word	0x10908100
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	4b9a      	ldr	r3, [pc, #616]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2202      	movs	r2, #2
 80027e2:	613a      	str	r2, [r7, #16]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	60fa      	str	r2, [r7, #12]
  return result;
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0b7      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800280a:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	498c      	ldr	r1, [pc, #560]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800281c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a87      	ldr	r2, [pc, #540]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283c:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f023 0203 	bic.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	497f      	ldr	r1, [pc, #508]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800285a:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4978      	ldr	r1, [pc, #480]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002878:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4970      	ldr	r1, [pc, #448]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f023 0210 	bic.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4969      	ldr	r1, [pc, #420]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028b4:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	4961      	ldr	r1, [pc, #388]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d2:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f023 0220 	bic.w	r2, r3, #32
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	495a      	ldr	r1, [pc, #360]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	4952      	ldr	r1, [pc, #328]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800290e:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	494b      	ldr	r1, [pc, #300]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4943      	ldr	r1, [pc, #268]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	493c      	ldr	r1, [pc, #240]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	4934      	ldr	r1, [pc, #208]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	492d      	ldr	r1, [pc, #180]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	491e      	ldr	r1, [pc, #120]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	490f      	ldr	r1, [pc, #60]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	4913      	ldr	r1, [pc, #76]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	490b      	ldr	r1, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3748      	adds	r7, #72	; 0x48
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e09d      	b.n	8002bee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d108      	bne.n	8002acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac2:	d009      	beq.n	8002ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
 8002aca:	e005      	b.n	8002ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fd fea8 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b18:	d902      	bls.n	8002b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e002      	b.n	8002b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b2e:	d007      	beq.n	8002b40 <HAL_SPI_Init+0xa0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	ea42 0103 	orr.w	r1, r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0204 	and.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_SPI_Transmit+0x22>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e158      	b.n	8002eca <HAL_SPI_Transmit+0x2d4>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c20:	f7fd ffde 	bl	8000be0 <HAL_GetTick>
 8002c24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d002      	beq.n	8002c3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
 8002c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c3a:	e13d      	b.n	8002eb8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Transmit+0x52>
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c4c:	e134      	b.n	8002eb8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c98:	d10f      	bne.n	8002cba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d007      	beq.n	8002cd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ce0:	d94b      	bls.n	8002d7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0xfa>
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d13e      	bne.n	8002d6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d14:	e02b      	b.n	8002d6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d112      	bne.n	8002d4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d48:	e011      	b.n	8002d6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4a:	f7fd ff49 	bl	8000be0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d803      	bhi.n	8002d62 <HAL_SPI_Transmit+0x16c>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d102      	bne.n	8002d68 <HAL_SPI_Transmit+0x172>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d6c:	e0a4      	b.n	8002eb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ce      	bne.n	8002d16 <HAL_SPI_Transmit+0x120>
 8002d78:	e07c      	b.n	8002e74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_Transmit+0x192>
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d170      	bne.n	8002e6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d912      	bls.n	8002db8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	1c9a      	adds	r2, r3, #2
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b02      	subs	r3, #2
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002db6:	e058      	b.n	8002e6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002dde:	e044      	b.n	8002e6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d12b      	bne.n	8002e46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d912      	bls.n	8002e1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	881a      	ldrh	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b02      	subs	r3, #2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e1c:	e025      	b.n	8002e6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e44:	e011      	b.n	8002e6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e46:	f7fd fecb 	bl	8000be0 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d803      	bhi.n	8002e5e <HAL_SPI_Transmit+0x268>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Transmit+0x26e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e68:	e026      	b.n	8002eb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1b5      	bne.n	8002de0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb5b 	bl	8003534 <SPI_EndRxTxTransaction>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e000      	b.n	8002eb8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002eb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x26>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e1fb      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x41e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f00:	f7fd fe6e 	bl	8000be0 <HAL_GetTick>
 8002f04:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f0c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f1c:	7efb      	ldrb	r3, [r7, #27]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d00e      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x6e>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f28:	d106      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x66>
 8002f32:	7efb      	ldrb	r3, [r7, #27]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d003      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f3e:	e1cd      	b.n	80032dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x80>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x80>
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f58:	e1c0      	b.n	80032dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	887a      	ldrh	r2, [r7, #2]
 8002f7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	887a      	ldrh	r2, [r7, #2]
 8002f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	887a      	ldrh	r2, [r7, #2]
 8002f9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb0:	d802      	bhi.n	8002fb8 <HAL_SPI_TransmitReceive+0xe6>
 8002fb2:	8a3b      	ldrh	r3, [r7, #16]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d908      	bls.n	8002fca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	e007      	b.n	8002fda <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fd8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d007      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003000:	d97c      	bls.n	80030fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x13e>
 800300a:	8a7b      	ldrh	r3, [r7, #18]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d169      	bne.n	80030e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	1c9a      	adds	r2, r3, #2
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003034:	e056      	b.n	80030e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d11b      	bne.n	800307c <HAL_SPI_TransmitReceive+0x1aa>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_SPI_TransmitReceive+0x1aa>
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2b01      	cmp	r3, #1
 8003052:	d113      	bne.n	800307c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	1c9a      	adds	r2, r3, #2
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d11c      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x1f2>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	b292      	uxth	r2, r2
 80030a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030c4:	f7fd fd8c 	bl	8000be0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d807      	bhi.n	80030e4 <HAL_SPI_TransmitReceive+0x212>
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d003      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030e2:	e0fb      	b.n	80032dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1a3      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x164>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d19d      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x164>
 80030fa:	e0df      	b.n	80032bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_SPI_TransmitReceive+0x23a>
 8003104:	8a7b      	ldrh	r3, [r7, #18]
 8003106:	2b01      	cmp	r3, #1
 8003108:	f040 80cb 	bne.w	80032a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d912      	bls.n	800313c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b02      	subs	r3, #2
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800313a:	e0b2      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003162:	e09e      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d134      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x30a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02f      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x30a>
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	2b01      	cmp	r3, #1
 8003180:	d12c      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d912      	bls.n	80031b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b02      	subs	r3, #2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031b0:	e012      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d148      	bne.n	800327c <HAL_SPI_TransmitReceive+0x3aa>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d042      	beq.n	800327c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d923      	bls.n	800324a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	b292      	uxth	r2, r2
 800320e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b02      	subs	r3, #2
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d81f      	bhi.n	8003278 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	e016      	b.n	8003278 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f103 020c 	add.w	r2, r3, #12
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800327c:	f7fd fcb0 	bl	8000be0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003288:	429a      	cmp	r2, r3
 800328a:	d803      	bhi.n	8003294 <HAL_SPI_TransmitReceive+0x3c2>
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d102      	bne.n	800329a <HAL_SPI_TransmitReceive+0x3c8>
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032a0:	e01c      	b.n	80032dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f47f af5b 	bne.w	8003164 <HAL_SPI_TransmitReceive+0x292>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f af54 	bne.w	8003164 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f937 	bl	8003534 <SPI_EndRxTxTransaction>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60
 80032d8:	e000      	b.n	80032dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80032da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003308:	f7fd fc6a 	bl	8000be0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4413      	add	r3, r2
 8003316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003318:	f7fd fc62 	bl	8000be0 <HAL_GetTick>
 800331c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	0d1b      	lsrs	r3, r3, #20
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332e:	e054      	b.n	80033da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d050      	beq.n	80033da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003338:	f7fd fc52 	bl	8000be0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13d      	bne.n	80033ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800335c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003366:	d111      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003370:	d004      	beq.n	800337c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d107      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003394:	d10f      	bne.n	80033b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e017      	b.n	80033fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d19b      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000000 	.word	0x20000000

08003408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800341a:	f7fd fbe1 	bl	8000be0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800342a:	f7fd fbd9 	bl	8000be0 <HAL_GetTick>
 800342e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00da      	lsls	r2, r3, #3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	0d1b      	lsrs	r3, r3, #20
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003450:	e060      	b.n	8003514 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003458:	d107      	bne.n	800346a <SPI_WaitFifoStateUntilTimeout+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003468:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d050      	beq.n	8003514 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003472:	f7fd fbb5 	bl	8000be0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	429a      	cmp	r2, r3
 8003480:	d902      	bls.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13d      	bne.n	8003504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a0:	d111      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034aa:	d004      	beq.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d107      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d10f      	bne.n	80034f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e010      	b.n	8003526 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3b01      	subs	r3, #1
 8003512:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d196      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3728      	adds	r7, #40	; 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000000 	.word	0x20000000

08003534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff ff5b 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e027      	b.n	80035b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2200      	movs	r2, #0
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff fec0 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e014      	b.n	80035b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff34 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e000      	b.n	80035b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e040      	b.n	8003654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd f992 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8c0 	bl	8003784 <UART_SetConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e022      	b.n	8003654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa8a 	bl	8003b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb11 	bl	8003c74 <UART_CheckIdleState>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003670:	2b20      	cmp	r3, #32
 8003672:	f040 8082 	bne.w	800377a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit+0x26>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07a      	b.n	800377c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x38>
 8003690:	2302      	movs	r3, #2
 8003692:	e073      	b.n	800377c <HAL_UART_Transmit+0x120>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2221      	movs	r2, #33	; 0x21
 80036a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036aa:	f7fd fa99 	bl	8000be0 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d108      	bne.n	80036dc <HAL_UART_Transmit+0x80>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	e003      	b.n	80036e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036ec:	e02d      	b.n	800374a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb04 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e039      	b.n	800377c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371a:	b292      	uxth	r2, r2
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3302      	adds	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e008      	b.n	8003738 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b292      	uxth	r2, r2
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1cb      	bne.n	80036ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	; 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fad0 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e005      	b.n	800377c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <UART_SetConfig+0x274>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	6979      	ldr	r1, [r7, #20]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a80      	ldr	r2, [pc, #512]	; (80039fc <UART_SetConfig+0x278>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d120      	bne.n	8003842 <UART_SetConfig+0xbe>
 8003800:	4b7f      	ldr	r3, [pc, #508]	; (8003a00 <UART_SetConfig+0x27c>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b03      	cmp	r3, #3
 800380a:	d817      	bhi.n	800383c <UART_SetConfig+0xb8>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x90>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003825 	.word	0x08003825
 8003818:	08003831 	.word	0x08003831
 800381c:	08003837 	.word	0x08003837
 8003820:	0800382b 	.word	0x0800382b
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e0b5      	b.n	8003996 <UART_SetConfig+0x212>
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e0b2      	b.n	8003996 <UART_SetConfig+0x212>
 8003830:	2304      	movs	r3, #4
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e0af      	b.n	8003996 <UART_SetConfig+0x212>
 8003836:	2308      	movs	r3, #8
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e0ac      	b.n	8003996 <UART_SetConfig+0x212>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e0a9      	b.n	8003996 <UART_SetConfig+0x212>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6f      	ldr	r2, [pc, #444]	; (8003a04 <UART_SetConfig+0x280>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d124      	bne.n	8003896 <UART_SetConfig+0x112>
 800384c:	4b6c      	ldr	r3, [pc, #432]	; (8003a00 <UART_SetConfig+0x27c>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003854:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003858:	d011      	beq.n	800387e <UART_SetConfig+0xfa>
 800385a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385e:	d817      	bhi.n	8003890 <UART_SetConfig+0x10c>
 8003860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003864:	d011      	beq.n	800388a <UART_SetConfig+0x106>
 8003866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386a:	d811      	bhi.n	8003890 <UART_SetConfig+0x10c>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <UART_SetConfig+0xf4>
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d006      	beq.n	8003884 <UART_SetConfig+0x100>
 8003876:	e00b      	b.n	8003890 <UART_SetConfig+0x10c>
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e08b      	b.n	8003996 <UART_SetConfig+0x212>
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e088      	b.n	8003996 <UART_SetConfig+0x212>
 8003884:	2304      	movs	r3, #4
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e085      	b.n	8003996 <UART_SetConfig+0x212>
 800388a:	2308      	movs	r3, #8
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e082      	b.n	8003996 <UART_SetConfig+0x212>
 8003890:	2310      	movs	r3, #16
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e07f      	b.n	8003996 <UART_SetConfig+0x212>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <UART_SetConfig+0x284>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d124      	bne.n	80038ea <UART_SetConfig+0x166>
 80038a0:	4b57      	ldr	r3, [pc, #348]	; (8003a00 <UART_SetConfig+0x27c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038ac:	d011      	beq.n	80038d2 <UART_SetConfig+0x14e>
 80038ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038b2:	d817      	bhi.n	80038e4 <UART_SetConfig+0x160>
 80038b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038b8:	d011      	beq.n	80038de <UART_SetConfig+0x15a>
 80038ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038be:	d811      	bhi.n	80038e4 <UART_SetConfig+0x160>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0x148>
 80038c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x154>
 80038ca:	e00b      	b.n	80038e4 <UART_SetConfig+0x160>
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e061      	b.n	8003996 <UART_SetConfig+0x212>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e05e      	b.n	8003996 <UART_SetConfig+0x212>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e05b      	b.n	8003996 <UART_SetConfig+0x212>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e058      	b.n	8003996 <UART_SetConfig+0x212>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e055      	b.n	8003996 <UART_SetConfig+0x212>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a47      	ldr	r2, [pc, #284]	; (8003a0c <UART_SetConfig+0x288>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d124      	bne.n	800393e <UART_SetConfig+0x1ba>
 80038f4:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <UART_SetConfig+0x27c>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80038fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003900:	d011      	beq.n	8003926 <UART_SetConfig+0x1a2>
 8003902:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003906:	d817      	bhi.n	8003938 <UART_SetConfig+0x1b4>
 8003908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800390c:	d011      	beq.n	8003932 <UART_SetConfig+0x1ae>
 800390e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003912:	d811      	bhi.n	8003938 <UART_SetConfig+0x1b4>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <UART_SetConfig+0x19c>
 8003918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391c:	d006      	beq.n	800392c <UART_SetConfig+0x1a8>
 800391e:	e00b      	b.n	8003938 <UART_SetConfig+0x1b4>
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e037      	b.n	8003996 <UART_SetConfig+0x212>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e034      	b.n	8003996 <UART_SetConfig+0x212>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e031      	b.n	8003996 <UART_SetConfig+0x212>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e02e      	b.n	8003996 <UART_SetConfig+0x212>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e02b      	b.n	8003996 <UART_SetConfig+0x212>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a33      	ldr	r2, [pc, #204]	; (8003a10 <UART_SetConfig+0x28c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d124      	bne.n	8003992 <UART_SetConfig+0x20e>
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <UART_SetConfig+0x27c>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003950:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003954:	d011      	beq.n	800397a <UART_SetConfig+0x1f6>
 8003956:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800395a:	d817      	bhi.n	800398c <UART_SetConfig+0x208>
 800395c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003960:	d011      	beq.n	8003986 <UART_SetConfig+0x202>
 8003962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003966:	d811      	bhi.n	800398c <UART_SetConfig+0x208>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <UART_SetConfig+0x1f0>
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003970:	d006      	beq.n	8003980 <UART_SetConfig+0x1fc>
 8003972:	e00b      	b.n	800398c <UART_SetConfig+0x208>
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e00d      	b.n	8003996 <UART_SetConfig+0x212>
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e00a      	b.n	8003996 <UART_SetConfig+0x212>
 8003980:	2304      	movs	r3, #4
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e007      	b.n	8003996 <UART_SetConfig+0x212>
 8003986:	2308      	movs	r3, #8
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e004      	b.n	8003996 <UART_SetConfig+0x212>
 800398c:	2310      	movs	r3, #16
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e001      	b.n	8003996 <UART_SetConfig+0x212>
 8003992:	2310      	movs	r3, #16
 8003994:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d16c      	bne.n	8003a7a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d838      	bhi.n	8003a18 <UART_SetConfig+0x294>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x228>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	080039e7 	.word	0x080039e7
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003a19 	.word	0x08003a19
 80039cc:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fe04 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 80039d4:	61b8      	str	r0, [r7, #24]
        break;
 80039d6:	e024      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7fe fe22 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 80039dc:	61b8      	str	r0, [r7, #24]
        break;
 80039de:	e020      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <UART_SetConfig+0x290>)
 80039e2:	61bb      	str	r3, [r7, #24]
        break;
 80039e4:	e01d      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe fd83 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80039ea:	61b8      	str	r0, [r7, #24]
        break;
 80039ec:	e019      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e015      	b.n	8003a22 <UART_SetConfig+0x29e>
 80039f6:	bf00      	nop
 80039f8:	efff69f3 	.word	0xefff69f3
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40004400 	.word	0x40004400
 8003a08:	40004800 	.word	0x40004800
 8003a0c:	40004c00 	.word	0x40004c00
 8003a10:	40005000 	.word	0x40005000
 8003a14:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	77bb      	strb	r3, [r7, #30]
        break;
 8003a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d075      	beq.n	8003b14 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	005a      	lsls	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	441a      	add	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d916      	bls.n	8003a74 <UART_SetConfig+0x2f0>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d212      	bcs.n	8003a74 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f023 030f 	bic.w	r3, r3, #15
 8003a56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	89fa      	ldrh	r2, [r7, #14]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	e04f      	b.n	8003b14 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	77bb      	strb	r3, [r7, #30]
 8003a78:	e04c      	b.n	8003b14 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d828      	bhi.n	8003ad2 <UART_SetConfig+0x34e>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <UART_SetConfig+0x304>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003ac3 	.word	0x08003ac3
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ad3 	.word	0x08003ad3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe fd96 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003ab0:	61b8      	str	r0, [r7, #24]
        break;
 8003ab2:	e013      	b.n	8003adc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fdb4 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	61b8      	str	r0, [r7, #24]
        break;
 8003aba:	e00f      	b.n	8003adc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <UART_SetConfig+0x3a8>)
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e00c      	b.n	8003adc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe fd15 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8003ac6:	61b8      	str	r0, [r7, #24]
        break;
 8003ac8:	e008      	b.n	8003adc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e004      	b.n	8003adc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8003ada:	bf00      	nop
    }

    if (pclk != 0U)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085a      	lsrs	r2, r3, #1
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d908      	bls.n	8003b10 <UART_SetConfig+0x38c>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d204      	bcs.n	8003b10 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	e001      	b.n	8003b14 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	007a1200 	.word	0x007a1200

08003b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d10a      	bne.n	8003c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c84:	f7fc ffac 	bl	8000be0 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d10e      	bne.n	8003cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f82d 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e023      	b.n	8003cfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d10e      	bne.n	8003ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f817 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00d      	b.n	8003cfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b09c      	sub	sp, #112	; 0x70
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	e0a5      	b.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	f000 80a1 	beq.w	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fc ff5d 	bl	8000be0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d13e      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e6      	bne.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	663b      	str	r3, [r7, #96]	; 0x60
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e067      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04f      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d147      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ddc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e6      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e30:	623a      	str	r2, [r7, #32]
 8003e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	69f9      	ldr	r1, [r7, #28]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e010      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	f43f af4a 	beq.w	8003d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3770      	adds	r7, #112	; 0x70
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <calloc>:
 8003e90:	4b02      	ldr	r3, [pc, #8]	; (8003e9c <calloc+0xc>)
 8003e92:	460a      	mov	r2, r1
 8003e94:	4601      	mov	r1, r0
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	f000 b842 	b.w	8003f20 <_calloc_r>
 8003e9c:	2000000c 	.word	0x2000000c

08003ea0 <__errno>:
 8003ea0:	4b01      	ldr	r3, [pc, #4]	; (8003ea8 <__errno+0x8>)
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <__libc_init_array>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	4d0d      	ldr	r5, [pc, #52]	; (8003ee4 <__libc_init_array+0x38>)
 8003eb0:	4c0d      	ldr	r4, [pc, #52]	; (8003ee8 <__libc_init_array+0x3c>)
 8003eb2:	1b64      	subs	r4, r4, r5
 8003eb4:	10a4      	asrs	r4, r4, #2
 8003eb6:	2600      	movs	r6, #0
 8003eb8:	42a6      	cmp	r6, r4
 8003eba:	d109      	bne.n	8003ed0 <__libc_init_array+0x24>
 8003ebc:	4d0b      	ldr	r5, [pc, #44]	; (8003eec <__libc_init_array+0x40>)
 8003ebe:	4c0c      	ldr	r4, [pc, #48]	; (8003ef0 <__libc_init_array+0x44>)
 8003ec0:	f000 f8f6 	bl	80040b0 <_init>
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	2600      	movs	r6, #0
 8003eca:	42a6      	cmp	r6, r4
 8003ecc:	d105      	bne.n	8003eda <__libc_init_array+0x2e>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed4:	4798      	blx	r3
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7ee      	b.n	8003eb8 <__libc_init_array+0xc>
 8003eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ede:	4798      	blx	r3
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	e7f2      	b.n	8003eca <__libc_init_array+0x1e>
 8003ee4:	0800417c 	.word	0x0800417c
 8003ee8:	0800417c 	.word	0x0800417c
 8003eec:	0800417c 	.word	0x0800417c
 8003ef0:	08004180 	.word	0x08004180

08003ef4 <memcpy>:
 8003ef4:	440a      	add	r2, r1
 8003ef6:	4291      	cmp	r1, r2
 8003ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003efc:	d100      	bne.n	8003f00 <memcpy+0xc>
 8003efe:	4770      	bx	lr
 8003f00:	b510      	push	{r4, lr}
 8003f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f0a:	4291      	cmp	r1, r2
 8003f0c:	d1f9      	bne.n	8003f02 <memcpy+0xe>
 8003f0e:	bd10      	pop	{r4, pc}

08003f10 <memset>:
 8003f10:	4402      	add	r2, r0
 8003f12:	4603      	mov	r3, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <_calloc_r>:
 8003f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f22:	fba1 2402 	umull	r2, r4, r1, r2
 8003f26:	b94c      	cbnz	r4, 8003f3c <_calloc_r+0x1c>
 8003f28:	4611      	mov	r1, r2
 8003f2a:	9201      	str	r2, [sp, #4]
 8003f2c:	f000 f82e 	bl	8003f8c <_malloc_r>
 8003f30:	9a01      	ldr	r2, [sp, #4]
 8003f32:	4605      	mov	r5, r0
 8003f34:	b930      	cbnz	r0, 8003f44 <_calloc_r+0x24>
 8003f36:	4628      	mov	r0, r5
 8003f38:	b003      	add	sp, #12
 8003f3a:	bd30      	pop	{r4, r5, pc}
 8003f3c:	220c      	movs	r2, #12
 8003f3e:	6002      	str	r2, [r0, #0]
 8003f40:	2500      	movs	r5, #0
 8003f42:	e7f8      	b.n	8003f36 <_calloc_r+0x16>
 8003f44:	4621      	mov	r1, r4
 8003f46:	f7ff ffe3 	bl	8003f10 <memset>
 8003f4a:	e7f4      	b.n	8003f36 <_calloc_r+0x16>

08003f4c <sbrk_aligned>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4e0e      	ldr	r6, [pc, #56]	; (8003f88 <sbrk_aligned+0x3c>)
 8003f50:	460c      	mov	r4, r1
 8003f52:	6831      	ldr	r1, [r6, #0]
 8003f54:	4605      	mov	r5, r0
 8003f56:	b911      	cbnz	r1, 8003f5e <sbrk_aligned+0x12>
 8003f58:	f000 f88c 	bl	8004074 <_sbrk_r>
 8003f5c:	6030      	str	r0, [r6, #0]
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 f887 	bl	8004074 <_sbrk_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	d00a      	beq.n	8003f80 <sbrk_aligned+0x34>
 8003f6a:	1cc4      	adds	r4, r0, #3
 8003f6c:	f024 0403 	bic.w	r4, r4, #3
 8003f70:	42a0      	cmp	r0, r4
 8003f72:	d007      	beq.n	8003f84 <sbrk_aligned+0x38>
 8003f74:	1a21      	subs	r1, r4, r0
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 f87c 	bl	8004074 <_sbrk_r>
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d101      	bne.n	8003f84 <sbrk_aligned+0x38>
 8003f80:	f04f 34ff 	mov.w	r4, #4294967295
 8003f84:	4620      	mov	r0, r4
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	20000218 	.word	0x20000218

08003f8c <_malloc_r>:
 8003f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f90:	1ccd      	adds	r5, r1, #3
 8003f92:	f025 0503 	bic.w	r5, r5, #3
 8003f96:	3508      	adds	r5, #8
 8003f98:	2d0c      	cmp	r5, #12
 8003f9a:	bf38      	it	cc
 8003f9c:	250c      	movcc	r5, #12
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	db01      	blt.n	8003fa8 <_malloc_r+0x1c>
 8003fa4:	42a9      	cmp	r1, r5
 8003fa6:	d905      	bls.n	8003fb4 <_malloc_r+0x28>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	2600      	movs	r6, #0
 8003fae:	4630      	mov	r0, r6
 8003fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb4:	4e2e      	ldr	r6, [pc, #184]	; (8004070 <_malloc_r+0xe4>)
 8003fb6:	f000 f86d 	bl	8004094 <__malloc_lock>
 8003fba:	6833      	ldr	r3, [r6, #0]
 8003fbc:	461c      	mov	r4, r3
 8003fbe:	bb34      	cbnz	r4, 800400e <_malloc_r+0x82>
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f7ff ffc2 	bl	8003f4c <sbrk_aligned>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	4604      	mov	r4, r0
 8003fcc:	d14d      	bne.n	800406a <_malloc_r+0xde>
 8003fce:	6834      	ldr	r4, [r6, #0]
 8003fd0:	4626      	mov	r6, r4
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	d140      	bne.n	8004058 <_malloc_r+0xcc>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4638      	mov	r0, r7
 8003fdc:	eb04 0803 	add.w	r8, r4, r3
 8003fe0:	f000 f848 	bl	8004074 <_sbrk_r>
 8003fe4:	4580      	cmp	r8, r0
 8003fe6:	d13a      	bne.n	800405e <_malloc_r+0xd2>
 8003fe8:	6821      	ldr	r1, [r4, #0]
 8003fea:	3503      	adds	r5, #3
 8003fec:	1a6d      	subs	r5, r5, r1
 8003fee:	f025 0503 	bic.w	r5, r5, #3
 8003ff2:	3508      	adds	r5, #8
 8003ff4:	2d0c      	cmp	r5, #12
 8003ff6:	bf38      	it	cc
 8003ff8:	250c      	movcc	r5, #12
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f7ff ffa5 	bl	8003f4c <sbrk_aligned>
 8004002:	3001      	adds	r0, #1
 8004004:	d02b      	beq.n	800405e <_malloc_r+0xd2>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	442b      	add	r3, r5
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	e00e      	b.n	800402c <_malloc_r+0xa0>
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	1b52      	subs	r2, r2, r5
 8004012:	d41e      	bmi.n	8004052 <_malloc_r+0xc6>
 8004014:	2a0b      	cmp	r2, #11
 8004016:	d916      	bls.n	8004046 <_malloc_r+0xba>
 8004018:	1961      	adds	r1, r4, r5
 800401a:	42a3      	cmp	r3, r4
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	bf18      	it	ne
 8004020:	6059      	strne	r1, [r3, #4]
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	bf08      	it	eq
 8004026:	6031      	streq	r1, [r6, #0]
 8004028:	5162      	str	r2, [r4, r5]
 800402a:	604b      	str	r3, [r1, #4]
 800402c:	4638      	mov	r0, r7
 800402e:	f104 060b 	add.w	r6, r4, #11
 8004032:	f000 f835 	bl	80040a0 <__malloc_unlock>
 8004036:	f026 0607 	bic.w	r6, r6, #7
 800403a:	1d23      	adds	r3, r4, #4
 800403c:	1af2      	subs	r2, r6, r3
 800403e:	d0b6      	beq.n	8003fae <_malloc_r+0x22>
 8004040:	1b9b      	subs	r3, r3, r6
 8004042:	50a3      	str	r3, [r4, r2]
 8004044:	e7b3      	b.n	8003fae <_malloc_r+0x22>
 8004046:	6862      	ldr	r2, [r4, #4]
 8004048:	42a3      	cmp	r3, r4
 800404a:	bf0c      	ite	eq
 800404c:	6032      	streq	r2, [r6, #0]
 800404e:	605a      	strne	r2, [r3, #4]
 8004050:	e7ec      	b.n	800402c <_malloc_r+0xa0>
 8004052:	4623      	mov	r3, r4
 8004054:	6864      	ldr	r4, [r4, #4]
 8004056:	e7b2      	b.n	8003fbe <_malloc_r+0x32>
 8004058:	4634      	mov	r4, r6
 800405a:	6876      	ldr	r6, [r6, #4]
 800405c:	e7b9      	b.n	8003fd2 <_malloc_r+0x46>
 800405e:	230c      	movs	r3, #12
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4638      	mov	r0, r7
 8004064:	f000 f81c 	bl	80040a0 <__malloc_unlock>
 8004068:	e7a1      	b.n	8003fae <_malloc_r+0x22>
 800406a:	6025      	str	r5, [r4, #0]
 800406c:	e7de      	b.n	800402c <_malloc_r+0xa0>
 800406e:	bf00      	nop
 8004070:	20000214 	.word	0x20000214

08004074 <_sbrk_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d06      	ldr	r5, [pc, #24]	; (8004090 <_sbrk_r+0x1c>)
 8004078:	2300      	movs	r3, #0
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	f7fc fce2 	bl	8000a48 <_sbrk>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_sbrk_r+0x1a>
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	b103      	cbz	r3, 800408e <_sbrk_r+0x1a>
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	2000021c 	.word	0x2000021c

08004094 <__malloc_lock>:
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <__malloc_lock+0x8>)
 8004096:	f000 b809 	b.w	80040ac <__retarget_lock_acquire_recursive>
 800409a:	bf00      	nop
 800409c:	20000220 	.word	0x20000220

080040a0 <__malloc_unlock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_unlock+0x8>)
 80040a2:	f000 b804 	b.w	80040ae <__retarget_lock_release_recursive>
 80040a6:	bf00      	nop
 80040a8:	20000220 	.word	0x20000220

080040ac <__retarget_lock_acquire_recursive>:
 80040ac:	4770      	bx	lr

080040ae <__retarget_lock_release_recursive>:
 80040ae:	4770      	bx	lr

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
