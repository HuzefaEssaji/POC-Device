
spi_functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d1c  08003d1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d1c  08003d1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000124  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b73c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018fb  00000000  00000000  0002b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020747  00000000  00000000  0002e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd5d  00000000  00000000  0004e817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4259  00000000  00000000  0005a574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e7cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000222c  00000000  00000000  0011e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c50 	.word	0x08003c50

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003c50 	.word	0x08003c50

080001d4 <max_read_reg>:




unsigned char * max_read_reg( unsigned char  reg_addr,uint8_t count)
{
 80001d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d8:	b08d      	sub	sp, #52	; 0x34
 80001da:	af02      	add	r7, sp, #8
 80001dc:	4603      	mov	r3, r0
 80001de:	460a      	mov	r2, r1
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	4613      	mov	r3, r2
 80001e4:	73bb      	strb	r3, [r7, #14]
 80001e6:	466b      	mov	r3, sp
 80001e8:	461e      	mov	r6, r3
	unsigned char tx[count+2];
 80001ea:	7bbb      	ldrb	r3, [r7, #14]
 80001ec:	1c99      	adds	r1, r3, #2
 80001ee:	1e4b      	subs	r3, r1, #1
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24
 80001f2:	460a      	mov	r2, r1
 80001f4:	2300      	movs	r3, #0
 80001f6:	603a      	str	r2, [r7, #0]
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	f04f 0200 	mov.w	r2, #0
 80001fe:	f04f 0300 	mov.w	r3, #0
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	00c3      	lsls	r3, r0, #3
 8000206:	6838      	ldr	r0, [r7, #0]
 8000208:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800020c:	6838      	ldr	r0, [r7, #0]
 800020e:	00c2      	lsls	r2, r0, #3
 8000210:	460a      	mov	r2, r1
 8000212:	2300      	movs	r3, #0
 8000214:	4692      	mov	sl, r2
 8000216:	469b      	mov	fp, r3
 8000218:	f04f 0200 	mov.w	r2, #0
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800022c:	460b      	mov	r3, r1
 800022e:	3307      	adds	r3, #7
 8000230:	08db      	lsrs	r3, r3, #3
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	ebad 0d03 	sub.w	sp, sp, r3
 8000238:	ab02      	add	r3, sp, #8
 800023a:	3300      	adds	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
	unsigned char rx[count+2];
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	1c99      	adds	r1, r3, #2
 8000242:	1e4b      	subs	r3, r1, #1
 8000244:	617b      	str	r3, [r7, #20]
 8000246:	460a      	mov	r2, r1
 8000248:	2300      	movs	r3, #0
 800024a:	4690      	mov	r8, r2
 800024c:	4699      	mov	r9, r3
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	f04f 0300 	mov.w	r3, #0
 8000256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800025a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800025e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000262:	460a      	mov	r2, r1
 8000264:	2300      	movs	r3, #0
 8000266:	4614      	mov	r4, r2
 8000268:	461d      	mov	r5, r3
 800026a:	f04f 0200 	mov.w	r2, #0
 800026e:	f04f 0300 	mov.w	r3, #0
 8000272:	00eb      	lsls	r3, r5, #3
 8000274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000278:	00e2      	lsls	r2, r4, #3
 800027a:	460b      	mov	r3, r1
 800027c:	3307      	adds	r3, #7
 800027e:	08db      	lsrs	r3, r3, #3
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	ebad 0d03 	sub.w	sp, sp, r3
 8000286:	ab02      	add	r3, sp, #8
 8000288:	3300      	adds	r3, #0
 800028a:	613b      	str	r3, [r7, #16]

	//read


	tx[0] = reg_addr;
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	7bfa      	ldrb	r2, [r7, #15]
 8000290:	701a      	strb	r2, [r3, #0]
	tx[1] = 0x80;
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	705a      	strb	r2, [r3, #1]
	tx[2] = 0xff;
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	709a      	strb	r2, [r3, #2]

	for(int i=3;i<count+2;i++)
 800029e:	2303      	movs	r3, #3
 80002a0:	61fb      	str	r3, [r7, #28]
 80002a2:	e007      	b.n	80002b4 <max_read_reg+0xe0>
	{
		tx[i]=0xff;
 80002a4:	69ba      	ldr	r2, [r7, #24]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	4413      	add	r3, r2
 80002aa:	22ff      	movs	r2, #255	; 0xff
 80002ac:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<count+2;i++)
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3301      	adds	r3, #1
 80002b2:	61fb      	str	r3, [r7, #28]
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	3301      	adds	r3, #1
 80002b8:	69fa      	ldr	r2, [r7, #28]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	ddf2      	ble.n	80002a4 <max_read_reg+0xd0>
	}

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2108      	movs	r1, #8
 80002c2:	481a      	ldr	r0, [pc, #104]	; (800032c <max_read_reg+0x158>)
 80002c4:	f000 fe66 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	4817      	ldr	r0, [pc, #92]	; (800032c <max_read_reg+0x158>)
 80002ce:	f000 fe61 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, tx, rx, (uint16_t)count+2, (uint32_t)1000);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	3302      	adds	r3, #2
 80002d8:	b29b      	uxth	r3, r3
 80002da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	693a      	ldr	r2, [r7, #16]
 80002e2:	69b9      	ldr	r1, [r7, #24]
 80002e4:	4812      	ldr	r0, [pc, #72]	; (8000330 <max_read_reg+0x15c>)
 80002e6:	f002 fd2e 	bl	8002d46 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	480f      	ldr	r0, [pc, #60]	; (800032c <max_read_reg+0x158>)
 80002f0:	f000 fe50 	bl	8000f94 <HAL_GPIO_WritePin>


	for (int i = 0; i < count+2; i++) {
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
 80002f8:	e00b      	b.n	8000312 <max_read_reg+0x13e>
		rx_global[i] = rx[i];
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	6a3b      	ldr	r3, [r7, #32]
 80002fe:	4413      	add	r3, r2
 8000300:	7819      	ldrb	r1, [r3, #0]
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <max_read_reg+0x160>)
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	4413      	add	r3, r2
 8000308:	460a      	mov	r2, r1
 800030a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < count+2; i++) {
 800030c:	6a3b      	ldr	r3, [r7, #32]
 800030e:	3301      	adds	r3, #1
 8000310:	623b      	str	r3, [r7, #32]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	3301      	adds	r3, #1
 8000316:	6a3a      	ldr	r2, [r7, #32]
 8000318:	429a      	cmp	r2, r3
 800031a:	ddee      	ble.n	80002fa <max_read_reg+0x126>




	}
	return rx_global;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <max_read_reg+0x160>)
 800031e:	46b5      	mov	sp, r6

}
 8000320:	4618      	mov	r0, r3
 8000322:	372c      	adds	r7, #44	; 0x2c
 8000324:	46bd      	mov	sp, r7
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	bf00      	nop
 800032c:	48000800 	.word	0x48000800
 8000330:	20000044 	.word	0x20000044
 8000334:	20000030 	.word	0x20000030

08000338 <max_write_reg>:


	void  max_write_reg(uint8_t reg_addr,uint8_t  write_val,uint8_t count)
	{
 8000338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800033c:	b087      	sub	sp, #28
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]
 8000344:	460b      	mov	r3, r1
 8000346:	71bb      	strb	r3, [r7, #6]
 8000348:	4613      	mov	r3, r2
 800034a:	717b      	strb	r3, [r7, #5]
 800034c:	466b      	mov	r3, sp
 800034e:	461e      	mov	r6, r3

		unsigned char tx[count+2];
 8000350:	797b      	ldrb	r3, [r7, #5]
 8000352:	1c99      	adds	r1, r3, #2
 8000354:	1e4b      	subs	r3, r1, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	460a      	mov	r2, r1
 800035a:	2300      	movs	r3, #0
 800035c:	4690      	mov	r8, r2
 800035e:	4699      	mov	r9, r3
 8000360:	f04f 0200 	mov.w	r2, #0
 8000364:	f04f 0300 	mov.w	r3, #0
 8000368:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800036c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000370:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000374:	460a      	mov	r2, r1
 8000376:	2300      	movs	r3, #0
 8000378:	4614      	mov	r4, r2
 800037a:	461d      	mov	r5, r3
 800037c:	f04f 0200 	mov.w	r2, #0
 8000380:	f04f 0300 	mov.w	r3, #0
 8000384:	00eb      	lsls	r3, r5, #3
 8000386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800038a:	00e2      	lsls	r2, r4, #3
 800038c:	460b      	mov	r3, r1
 800038e:	3307      	adds	r3, #7
 8000390:	08db      	lsrs	r3, r3, #3
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	ebad 0d03 	sub.w	sp, sp, r3
 8000398:	466b      	mov	r3, sp
 800039a:	3300      	adds	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]

		max_read_reg(reg_addr,count);  //dummy read
 800039e:	797a      	ldrb	r2, [r7, #5]
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff15 	bl	80001d4 <max_read_reg>

		//write
		tx[0] = reg_addr;
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	701a      	strb	r2, [r3, #0]
		tx[1] = 0x00;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
		tx[2] = write_val;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	709a      	strb	r2, [r3, #2]

		for(int i=3;i<count+2;i++)
 80003bc:	2303      	movs	r3, #3
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	e007      	b.n	80003d2 <max_write_reg+0x9a>
		{
			tx[i]=0xff;
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	4413      	add	r3, r2
 80003c8:	22ff      	movs	r2, #255	; 0xff
 80003ca:	701a      	strb	r2, [r3, #0]
		for(int i=3;i<count+2;i++)
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	3301      	adds	r3, #1
 80003d0:	613b      	str	r3, [r7, #16]
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	3301      	adds	r3, #1
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	ddf2      	ble.n	80003c2 <max_write_reg+0x8a>
		}


		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	4815      	ldr	r0, [pc, #84]	; (8000438 <max_write_reg+0x100>)
 80003e2:	f000 fdd7 	bl	8000f94 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, tx, (uint16_t)count+2, (uint32_t)1000);
 80003e6:	797b      	ldrb	r3, [r7, #5]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	3302      	adds	r3, #2
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <max_write_reg+0x104>)
 80003f6:	f002 fb38 	bl	8002a6a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2108      	movs	r1, #8
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <max_write_reg+0x100>)
 8000400:	f000 fdc8 	bl	8000f94 <HAL_GPIO_WritePin>
		tx[2] = 0xff;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	22ff      	movs	r2, #255	; 0xff
 8000408:	709a      	strb	r2, [r3, #2]

		for(int i=3;i<count+2;i++)
 800040a:	2303      	movs	r3, #3
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e007      	b.n	8000420 <max_write_reg+0xe8>
		{
			tx[i]=0xff;
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	4413      	add	r3, r2
 8000416:	22ff      	movs	r2, #255	; 0xff
 8000418:	701a      	strb	r2, [r3, #0]
		for(int i=3;i<count+2;i++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	797b      	ldrb	r3, [r7, #5]
 8000422:	3301      	adds	r3, #1
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	429a      	cmp	r2, r3
 8000428:	ddf2      	ble.n	8000410 <max_write_reg+0xd8>
 800042a:	46b5      	mov	sp, r6
		}

	}
 800042c:	bf00      	nop
 800042e:	371c      	adds	r7, #28
 8000430:	46bd      	mov	sp, r7
 8000432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000436:	bf00      	nop
 8000438:	48000800 	.word	0x48000800
 800043c:	20000044 	.word	0x20000044

08000440 <ppg_init>:



	unsigned char * ppg_init()

	{
 8000440:	b580      	push	{r7, lr}
 8000442:	b0a2      	sub	sp, #136	; 0x88
 8000444:	af00      	add	r7, sp, #0

		}

		flag=15;
		return flag;*/
		unsigned char ppg_config[122]={
 8000446:	4a28      	ldr	r2, [pc, #160]	; (80004e8 <ppg_init+0xa8>)
 8000448:	463b      	mov	r3, r7
 800044a:	4611      	mov	r1, r2
 800044c:	227a      	movs	r2, #122	; 0x7a
 800044e:	4618      	mov	r0, r3
 8000450:	f003 fbe8 	bl	8003c24 <memcpy>



		};

		for(int i=0; i<122;i=i+2)
 8000454:	2300      	movs	r3, #0
 8000456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800045a:	e014      	b.n	8000486 <ppg_init+0x46>
		{

			max_write_reg(ppg_config[i],ppg_config[i+1],1);
 800045c:	463a      	mov	r2, r7
 800045e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000462:	4413      	add	r3, r2
 8000464:	7818      	ldrb	r0, [r3, #0]
 8000466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800046a:	3301      	adds	r3, #1
 800046c:	3388      	adds	r3, #136	; 0x88
 800046e:	443b      	add	r3, r7
 8000470:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000474:	2201      	movs	r2, #1
 8000476:	4619      	mov	r1, r3
 8000478:	f7ff ff5e 	bl	8000338 <max_write_reg>
		for(int i=0; i<122;i=i+2)
 800047c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000480:	3302      	adds	r3, #2
 8000482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800048a:	2b79      	cmp	r3, #121	; 0x79
 800048c:	dde6      	ble.n	800045c <ppg_init+0x1c>
//
//
//		for(int j=0;j<30;++j){


	while (*(max_read_reg(0x0b,1)+2)!=0x06)
 800048e:	bf00      	nop
 8000490:	2101      	movs	r1, #1
 8000492:	200b      	movs	r0, #11
 8000494:	f7ff fe9e 	bl	80001d4 <max_read_reg>
 8000498:	4603      	mov	r3, r0
 800049a:	3302      	adds	r3, #2
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b06      	cmp	r3, #6
 80004a0:	d1f6      	bne.n	8000490 <ppg_init+0x50>
			{

			}

			temp=max_read_reg(0x0c,18);
 80004a2:	2112      	movs	r1, #18
 80004a4:	200c      	movs	r0, #12
 80004a6:	f7ff fe95 	bl	80001d4 <max_read_reg>
 80004aa:	67f8      	str	r0, [r7, #124]	; 0x7c

			for(int i=0;i<20;i++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80004b2:	e00f      	b.n	80004d4 <ppg_init+0x94>
			{
				rec[i]=*(temp+i);
 80004b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80004ba:	4413      	add	r3, r2
 80004bc:	7819      	ldrb	r1, [r3, #0]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <ppg_init+0xac>)
 80004c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004c4:	4413      	add	r3, r2
 80004c6:	460a      	mov	r2, r1
 80004c8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<20;i++)
 80004ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004ce:	3301      	adds	r3, #1
 80004d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80004d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004d8:	2b13      	cmp	r3, #19
 80004da:	ddeb      	ble.n	80004b4 <ppg_init+0x74>
			}
//}


		return rec;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <ppg_init+0xac>)
	}
 80004de:	4618      	mov	r0, r3
 80004e0:	3788      	adds	r7, #136	; 0x88
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	08003c68 	.word	0x08003c68
 80004ec:	20000028 	.word	0x20000028

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80004f6:	f000 fa77 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f821 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f8e9 	bl	80006d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000502:	f000 f879 	bl	80005f8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8b5 	bl	8000674 <MX_USART2_UART_Init>
  };*/
//  unsigned char x;
unsigned char *x;
unsigned char t[20];

  	  x=ppg_init();
 800050a:	f7ff ff99 	bl	8000440 <ppg_init>
 800050e:	4603      	mov	r3, r0
 8000510:	61bb      	str	r3, [r7, #24]

  	  for(int i=0;i<20;i++)
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
 8000516:	e00b      	b.n	8000530 <main+0x40>
  	  {
  		  t[i]=*(x+i);
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	69ba      	ldr	r2, [r7, #24]
 800051c:	4413      	add	r3, r2
 800051e:	7819      	ldrb	r1, [r3, #0]
 8000520:	1d3a      	adds	r2, r7, #4
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	4413      	add	r3, r2
 8000526:	460a      	mov	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
  	  for(int i=0;i<20;i++)
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3301      	adds	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	2b13      	cmp	r3, #19
 8000534:	ddf0      	ble.n	8000518 <main+0x28>
 8000536:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000538:	4618      	mov	r0, r3
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0a6      	sub	sp, #152	; 0x98
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fb76 	bl	8003c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2258      	movs	r2, #88	; 0x58
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fb68 	bl	8003c40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800058c:	2300      	movs	r3, #0
 800058e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fd11 	bl	8000fc4 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005a8:	f000 f8ea 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fd50 	bl	800206c <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 f8d5 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 ff79 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005ec:	f000 f8c8 	bl	8000780 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3798      	adds	r7, #152	; 0x98
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_SPI2_Init+0x74>)
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <MX_SPI2_Init+0x78>)
 8000600:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_SPI2_Init+0x74>)
 8000604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000608:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_SPI2_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_SPI2_Init+0x74>)
 8000612:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000616:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_SPI2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_SPI2_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_SPI2_Init+0x74>)
 8000626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_SPI2_Init+0x74>)
 800062e:	2228      	movs	r2, #40	; 0x28
 8000630:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_SPI2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_SPI2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_SPI2_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_SPI2_Init+0x74>)
 8000646:	2207      	movs	r2, #7
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_SPI2_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_SPI2_Init+0x74>)
 8000652:	2208      	movs	r2, #8
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_SPI2_Init+0x74>)
 8000658:	f002 f95c 	bl	8002914 <HAL_SPI_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000662:	f000 f88d 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000044 	.word	0x20000044
 8000670:	40003800 	.word	0x40003800

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_USART2_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000680:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b8:	f002 febc 	bl	8003434 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f85d 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000a8 	.word	0x200000a8
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_GPIO_Init+0xa4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a22      	ldr	r2, [pc, #136]	; (8000778 <MX_GPIO_Init+0xa4>)
 80006f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_GPIO_Init+0xa4>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000708:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0xa4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0xa4>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0xa8>)
 8000750:	f000 fc20 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000754:	2308      	movs	r3, #8
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0xa8>)
 800076c:	f000 fa88 	bl	8000c80 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000800 	.word	0x48000800

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x44>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_MspInit+0x44>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_MspInit+0x44>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_MspInit+0x44>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_MspInit+0x44>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x44>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <HAL_SPI_MspInit+0xb4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d144      	bne.n	8000880 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <HAL_SPI_MspInit+0xb8>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <HAL_SPI_MspInit+0xb8>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <HAL_SPI_MspInit+0xb8>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <HAL_SPI_MspInit+0xb8>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800083e:	2302      	movs	r3, #2
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084e:	2305      	movs	r3, #5
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <HAL_SPI_MspInit+0xbc>)
 800085a:	f000 fa11 	bl	8000c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800085e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000870:	2305      	movs	r3, #5
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <HAL_SPI_MspInit+0xc0>)
 800087c:	f000 fa00 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40003800 	.word	0x40003800
 800088c:	40021000 	.word	0x40021000
 8000890:	48001400 	.word	0x48001400
 8000894:	48000400 	.word	0x48000400

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x7c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d128      	bne.n	800090c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 f9ba 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f884 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009be:	f7ff ffd7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f003 f90b 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fd93 	bl	80004f0 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	08003d24 	.word	0x08003d24
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	20000130 	.word	0x20000130

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f90d 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fec2 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f917 	bl	8000c66 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f8ed 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000012c 	.word	0x2000012c

08000a9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000012c 	.word	0x2000012c

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff47 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff5c 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb0 	bl	8000bd4 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	e160      	b.n	8000f52 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8152 	beq.w	8000f4c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d005      	beq.n	8000cc0 <HAL_GPIO_Init+0x40>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d130      	bne.n	8000d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	f003 0201 	and.w	r2, r3, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d017      	beq.n	8000d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d123      	bne.n	8000db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	691a      	ldr	r2, [r3, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	6939      	ldr	r1, [r7, #16]
 8000dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0203 	and.w	r2, r3, #3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80ac 	beq.w	8000f4c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df4:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a5d      	ldr	r2, [pc, #372]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e0c:	4a59      	ldr	r2, [pc, #356]	; (8000f74 <HAL_GPIO_Init+0x2f4>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e36:	d025      	beq.n	8000e84 <HAL_GPIO_Init+0x204>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_GPIO_Init+0x2f8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d01f      	beq.n	8000e80 <HAL_GPIO_Init+0x200>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <HAL_GPIO_Init+0x2fc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d019      	beq.n	8000e7c <HAL_GPIO_Init+0x1fc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d013      	beq.n	8000e78 <HAL_GPIO_Init+0x1f8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_GPIO_Init+0x304>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d00d      	beq.n	8000e74 <HAL_GPIO_Init+0x1f4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x308>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d007      	beq.n	8000e70 <HAL_GPIO_Init+0x1f0>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_GPIO_Init+0x1ec>
 8000e68:	2306      	movs	r3, #6
 8000e6a:	e00c      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	e00a      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e70:	2305      	movs	r3, #5
 8000e72:	e008      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e74:	2304      	movs	r3, #4
 8000e76:	e006      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e004      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e002      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e84:	2300      	movs	r3, #0
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	f002 0203 	and.w	r2, r2, #3
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	4093      	lsls	r3, r2
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e96:	4937      	ldr	r1, [pc, #220]	; (8000f74 <HAL_GPIO_Init+0x2f4>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ec8:	4a31      	ldr	r2, [pc, #196]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef2:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f47f ae97 	bne.w	8000c90 <HAL_GPIO_Init+0x10>
  }
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48001400 	.word	0x48001400
 8000f8c:	48001800 	.word	0x48001800
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f001 b83a 	b.w	800205e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 816f 	beq.w	80012de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001000:	4bb5      	ldr	r3, [pc, #724]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4bb2      	ldr	r3, [pc, #712]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d15c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x10e>
 8001018:	4baf      	ldr	r3, [pc, #700]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d155      	bne.n	80010d2 <HAL_RCC_OscConfig+0x10e>
 8001026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800103a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x94>
 8001052:	4ba1      	ldr	r3, [pc, #644]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e015      	b.n	8001084 <HAL_RCC_OscConfig+0xc0>
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800106c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001070:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001074:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001080:	4b95      	ldr	r3, [pc, #596]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001088:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800108c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001090:	fa92 f2a2 	rbit	r2, r2
 8001094:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001098:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800109c:	fab2 f282 	clz	r2, r2
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	f042 0220 	orr.w	r2, r2, #32
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f002 021f 	and.w	r2, r2, #31
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8111 	beq.w	80012dc <HAL_RCC_OscConfig+0x318>
 80010ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 8108 	bne.w	80012dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f000 bfc6 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12e>
 80010e4:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a7b      	ldr	r2, [pc, #492]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e036      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
 80010f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x158>
 8001102:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a74      	ldr	r2, [pc, #464]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b72      	ldr	r3, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a71      	ldr	r2, [pc, #452]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e021      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
 800111c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001120:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x184>
 800112e:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a69      	ldr	r2, [pc, #420]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a66      	ldr	r2, [pc, #408]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
 8001148:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a62      	ldr	r2, [pc, #392]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001164:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d059      	beq.n	8001224 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fc94 	bl	8000a9c <HAL_GetTick>
 8001174:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001178:	e00a      	b.n	8001190 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117a:	f7ff fc8f 	bl	8000a9c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d902      	bls.n	8001190 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	f000 bf67 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
 8001190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001194:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a8:	fab3 f383 	clz	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <HAL_RCC_OscConfig+0x1fe>
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	e015      	b.n	80011ee <HAL_RCC_OscConfig+0x22a>
 80011c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80011d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80011f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80011fa:	fa92 f2a2 	rbit	r2, r2
 80011fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001202:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001206:	fab2 f282 	clz	r2, r2
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	f042 0220 	orr.w	r2, r2, #32
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	f002 021f 	and.w	r2, r2, #31
 8001216:	2101      	movs	r1, #1
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0ab      	beq.n	800117a <HAL_RCC_OscConfig+0x1b6>
 8001222:	e05c      	b.n	80012de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fc3a 	bl	8000a9c <HAL_GetTick>
 8001228:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122e:	f7ff fc35 	bl	8000a9c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d902      	bls.n	8001244 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	f000 bf0d 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
 8001244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001248:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001258:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x2b2>
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x2de>
 8001276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800128a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800128e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001292:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_RCC_OscConfig+0x314>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ab      	bne.n	800122e <HAL_RCC_OscConfig+0x26a>
 80012d6:	e002      	b.n	80012de <HAL_RCC_OscConfig+0x31a>
 80012d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 817f 	beq.w	80015f2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f4:	4ba7      	ldr	r3, [pc, #668]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001300:	4ba4      	ldr	r3, [pc, #656]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d173      	bne.n	80013f4 <HAL_RCC_OscConfig+0x430>
 800130c:	4ba1      	ldr	r3, [pc, #644]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001318:	d16c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x430>
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800132c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x386>
 8001344:	4b93      	ldr	r3, [pc, #588]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	e013      	b.n	8001372 <HAL_RCC_OscConfig+0x3ae>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001362:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800136e:	4b89      	ldr	r3, [pc, #548]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2202      	movs	r2, #2
 8001374:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001378:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800137c:	fa92 f2a2 	rbit	r2, r2
 8001380:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001384:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001388:	fab2 f282 	clz	r2, r2
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f042 0220 	orr.w	r2, r2, #32
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f002 021f 	and.w	r2, r2, #31
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <HAL_RCC_OscConfig+0x3f6>
 80013a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d002      	beq.n	80013ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f000 be52 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	21f8      	movs	r1, #248	; 0xf8
 80013d0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80013d8:	fa91 f1a1 	rbit	r1, r1
 80013dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80013e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013e4:	fab1 f181 	clz	r1, r1
 80013e8:	b2c9      	uxtb	r1, r1
 80013ea:	408b      	lsls	r3, r1
 80013ec:	4969      	ldr	r1, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e0fe      	b.n	80015f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8088 	beq.w	8001516 <HAL_RCC_OscConfig+0x552>
 8001406:	2301      	movs	r3, #1
 8001408:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001418:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001426:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	2301      	movs	r3, #1
 8001430:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fb33 	bl	8000a9c <HAL_GetTick>
 8001436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fb2e 	bl	8000a9c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d902      	bls.n	8001452 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	f000 be06 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001464:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x4be>
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	e013      	b.n	80014aa <HAL_RCC_OscConfig+0x4e6>
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800149a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2202      	movs	r2, #2
 80014ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014b4:	fa92 f2a2 	rbit	r2, r2
 80014b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014c0:	fab2 f282 	clz	r2, r2
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f042 0220 	orr.w	r2, r2, #32
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	f002 021f 	and.w	r2, r2, #31
 80014d0:	2101      	movs	r1, #1
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0af      	beq.n	800143c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	21f8      	movs	r1, #248	; 0xf8
 80014f2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80014fa:	fa91 f1a1 	rbit	r1, r1
 80014fe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001502:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001506:	fab1 f181 	clz	r1, r1
 800150a:	b2c9      	uxtb	r1, r1
 800150c:	408b      	lsls	r3, r1
 800150e:	4921      	ldr	r1, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e06d      	b.n	80015f2 <HAL_RCC_OscConfig+0x62e>
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001528:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001536:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	461a      	mov	r2, r3
 800153e:	2300      	movs	r3, #0
 8001540:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff faab 	bl	8000a9c <HAL_GetTick>
 8001546:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff faa6 	bl	8000a9c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d902      	bls.n	8001562 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	f000 bd7e 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001574:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x5d4>
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <HAL_RCC_OscConfig+0x5d0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	e016      	b.n	80015c0 <HAL_RCC_OscConfig+0x5fc>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015bc:	4bbf      	ldr	r3, [pc, #764]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2202      	movs	r2, #2
 80015c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015ca:	fa92 f2a2 	rbit	r2, r2
 80015ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80015d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015d6:	fab2 f282 	clz	r2, r2
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f002 021f 	and.w	r2, r2, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ac      	bne.n	800154c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8113 	beq.w	800182e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d07c      	beq.n	8001712 <HAL_RCC_OscConfig+0x74e>
 8001618:	2301      	movs	r3, #1
 800161a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800162a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	4ba2      	ldr	r3, [pc, #648]	; (80018c0 <HAL_RCC_OscConfig+0x8fc>)
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fa2b 	bl	8000a9c <HAL_GetTick>
 8001646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fa26 	bl	8000a9c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d902      	bls.n	8001662 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 bcfe 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001682:	2202      	movs	r2, #2
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b7e      	ldr	r3, [pc, #504]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 80016c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016ce:	2102      	movs	r1, #2
 80016d0:	6019      	str	r1, [r3, #0]
 80016d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f1a3 	rbit	r1, r3
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016e8:	6019      	str	r1, [r3, #0]
  return result;
 80016ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d09d      	beq.n	800164c <HAL_RCC_OscConfig+0x688>
 8001710:	e08d      	b.n	800182e <HAL_RCC_OscConfig+0x86a>
 8001712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001722:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	fa93 f2a3 	rbit	r2, r3
 800172c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001730:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001734:	601a      	str	r2, [r3, #0]
  return result;
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800173e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_RCC_OscConfig+0x8fc>)
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	461a      	mov	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff f9a2 	bl	8000a9c <HAL_GetTick>
 8001758:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff f99d 	bl	8000a9c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d902      	bls.n	8001774 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	f000 bc75 	b.w	800205e <HAL_RCC_OscConfig+0x109a>
 8001774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001778:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001784:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017a0:	2202      	movs	r2, #2
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017ec:	2102      	movs	r1, #2
 80017ee:	6019      	str	r1, [r3, #0]
 80017f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f1a3 	rbit	r1, r3
 80017fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001802:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001806:	6019      	str	r1, [r3, #0]
  return result;
 8001808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d197      	bne.n	800175e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 81a5 	beq.w	8001b8e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_RCC_OscConfig+0x8f8>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800186a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_RCC_OscConfig+0x900>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d121      	bne.n	80018d4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_RCC_OscConfig+0x900>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x900>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff f8fe 	bl	8000a9c <HAL_GetTick>
 80018a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e010      	b.n	80018c8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff f8f9 	bl	8000a9c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d908      	bls.n	80018c8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e3d1      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	10908120 	.word	0x10908120
 80018c4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b8d      	ldr	r3, [pc, #564]	; (8001b00 <HAL_RCC_OscConfig+0xb3c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0e8      	beq.n	80018a6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x92e>
 80018e4:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a86      	ldr	r2, [pc, #536]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e035      	b.n	800195e <HAL_RCC_OscConfig+0x99a>
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x958>
 8001902:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a7c      	ldr	r2, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	e020      	b.n	800195e <HAL_RCC_OscConfig+0x99a>
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x982>
 800192c:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a74      	ldr	r2, [pc, #464]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x99a>
 8001946:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a6b      	ldr	r2, [pc, #428]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8081 	beq.w	8001a72 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff f894 	bl	8000a9c <HAL_GetTick>
 8001974:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f88f 	bl	8000a9c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e365      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019d8:	601a      	str	r2, [r3, #0]
  return result;
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0xa3a>
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0xa62>
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	fa92 f1a2 	rbit	r1, r2
 8001a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a44:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a48:	6011      	str	r1, [r2, #0]
  return result;
 8001a4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a4e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	fab2 f282 	clz	r2, r2
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f002 021f 	and.w	r2, r2, #31
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d084      	beq.n	800197a <HAL_RCC_OscConfig+0x9b6>
 8001a70:	e083      	b.n	8001b7a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff f813 	bl	8000a9c <HAL_GetTick>
 8001a76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f80e 	bl	8000a9c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e2e4      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
 8001a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ae4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0xb44>
 8001afa:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_RCC_OscConfig+0xb40>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	e017      	b.n	8001b30 <HAL_RCC_OscConfig+0xb6c>
 8001b00:	40007000 	.word	0x40007000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4bb3      	ldr	r3, [pc, #716]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b38:	2102      	movs	r1, #2
 8001b3a:	6011      	str	r1, [r2, #0]
 8001b3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fa92 f1a2 	rbit	r1, r2
 8001b4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b4e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b52:	6011      	str	r1, [r2, #0]
  return result;
 8001b54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b58:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f002 021f 	and.w	r2, r2, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d180      	bne.n	8001a7c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b7a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d105      	bne.n	8001b8e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b82:	4b9e      	ldr	r3, [pc, #632]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a9d      	ldr	r2, [pc, #628]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 825e 	beq.w	800205c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	4b96      	ldr	r3, [pc, #600]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f000 821f 	beq.w	8001fec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	f040 8170 	bne.w	8001ea0 <HAL_RCC_OscConfig+0xedc>
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001be4:	601a      	str	r2, [r3, #0]
  return result;
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	2300      	movs	r3, #0
 8001c04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7fe ff49 	bl	8000a9c <HAL_GetTick>
 8001c0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	e009      	b.n	8001c24 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe ff44 	bl	8000a9c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e21c      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_OscConfig+0xcaa>
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_OscConfig+0xcfa>
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cca:	6011      	str	r1, [r2, #0]
 8001ccc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cd0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	fa92 f1a2 	rbit	r1, r2
 8001cda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cde:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ce2:	6011      	str	r1, [r2, #0]
  return result;
 8001ce4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ce8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	fab2 f282 	clz	r2, r2
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f042 0220 	orr.w	r2, r2, #32
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f002 021f 	and.w	r2, r2, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d182      	bne.n	8001c10 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f023 020f 	bic.w	r2, r3, #15
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	4937      	ldr	r1, [pc, #220]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a19      	ldr	r1, [r3, #32]
 8001d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	492d      	ldr	r1, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d70:	601a      	str	r2, [r3, #0]
  return result;
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d7a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fe83 	bl	8000a9c <HAL_GetTick>
 8001d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fe7e 	bl	8000a9c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e156      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dd4:	601a      	str	r2, [r3, #0]
  return result;
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0xe3c>
 8001df4:	4b01      	ldr	r3, [pc, #4]	; (8001dfc <HAL_RCC_OscConfig+0xe38>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e02a      	b.n	8001e50 <HAL_RCC_OscConfig+0xe8c>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e38:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b86      	ldr	r3, [pc, #536]	; (8002068 <HAL_RCC_OscConfig+0x10a4>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	fa92 f1a2 	rbit	r1, r2
 8001e6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e70:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e74:	6011      	str	r1, [r2, #0]
  return result;
 8001e76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f43f af7f 	beq.w	8001d9c <HAL_RCC_OscConfig+0xdd8>
 8001e9e:	e0dd      	b.n	800205c <HAL_RCC_OscConfig+0x1098>
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ec4:	601a      	str	r2, [r3, #0]
  return result;
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ece:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fdd9 	bl	8000a9c <HAL_GetTick>
 8001eea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	e009      	b.n	8001f04 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7fe fdd4 	bl	8000a9c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0ac      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f28:	601a      	str	r2, [r3, #0]
  return result;
 8001f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0xf8a>
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x10a4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e027      	b.n	8001f9e <HAL_RCC_OscConfig+0xfda>
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x10a4>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fa2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fa6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001faa:	6011      	str	r1, [r2, #0]
 8001fac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	fa92 f1a2 	rbit	r1, r2
 8001fba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fbe:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001fc2:	6011      	str	r1, [r2, #0]
  return result;
 8001fc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d182      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xf2c>
 8001fea:	e037      	b.n	800205c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e02e      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_OscConfig+0x10a4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x10a4>)
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002014:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	d117      	bne.n	8002058 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002028:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800202c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800203c:	429a      	cmp	r2, r3
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09e      	sub	sp, #120	; 0x78
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e162      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b90      	ldr	r3, [pc, #576]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b8d      	ldr	r3, [pc, #564]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	498b      	ldr	r1, [pc, #556]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e14a      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	497f      	ldr	r1, [pc, #508]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80dc 	beq.w	8002298 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d13c      	bne.n	8002162 <HAL_RCC_ClockConfig+0xf6>
 80020e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_RCC_ClockConfig+0xa6>
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e00f      	b.n	8002132 <HAL_RCC_ClockConfig+0xc6>
 8002112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002116:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	667b      	str	r3, [r7, #100]	; 0x64
 8002120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002124:	663b      	str	r3, [r7, #96]	; 0x60
 8002126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002136:	65ba      	str	r2, [r7, #88]	; 0x58
 8002138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002140:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d17b      	bne.n	8002256 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0f3      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d13c      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x178>
 800216a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_RCC_ClockConfig+0x128>
 800218e:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_ClockConfig+0x148>
 8002194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
 80021a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
 80021a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80021ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f002 021f 	and.w	r2, r2, #31
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d13a      	bne.n	8002256 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b2      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
 80021e4:	2302      	movs	r3, #2
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_RCC_ClockConfig+0x1a0>
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e00d      	b.n	8002228 <HAL_RCC_ClockConfig+0x1bc>
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	2302      	movs	r3, #2
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	2202      	movs	r2, #2
 800222a:	61ba      	str	r2, [r7, #24]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	617a      	str	r2, [r7, #20]
  return result;
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e079      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	491a      	ldr	r1, [pc, #104]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe fc18 	bl	8000a9c <HAL_GetTick>
 800226c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7fe fc14 	bl	8000a9c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e061      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d214      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4906      	ldr	r1, [pc, #24]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e040      	b.n	800234a <HAL_RCC_ClockConfig+0x2de>
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_ClockConfig+0x2e8>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	491a      	ldr	r1, [pc, #104]	; (8002354 <HAL_RCC_ClockConfig+0x2e8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_RCC_ClockConfig+0x2e8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4912      	ldr	r1, [pc, #72]	; (8002354 <HAL_RCC_ClockConfig+0x2e8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800230e:	f000 f829 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002312:	4601      	mov	r1, r0
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_RCC_ClockConfig+0x2e8>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	22f0      	movs	r2, #240	; 0xf0
 800231e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	fa92 f2a2 	rbit	r2, r2
 8002326:	60fa      	str	r2, [r7, #12]
  return result;
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	40d3      	lsrs	r3, r2
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x2ec>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	fa21 f303 	lsr.w	r3, r1, r3
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_RCC_ClockConfig+0x2f0>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCC_ClockConfig+0x2f4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fb66 	bl	8000a14 <HAL_InitTick>
  
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3778      	adds	r7, #120	; 0x78
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	08003ce4 	.word	0x08003ce4
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b08b      	sub	sp, #44	; 0x2c
 8002368:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x30>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x36>
 8002392:	e03f      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002396:	623b      	str	r3, [r7, #32]
      break;
 8002398:	e03f      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	fa92 f2a2 	rbit	r2, r2
 80023ac:	607a      	str	r2, [r7, #4]
  return result;
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	40d3      	lsrs	r3, r2
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	220f      	movs	r2, #15
 80023c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	60fa      	str	r2, [r7, #12]
  return result;
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	40d3      	lsrs	r3, r2
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	e007      	b.n	800240e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fbb2 f2f3 	udiv	r2, r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	623b      	str	r3, [r7, #32]
      break;
 8002412:	e002      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002416:	623b      	str	r3, [r7, #32]
      break;
 8002418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241a:	6a3b      	ldr	r3, [r7, #32]
}
 800241c:	4618      	mov	r0, r3
 800241e:	372c      	adds	r7, #44	; 0x2c
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40021000 	.word	0x40021000
 800242c:	007a1200 	.word	0x007a1200
 8002430:	08003cfc 	.word	0x08003cfc
 8002434:	08003d0c 	.word	0x08003d0c

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <HAL_RCC_GetHCLKFreq+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002456:	f7ff ffef 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 800245a:	4601      	mov	r1, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002464:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002468:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	603a      	str	r2, [r7, #0]
  return result;
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	40d3      	lsrs	r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x40>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08003cf4 	.word	0x08003cf4

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800249a:	f7ff ffcd 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 800249e:	4601      	mov	r1, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	603a      	str	r2, [r7, #0]
  return result;
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	40d3      	lsrs	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08003cf4 	.word	0x08003cf4

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b092      	sub	sp, #72	; 0x48
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80d4 	beq.w	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fc:	4b4e      	ldr	r3, [pc, #312]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10e      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	4b48      	ldr	r3, [pc, #288]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a41      	ldr	r2, [pc, #260]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe faad 	bl	8000a9c <HAL_GetTick>
 8002542:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe faa9 	bl	8000a9c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1d6      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8084 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002580:	429a      	cmp	r2, r3
 8002582:	d07c      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2301      	movs	r3, #1
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	461a      	mov	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d04b      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fa59 	bl	8000a9c <HAL_GetTick>
 80025ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fa55 	bl	8000a9c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e180      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002604:	2302      	movs	r3, #2
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	2302      	movs	r3, #2
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	61fb      	str	r3, [r7, #28]
  return result;
 800261c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d108      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002632:	4b01      	ldr	r3, [pc, #4]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	e00d      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
 8002640:	10908100 	.word	0x10908100
 8002644:	2302      	movs	r3, #2
 8002646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	4b9a      	ldr	r3, [pc, #616]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2202      	movs	r2, #2
 8002656:	613a      	str	r2, [r7, #16]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	60fa      	str	r2, [r7, #12]
  return result;
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0b7      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800267e:	4b8f      	ldr	r3, [pc, #572]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	498c      	ldr	r1, [pc, #560]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a87      	ldr	r2, [pc, #540]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b0:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f023 0203 	bic.w	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	497f      	ldr	r1, [pc, #508]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ce:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4978      	ldr	r1, [pc, #480]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ec:	4b73      	ldr	r3, [pc, #460]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	4970      	ldr	r1, [pc, #448]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800270a:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f023 0210 	bic.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4969      	ldr	r1, [pc, #420]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002728:	4b64      	ldr	r3, [pc, #400]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	4961      	ldr	r1, [pc, #388]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002746:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f023 0220 	bic.w	r2, r3, #32
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	495a      	ldr	r1, [pc, #360]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002764:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	4952      	ldr	r1, [pc, #328]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002782:	4b4e      	ldr	r3, [pc, #312]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	494b      	ldr	r1, [pc, #300]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4943      	ldr	r1, [pc, #268]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	493c      	ldr	r1, [pc, #240]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	4934      	ldr	r1, [pc, #208]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	492d      	ldr	r1, [pc, #180]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	4925      	ldr	r1, [pc, #148]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	491e      	ldr	r1, [pc, #120]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	490f      	ldr	r1, [pc, #60]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028ae:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	e002      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	4913      	ldr	r1, [pc, #76]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	490b      	ldr	r1, [pc, #44]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002900:	4313      	orrs	r3, r2
 8002902:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3748      	adds	r7, #72	; 0x48
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e09d      	b.n	8002a62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002936:	d009      	beq.n	800294c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
 800293e:	e005      	b.n	800294c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd ff34 	bl	80007d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800298c:	d902      	bls.n	8002994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e002      	b.n	800299a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029a2:	d007      	beq.n	80029b4 <HAL_SPI_Init+0xa0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	ea42 0103 	orr.w	r1, r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	f003 0204 	and.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a30:	ea42 0103 	orr.w	r1, r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_SPI_Transmit+0x22>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e158      	b.n	8002d3e <HAL_SPI_Transmit+0x2d4>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a94:	f7fe f802 	bl	8000a9c <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aae:	e13d      	b.n	8002d2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Transmit+0x52>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac0:	e134      	b.n	8002d2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0c:	d10f      	bne.n	8002b2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d007      	beq.n	8002b4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b54:	d94b      	bls.n	8002bee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_SPI_Transmit+0xfa>
 8002b5e:	8afb      	ldrh	r3, [r7, #22]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d13e      	bne.n	8002be2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b88:	e02b      	b.n	8002be2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d112      	bne.n	8002bbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bbc:	e011      	b.n	8002be2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bbe:	f7fd ff6d 	bl	8000a9c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d803      	bhi.n	8002bd6 <HAL_SPI_Transmit+0x16c>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d102      	bne.n	8002bdc <HAL_SPI_Transmit+0x172>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002be0:	e0a4      	b.n	8002d2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ce      	bne.n	8002b8a <HAL_SPI_Transmit+0x120>
 8002bec:	e07c      	b.n	8002ce8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Transmit+0x192>
 8002bf6:	8afb      	ldrh	r3, [r7, #22]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d170      	bne.n	8002cde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d912      	bls.n	8002c2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	1c9a      	adds	r2, r3, #2
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b02      	subs	r3, #2
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c2a:	e058      	b.n	8002cde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c52:	e044      	b.n	8002cde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d12b      	bne.n	8002cba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d912      	bls.n	8002c92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	881a      	ldrh	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	1c9a      	adds	r2, r3, #2
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b02      	subs	r3, #2
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c90:	e025      	b.n	8002cde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb8:	e011      	b.n	8002cde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cba:	f7fd feef 	bl	8000a9c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d803      	bhi.n	8002cd2 <HAL_SPI_Transmit+0x268>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d102      	bne.n	8002cd8 <HAL_SPI_Transmit+0x26e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cdc:	e026      	b.n	8002d2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1b5      	bne.n	8002c54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	6839      	ldr	r1, [r7, #0]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fb5b 	bl	80033a8 <SPI_EndRxTxTransaction>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e000      	b.n	8002d2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b08a      	sub	sp, #40	; 0x28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_SPI_TransmitReceive+0x26>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e1fb      	b.n	8003164 <HAL_SPI_TransmitReceive+0x41e>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d74:	f7fd fe92 	bl	8000a9c <HAL_GetTick>
 8002d78:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d80:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d90:	7efb      	ldrb	r3, [r7, #27]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d00e      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x6e>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9c:	d106      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x66>
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d003      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002db2:	e1cd      	b.n	8003150 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x80>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x80>
 8002dc0:	887b      	ldrh	r3, [r7, #2]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dcc:	e1c0      	b.n	8003150 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d003      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2205      	movs	r2, #5
 8002dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	887a      	ldrh	r2, [r7, #2]
 8002df2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	887a      	ldrh	r2, [r7, #2]
 8002dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e24:	d802      	bhi.n	8002e2c <HAL_SPI_TransmitReceive+0xe6>
 8002e26:	8a3b      	ldrh	r3, [r7, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d908      	bls.n	8002e3e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	e007      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d007      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e74:	d97c      	bls.n	8002f70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x13e>
 8002e7e:	8a7b      	ldrh	r3, [r7, #18]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d169      	bne.n	8002f58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c9a      	adds	r2, r3, #2
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea8:	e056      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x1aa>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x1aa>
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d113      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	1c9a      	adds	r2, r3, #2
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d11c      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x1f2>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	b292      	uxth	r2, r2
 8002f16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f34:	2301      	movs	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f38:	f7fd fdb0 	bl	8000a9c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d807      	bhi.n	8002f58 <HAL_SPI_TransmitReceive+0x212>
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d003      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f56:	e0fb      	b.n	8003150 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1a3      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x164>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d19d      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x164>
 8002f6e:	e0df      	b.n	8003130 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x23a>
 8002f78:	8a7b      	ldrh	r3, [r7, #18]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	f040 80cb 	bne.w	8003116 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d912      	bls.n	8002fb0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b02      	subs	r3, #2
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fae:	e0b2      	b.n	8003116 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd6:	e09e      	b.n	8003116 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d134      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x30a>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02f      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x30a>
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d12c      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d912      	bls.n	8003026 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b02      	subs	r3, #2
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003024:	e012      	b.n	800304c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d148      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x3aa>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d042      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d923      	bls.n	80030be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	b292      	uxth	r2, r2
 8003082:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b02      	subs	r3, #2
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d81f      	bhi.n	80030ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	e016      	b.n	80030ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f103 020c 	add.w	r2, r3, #12
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030f0:	f7fd fcd4 	bl	8000a9c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d803      	bhi.n	8003108 <HAL_SPI_TransmitReceive+0x3c2>
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d102      	bne.n	800310e <HAL_SPI_TransmitReceive+0x3c8>
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003114:	e01c      	b.n	8003150 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af5b 	bne.w	8002fd8 <HAL_SPI_TransmitReceive+0x292>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f47f af54 	bne.w	8002fd8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f937 	bl	80033a8 <SPI_EndRxTxTransaction>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	661a      	str	r2, [r3, #96]	; 0x60
 800314c:	e000      	b.n	8003150 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800314e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003164:	4618      	mov	r0, r3
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800317c:	f7fd fc8e 	bl	8000a9c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	4413      	add	r3, r2
 800318a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800318c:	f7fd fc86 	bl	8000a9c <HAL_GetTick>
 8003190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003192:	4b39      	ldr	r3, [pc, #228]	; (8003278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	0d1b      	lsrs	r3, r3, #20
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a2:	e054      	b.n	800324e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d050      	beq.n	800324e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ac:	f7fd fc76 	bl	8000a9c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d902      	bls.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d13d      	bne.n	800323e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031da:	d111      	bne.n	8003200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e4:	d004      	beq.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d107      	bne.n	8003200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003208:	d10f      	bne.n	800322a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e017      	b.n	800326e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3b01      	subs	r3, #1
 800324c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	429a      	cmp	r2, r3
 800326a:	d19b      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800328e:	f7fd fc05 	bl	8000a9c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4413      	add	r3, r2
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800329e:	f7fd fbfd 	bl	8000a9c <HAL_GetTick>
 80032a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032ac:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00da      	lsls	r2, r3, #3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	0d1b      	lsrs	r3, r3, #20
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032c4:	e060      	b.n	8003388 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032cc:	d107      	bne.n	80032de <SPI_WaitFifoStateUntilTimeout+0x62>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d050      	beq.n	8003388 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032e6:	f7fd fbd9 	bl	8000a9c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d902      	bls.n	80032fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d13d      	bne.n	8003378 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800330a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003314:	d111      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331e:	d004      	beq.n	800332a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003328:	d107      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003338:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003342:	d10f      	bne.n	8003364 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003362:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e010      	b.n	800339a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	3b01      	subs	r3, #1
 8003386:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	d196      	bne.n	80032c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3728      	adds	r7, #40	; 0x28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000

080033a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff ff5b 	bl	800327c <SPI_WaitFifoStateUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e027      	b.n	800342c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2200      	movs	r2, #0
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff fec0 	bl	800316c <SPI_WaitFlagStateUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	f043 0220 	orr.w	r2, r3, #32
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e014      	b.n	800342c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff ff34 	bl	800327c <SPI_WaitFifoStateUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e000      	b.n	800342c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e040      	b.n	80034c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fa1e 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f82c 	bl	80034d0 <UART_SetConfig>
 8003478:	4603      	mov	r3, r0
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e022      	b.n	80034c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9f6 	bl	800387c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fa7d 	bl	80039c0 <UART_CheckIdleState>
 80034c6:	4603      	mov	r3, r0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b92      	ldr	r3, [pc, #584]	; (8003744 <UART_SetConfig+0x274>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	6979      	ldr	r1, [r7, #20]
 8003504:	430b      	orrs	r3, r1
 8003506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a80      	ldr	r2, [pc, #512]	; (8003748 <UART_SetConfig+0x278>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d120      	bne.n	800358e <UART_SetConfig+0xbe>
 800354c:	4b7f      	ldr	r3, [pc, #508]	; (800374c <UART_SetConfig+0x27c>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b03      	cmp	r3, #3
 8003556:	d817      	bhi.n	8003588 <UART_SetConfig+0xb8>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <UART_SetConfig+0x90>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003571 	.word	0x08003571
 8003564:	0800357d 	.word	0x0800357d
 8003568:	08003583 	.word	0x08003583
 800356c:	08003577 	.word	0x08003577
 8003570:	2301      	movs	r3, #1
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e0b5      	b.n	80036e2 <UART_SetConfig+0x212>
 8003576:	2302      	movs	r3, #2
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e0b2      	b.n	80036e2 <UART_SetConfig+0x212>
 800357c:	2304      	movs	r3, #4
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e0af      	b.n	80036e2 <UART_SetConfig+0x212>
 8003582:	2308      	movs	r3, #8
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e0ac      	b.n	80036e2 <UART_SetConfig+0x212>
 8003588:	2310      	movs	r3, #16
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e0a9      	b.n	80036e2 <UART_SetConfig+0x212>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6f      	ldr	r2, [pc, #444]	; (8003750 <UART_SetConfig+0x280>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d124      	bne.n	80035e2 <UART_SetConfig+0x112>
 8003598:	4b6c      	ldr	r3, [pc, #432]	; (800374c <UART_SetConfig+0x27c>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035a4:	d011      	beq.n	80035ca <UART_SetConfig+0xfa>
 80035a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035aa:	d817      	bhi.n	80035dc <UART_SetConfig+0x10c>
 80035ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b0:	d011      	beq.n	80035d6 <UART_SetConfig+0x106>
 80035b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b6:	d811      	bhi.n	80035dc <UART_SetConfig+0x10c>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <UART_SetConfig+0xf4>
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d006      	beq.n	80035d0 <UART_SetConfig+0x100>
 80035c2:	e00b      	b.n	80035dc <UART_SetConfig+0x10c>
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e08b      	b.n	80036e2 <UART_SetConfig+0x212>
 80035ca:	2302      	movs	r3, #2
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e088      	b.n	80036e2 <UART_SetConfig+0x212>
 80035d0:	2304      	movs	r3, #4
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e085      	b.n	80036e2 <UART_SetConfig+0x212>
 80035d6:	2308      	movs	r3, #8
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e082      	b.n	80036e2 <UART_SetConfig+0x212>
 80035dc:	2310      	movs	r3, #16
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e07f      	b.n	80036e2 <UART_SetConfig+0x212>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5b      	ldr	r2, [pc, #364]	; (8003754 <UART_SetConfig+0x284>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d124      	bne.n	8003636 <UART_SetConfig+0x166>
 80035ec:	4b57      	ldr	r3, [pc, #348]	; (800374c <UART_SetConfig+0x27c>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035f8:	d011      	beq.n	800361e <UART_SetConfig+0x14e>
 80035fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035fe:	d817      	bhi.n	8003630 <UART_SetConfig+0x160>
 8003600:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003604:	d011      	beq.n	800362a <UART_SetConfig+0x15a>
 8003606:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800360a:	d811      	bhi.n	8003630 <UART_SetConfig+0x160>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <UART_SetConfig+0x148>
 8003610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003614:	d006      	beq.n	8003624 <UART_SetConfig+0x154>
 8003616:	e00b      	b.n	8003630 <UART_SetConfig+0x160>
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e061      	b.n	80036e2 <UART_SetConfig+0x212>
 800361e:	2302      	movs	r3, #2
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e05e      	b.n	80036e2 <UART_SetConfig+0x212>
 8003624:	2304      	movs	r3, #4
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e05b      	b.n	80036e2 <UART_SetConfig+0x212>
 800362a:	2308      	movs	r3, #8
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e058      	b.n	80036e2 <UART_SetConfig+0x212>
 8003630:	2310      	movs	r3, #16
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e055      	b.n	80036e2 <UART_SetConfig+0x212>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a47      	ldr	r2, [pc, #284]	; (8003758 <UART_SetConfig+0x288>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d124      	bne.n	800368a <UART_SetConfig+0x1ba>
 8003640:	4b42      	ldr	r3, [pc, #264]	; (800374c <UART_SetConfig+0x27c>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800364c:	d011      	beq.n	8003672 <UART_SetConfig+0x1a2>
 800364e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003652:	d817      	bhi.n	8003684 <UART_SetConfig+0x1b4>
 8003654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003658:	d011      	beq.n	800367e <UART_SetConfig+0x1ae>
 800365a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800365e:	d811      	bhi.n	8003684 <UART_SetConfig+0x1b4>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <UART_SetConfig+0x19c>
 8003664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003668:	d006      	beq.n	8003678 <UART_SetConfig+0x1a8>
 800366a:	e00b      	b.n	8003684 <UART_SetConfig+0x1b4>
 800366c:	2300      	movs	r3, #0
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e037      	b.n	80036e2 <UART_SetConfig+0x212>
 8003672:	2302      	movs	r3, #2
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e034      	b.n	80036e2 <UART_SetConfig+0x212>
 8003678:	2304      	movs	r3, #4
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e031      	b.n	80036e2 <UART_SetConfig+0x212>
 800367e:	2308      	movs	r3, #8
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e02e      	b.n	80036e2 <UART_SetConfig+0x212>
 8003684:	2310      	movs	r3, #16
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e02b      	b.n	80036e2 <UART_SetConfig+0x212>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a33      	ldr	r2, [pc, #204]	; (800375c <UART_SetConfig+0x28c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d124      	bne.n	80036de <UART_SetConfig+0x20e>
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <UART_SetConfig+0x27c>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800369c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a0:	d011      	beq.n	80036c6 <UART_SetConfig+0x1f6>
 80036a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a6:	d817      	bhi.n	80036d8 <UART_SetConfig+0x208>
 80036a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ac:	d011      	beq.n	80036d2 <UART_SetConfig+0x202>
 80036ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b2:	d811      	bhi.n	80036d8 <UART_SetConfig+0x208>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <UART_SetConfig+0x1f0>
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036bc:	d006      	beq.n	80036cc <UART_SetConfig+0x1fc>
 80036be:	e00b      	b.n	80036d8 <UART_SetConfig+0x208>
 80036c0:	2300      	movs	r3, #0
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e00d      	b.n	80036e2 <UART_SetConfig+0x212>
 80036c6:	2302      	movs	r3, #2
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e00a      	b.n	80036e2 <UART_SetConfig+0x212>
 80036cc:	2304      	movs	r3, #4
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e007      	b.n	80036e2 <UART_SetConfig+0x212>
 80036d2:	2308      	movs	r3, #8
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e004      	b.n	80036e2 <UART_SetConfig+0x212>
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e001      	b.n	80036e2 <UART_SetConfig+0x212>
 80036de:	2310      	movs	r3, #16
 80036e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ea:	d16c      	bne.n	80037c6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d838      	bhi.n	8003764 <UART_SetConfig+0x294>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0x228>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003725 	.word	0x08003725
 8003700:	0800372d 	.word	0x0800372d
 8003704:	08003765 	.word	0x08003765
 8003708:	08003733 	.word	0x08003733
 800370c:	08003765 	.word	0x08003765
 8003710:	08003765 	.word	0x08003765
 8003714:	08003765 	.word	0x08003765
 8003718:	0800373b 	.word	0x0800373b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7fe fe98 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8003720:	61b8      	str	r0, [r7, #24]
        break;
 8003722:	e024      	b.n	800376e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe feb6 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003728:	61b8      	str	r0, [r7, #24]
        break;
 800372a:	e020      	b.n	800376e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <UART_SetConfig+0x290>)
 800372e:	61bb      	str	r3, [r7, #24]
        break;
 8003730:	e01d      	b.n	800376e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003732:	f7fe fe17 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003736:	61b8      	str	r0, [r7, #24]
        break;
 8003738:	e019      	b.n	800376e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373e:	61bb      	str	r3, [r7, #24]
        break;
 8003740:	e015      	b.n	800376e <UART_SetConfig+0x29e>
 8003742:	bf00      	nop
 8003744:	efff69f3 	.word	0xefff69f3
 8003748:	40013800 	.word	0x40013800
 800374c:	40021000 	.word	0x40021000
 8003750:	40004400 	.word	0x40004400
 8003754:	40004800 	.word	0x40004800
 8003758:	40004c00 	.word	0x40004c00
 800375c:	40005000 	.word	0x40005000
 8003760:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	77bb      	strb	r3, [r7, #30]
        break;
 800376c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d075      	beq.n	8003860 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	005a      	lsls	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	441a      	add	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	b29b      	uxth	r3, r3
 800378a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d916      	bls.n	80037c0 <UART_SetConfig+0x2f0>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d212      	bcs.n	80037c0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	b29b      	uxth	r3, r3
 800379e:	f023 030f 	bic.w	r3, r3, #15
 80037a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	e04f      	b.n	8003860 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	77bb      	strb	r3, [r7, #30]
 80037c4:	e04c      	b.n	8003860 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d828      	bhi.n	800381e <UART_SetConfig+0x34e>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x304>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fe2a 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e013      	b.n	8003828 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fe48 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <UART_SetConfig+0x3a8>)
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe fda9 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003812:	61b8      	str	r0, [r7, #24]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77bb      	strb	r3, [r7, #30]
        break;
 8003826:	bf00      	nop
    }

    if (pclk != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085a      	lsrs	r2, r3, #1
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d908      	bls.n	800385c <UART_SetConfig+0x38c>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d204      	bcs.n	800385c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	e001      	b.n	8003860 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800386c:	7fbb      	ldrb	r3, [r7, #30]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	007a1200 	.word	0x007a1200

0800387c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01a      	beq.n	8003992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397a:	d10a      	bne.n	8003992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039d0:	f7fd f864 	bl	8000a9c <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d10e      	bne.n	8003a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f82d 	bl	8003a52 <UART_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e023      	b.n	8003a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d10e      	bne.n	8003a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f817 	bl	8003a52 <UART_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00d      	b.n	8003a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b09c      	sub	sp, #112	; 0x70
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a62:	e0a5      	b.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	f000 80a1 	beq.w	8003bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fd f815 	bl	8000a9c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d13e      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a98:	667b      	str	r3, [r7, #100]	; 0x64
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e6      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ad6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e067      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d04f      	beq.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1e:	d147      	bne.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b7c:	623a      	str	r2, [r7, #32]
 8003b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69f9      	ldr	r1, [r7, #28]
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e010      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	f43f af4a 	beq.w	8003a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3770      	adds	r7, #112	; 0x70
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	; (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	; (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 f82e 	bl	8003c50 <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08003d1c 	.word	0x08003d1c
 8003c18:	08003d1c 	.word	0x08003d1c
 8003c1c:	08003d1c 	.word	0x08003d1c
 8003c20:	08003d20 	.word	0x08003d20

08003c24 <memcpy>:
 8003c24:	440a      	add	r2, r1
 8003c26:	4291      	cmp	r1, r2
 8003c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c2c:	d100      	bne.n	8003c30 <memcpy+0xc>
 8003c2e:	4770      	bx	lr
 8003c30:	b510      	push	{r4, lr}
 8003c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c3a:	4291      	cmp	r1, r2
 8003c3c:	d1f9      	bne.n	8003c32 <memcpy+0xe>
 8003c3e:	bd10      	pop	{r4, pc}

08003c40 <memset>:
 8003c40:	4402      	add	r2, r0
 8003c42:	4603      	mov	r3, r0
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d100      	bne.n	8003c4a <memset+0xa>
 8003c48:	4770      	bx	lr
 8003c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4e:	e7f9      	b.n	8003c44 <memset+0x4>

08003c50 <_init>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr

08003c5c <_fini>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr
