
86178 SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d48  08003d48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d48  08003d48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000108  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019bf  00000000  00000000  0002bd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002dff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f42e  00000000  00000000  0002e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf7f  00000000  00000000  0004dc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be4b7  00000000  00000000  00059bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118094  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023a8  00000000  00000000  001180e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003cec 	.word	0x08003cec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003cec 	.word	0x08003cec

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t statusbuf = "a";
 80001da:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <main+0xcc>)
 80001dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fad5 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f867 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f92f 	bl	8000448 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ea:	f000 f8fd 	bl	80003e8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80001ee:	f000 f8bd 	bl	800036c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

   uint8_t tx1[3]={0xC0,0x00,0x70};
 80001f2:	4a2c      	ldr	r2, [pc, #176]	; (80002a4 <main+0xd0>)
 80001f4:	f107 030c 	add.w	r3, r7, #12
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	4611      	mov	r1, r2
 80001fc:	8019      	strh	r1, [r3, #0]
 80001fe:	3302      	adds	r3, #2
 8000200:	0c12      	lsrs	r2, r2, #16
 8000202:	701a      	strb	r2, [r3, #0]
   uint8_t tx2[3]={0xC0,0x80,0xff};
 8000204:	4a28      	ldr	r2, [pc, #160]	; (80002a8 <main+0xd4>)
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	6812      	ldr	r2, [r2, #0]
 800020c:	4611      	mov	r1, r2
 800020e:	8019      	strh	r1, [r3, #0]
 8000210:	3302      	adds	r3, #2
 8000212:	0c12      	lsrs	r2, r2, #16
 8000214:	701a      	strb	r2, [r3, #0]
   uint8_t rx[3];
   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2108      	movs	r1, #8
 800021a:	4824      	ldr	r0, [pc, #144]	; (80002ac <main+0xd8>)
 800021c:	f000 fdf6 	bl	8000e0c <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2108      	movs	r1, #8
 8000224:	4821      	ldr	r0, [pc, #132]	; (80002ac <main+0xd8>)
 8000226:	f000 fdf1 	bl	8000e0c <HAL_GPIO_WritePin>
   HAL_SPI_TransmitReceive(&hspi2, tx2, rx, 3, 1000);
 800022a:	1d3a      	adds	r2, r7, #4
 800022c:	f107 0108 	add.w	r1, r7, #8
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2303      	movs	r3, #3
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <main+0xdc>)
 800023a:	f002 fcc0 	bl	8002bbe <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2108      	movs	r1, #8
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <main+0xd8>)
 8000244:	f000 fde2 	bl	8000e0c <HAL_GPIO_WritePin>


   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2108      	movs	r1, #8
 800024c:	4817      	ldr	r0, [pc, #92]	; (80002ac <main+0xd8>)
 800024e:	f000 fddd 	bl	8000e0c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(&hspi2, tx1, 3, 1000);
 8000252:	f107 010c 	add.w	r1, r7, #12
 8000256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800025a:	2203      	movs	r2, #3
 800025c:	4814      	ldr	r0, [pc, #80]	; (80002b0 <main+0xdc>)
 800025e:	f002 fb40 	bl	80028e2 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2108      	movs	r1, #8
 8000266:	4811      	ldr	r0, [pc, #68]	; (80002ac <main+0xd8>)
 8000268:	f000 fdd0 	bl	8000e0c <HAL_GPIO_WritePin>


   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2108      	movs	r1, #8
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <main+0xd8>)
 8000272:	f000 fdcb 	bl	8000e0c <HAL_GPIO_WritePin>
   HAL_SPI_TransmitReceive(&hspi2, tx2, rx, 3, 1000);
 8000276:	1d3a      	adds	r2, r7, #4
 8000278:	f107 0108 	add.w	r1, r7, #8
 800027c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2303      	movs	r3, #3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <main+0xdc>)
 8000286:	f002 fc9a 	bl	8002bbe <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2108      	movs	r1, #8
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <main+0xd8>)
 8000290:	f000 fdbc 	bl	8000e0c <HAL_GPIO_WritePin>
 8000294:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000296:	4618      	mov	r0, r3
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	08003d04 	.word	0x08003d04
 80002a4:	08003d08 	.word	0x08003d08
 80002a8:	08003d0c 	.word	0x08003d0c
 80002ac:	48000800 	.word	0x48000800
 80002b0:	20000028 	.word	0x20000028

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b0a6      	sub	sp, #152	; 0x98
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fd0a 	bl	8003cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2258      	movs	r2, #88	; 0x58
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fcfc 	bl	8003cdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2302      	movs	r3, #2
 80002e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	2310      	movs	r3, #16
 80002ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000300:	2300      	movs	r3, #0
 8000302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fd93 	bl	8000e3c <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800031c:	f000 f90e 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	230f      	movs	r3, #15
 8000322:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000324:	2302      	movs	r3, #2
 8000326:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000334:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fdd2 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000346:	f000 f8f9 	bl	800053c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800034a:	2302      	movs	r3, #2
 800034c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f001 fffb 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000360:	f000 f8ec 	bl	800053c <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3798      	adds	r7, #152	; 0x98
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_SPI2_Init+0x74>)
 8000372:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <MX_SPI2_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_SPI2_Init+0x74>)
 8000378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800037c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_SPI2_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_SPI2_Init+0x74>)
 8000386:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800038a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_SPI2_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_SPI2_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_SPI2_Init+0x74>)
 800039a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800039e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003a2:	2220      	movs	r2, #32
 80003a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_SPI2_Init+0x74>)
 80003cc:	f002 f9de 	bl	800278c <HAL_SPI_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80003d6:	f000 f8b1 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40003800 	.word	0x40003800

080003e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_USART2_UART_Init+0x58>)
 80003ee:	4a15      	ldr	r2, [pc, #84]	; (8000444 <MX_USART2_UART_Init+0x5c>)
 80003f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_USART2_UART_Init+0x58>)
 80003f4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_USART2_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART2_UART_Init+0x58>)
 800040e:	220c      	movs	r2, #12
 8000410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART2_UART_Init+0x58>)
 800042c:	f003 f85e 	bl	80034ec <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000436:	f000 f881 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2000008c 	.word	0x2000008c
 8000444:	40004400 	.word	0x40004400

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <MX_GPIO_Init+0xec>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a34      	ldr	r2, [pc, #208]	; (8000534 <MX_GPIO_Init+0xec>)
 8000464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b32      	ldr	r3, [pc, #200]	; (8000534 <MX_GPIO_Init+0xec>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000476:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <MX_GPIO_Init+0xec>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a2e      	ldr	r2, [pc, #184]	; (8000534 <MX_GPIO_Init+0xec>)
 800047c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <MX_GPIO_Init+0xec>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b29      	ldr	r3, [pc, #164]	; (8000534 <MX_GPIO_Init+0xec>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a28      	ldr	r2, [pc, #160]	; (8000534 <MX_GPIO_Init+0xec>)
 8000494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b26      	ldr	r3, [pc, #152]	; (8000534 <MX_GPIO_Init+0xec>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_GPIO_Init+0xec>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a22      	ldr	r2, [pc, #136]	; (8000534 <MX_GPIO_Init+0xec>)
 80004ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_GPIO_Init+0xec>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2108      	movs	r1, #8
 80004c2:	481d      	ldr	r0, [pc, #116]	; (8000538 <MX_GPIO_Init+0xf0>)
 80004c4:	f000 fca2 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2120      	movs	r1, #32
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f000 fc9c 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4619      	mov	r1, r3
 80004ea:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_GPIO_Init+0xf0>)
 80004ec:	f000 fb04 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004f0:	2308      	movs	r3, #8
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_GPIO_Init+0xf0>)
 8000508:	f000 faf6 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800050c:	2320      	movs	r3, #32
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fae7 	bl	8000af8 <HAL_GPIO_Init>

}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	; 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	48000800 	.word	0x48000800

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	e7fe      	b.n	8000544 <Error_Handler+0x8>
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <HAL_MspInit+0x44>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_MspInit+0x44>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <HAL_MspInit+0x44>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_MspInit+0x44>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800057e:	2007      	movs	r0, #7
 8000580:	f000 fa3a 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <HAL_SPI_MspInit+0x8c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d130      	bne.n	8000614 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_SPI_MspInit+0x90>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <HAL_SPI_MspInit+0x90>)
 80005b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_SPI_MspInit+0x90>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_SPI_MspInit+0x90>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_SPI_MspInit+0x90>)
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_SPI_MspInit+0x90>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f4:	2305      	movs	r3, #5
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4809      	ldr	r0, [pc, #36]	; (8000624 <HAL_SPI_MspInit+0x94>)
 8000600:	f000 fa7a 	bl	8000af8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2024      	movs	r0, #36	; 0x24
 800060a:	f000 fa00 	bl	8000a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800060e:	2024      	movs	r0, #36	; 0x24
 8000610:	f000 fa19 	bl	8000a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40003800 	.word	0x40003800
 8000620:	40021000 	.word	0x40021000
 8000624:	48000400 	.word	0x48000400

08000628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <HAL_UART_MspInit+0x7c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d128      	bne.n	800069c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_UART_MspInit+0x80>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_UART_MspInit+0x80>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_UART_MspInit+0x80>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_UART_MspInit+0x80>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_UART_MspInit+0x80>)
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_UART_MspInit+0x80>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800067a:	230c      	movs	r3, #12
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068a:	2307      	movs	r3, #7
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f000 fa2e 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	; 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40021000 	.word	0x40021000

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler+0x4>

080006be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler+0x4>

080006ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f8:	f000 f88e 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <SPI2_IRQHandler+0x10>)
 8000706:	f002 fc6d 	bl	8002fe4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028

08000714 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SystemInit+0x20>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <SystemInit+0x20>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000770 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490e      	ldr	r1, [pc, #56]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000762:	f7ff ffd7 	bl	8000714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f003 fa95 	bl	8003c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076a:	f7ff fd33 	bl	80001d4 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000770:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800077c:	08003d50 	.word	0x08003d50
  ldr r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000784:	20000114 	.word	0x20000114

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_Init+0x28>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_Init+0x28>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f92b 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f808 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a8:	f7ff fece 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40022000 	.word	0x40022000

080007b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x54>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x58>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f943 	bl	8000a62 <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00e      	b.n	8000804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d80a      	bhi.n	8000802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f000 f90b 	bl	8000a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_InitTick+0x5c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	20000008 	.word	0x20000008
 8000814:	20000004 	.word	0x20000004

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_IncTick+0x20>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_IncTick+0x24>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_IncTick+0x24>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000008 	.word	0x20000008
 800083c:	20000110 	.word	0x20000110

08000840 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;  
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_GetTick+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000110 	.word	0x20000110

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0b      	blt.n	80008e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 021f 	and.w	r2, r3, #31
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <__NVIC_EnableIRQ+0x38>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	2001      	movs	r0, #1
 80008de:	fa00 f202 	lsl.w	r2, r0, r2
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff29 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff3e 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff8e 	bl	800094c <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff31 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffa2 	bl	80009b4 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d005      	beq.n	8000a9c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2204      	movs	r2, #4
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e027      	b.n	8000aec <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 020e 	bic.w	r2, r2, #14
 8000aaa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 0201 	bic.w	r2, r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	4798      	blx	r3
    } 
  }
  return status;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	e160      	b.n	8000dca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8152 	beq.w	8000dc4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d005      	beq.n	8000b38 <HAL_GPIO_Init+0x40>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d130      	bne.n	8000b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	f003 0201 	and.w	r2, r3, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d017      	beq.n	8000bd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d123      	bne.n	8000c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	6939      	ldr	r1, [r7, #16]
 8000c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0203 	and.w	r2, r3, #3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80ac 	beq.w	8000dc4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6c:	4b5e      	ldr	r3, [pc, #376]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a5d      	ldr	r2, [pc, #372]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b5b      	ldr	r3, [pc, #364]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c84:	4a59      	ldr	r2, [pc, #356]	; (8000dec <HAL_GPIO_Init+0x2f4>)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cae:	d025      	beq.n	8000cfc <HAL_GPIO_Init+0x204>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a4f      	ldr	r2, [pc, #316]	; (8000df0 <HAL_GPIO_Init+0x2f8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d01f      	beq.n	8000cf8 <HAL_GPIO_Init+0x200>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <HAL_GPIO_Init+0x2fc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d019      	beq.n	8000cf4 <HAL_GPIO_Init+0x1fc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x300>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_GPIO_Init+0x1f8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_GPIO_Init+0x304>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00d      	beq.n	8000cec <HAL_GPIO_Init+0x1f4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <HAL_GPIO_Init+0x308>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a4a      	ldr	r2, [pc, #296]	; (8000e04 <HAL_GPIO_Init+0x30c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_Init+0x1ec>
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	e00c      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	e00a      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000ce8:	2305      	movs	r3, #5
 8000cea:	e008      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_Init+0x206>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d0e:	4937      	ldr	r1, [pc, #220]	; (8000dec <HAL_GPIO_Init+0x2f4>)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d1c:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d40:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d6a:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f ae97 	bne.w	8000b08 <HAL_GPIO_Init+0x10>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800
 8000df8:	48000c00 	.word	0x48000c00
 8000dfc:	48001000 	.word	0x48001000
 8000e00:	48001400 	.word	0x48001400
 8000e04:	48001800 	.word	0x48001800
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f001 b83a 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 816f 	beq.w	8001156 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e78:	4bb5      	ldr	r3, [pc, #724]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d00c      	beq.n	8000e9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e84:	4bb2      	ldr	r3, [pc, #712]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d15c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x10e>
 8000e90:	4baf      	ldr	r3, [pc, #700]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9c:	d155      	bne.n	8000f4a <HAL_RCC_OscConfig+0x10e>
 8000e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	095b      	lsrs	r3, r3, #5
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d102      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x94>
 8000eca:	4ba1      	ldr	r3, [pc, #644]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	e015      	b.n	8000efc <HAL_RCC_OscConfig+0xc0>
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000eec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ef8:	4b95      	ldr	r3, [pc, #596]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f00:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f04:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f08:	fa92 f2a2 	rbit	r2, r2
 8000f0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f14:	fab2 f282 	clz	r2, r2
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	f042 0220 	orr.w	r2, r2, #32
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	f002 021f 	and.w	r2, r2, #31
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 8111 	beq.w	8001154 <HAL_RCC_OscConfig+0x318>
 8000f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 8108 	bne.w	8001154 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f000 bfc6 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12e>
 8000f5c:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e036      	b.n	8000fd8 <HAL_RCC_OscConfig+0x19c>
 8000f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x158>
 8000f7a:	4b75      	ldr	r3, [pc, #468]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a74      	ldr	r2, [pc, #464]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b72      	ldr	r3, [pc, #456]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a71      	ldr	r2, [pc, #452]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e021      	b.n	8000fd8 <HAL_RCC_OscConfig+0x19c>
 8000f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x184>
 8000fa6:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a69      	ldr	r2, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a66      	ldr	r2, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x19c>
 8000fc0:	4b63      	ldr	r3, [pc, #396]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a62      	ldr	r2, [pc, #392]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b60      	ldr	r3, [pc, #384]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a5f      	ldr	r2, [pc, #380]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d059      	beq.n	800109c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc2a 	bl	8000840 <HAL_GetTick>
 8000fec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fc25 	bl	8000840 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d902      	bls.n	8001008 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	f000 bf67 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800101c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d102      	bne.n	800103a <HAL_RCC_OscConfig+0x1fe>
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	e015      	b.n	8001066 <HAL_RCC_OscConfig+0x22a>
 800103a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800104e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001052:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001056:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800106e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800107a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800107e:	fab2 f282 	clz	r2, r2
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0ab      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1b6>
 800109a:	e05c      	b.n	8001156 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fbd0 	bl	8000840 <HAL_GetTick>
 80010a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fbcb 	bl	8000840 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d902      	bls.n	80010bc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f000 bf0d 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
 80010bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80010d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_OscConfig+0x2b2>
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x2de>
 80010ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001106:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800110a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_RCC_OscConfig+0x314>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001122:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001126:	fa92 f2a2 	rbit	r2, r2
 800112a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800112e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f042 0220 	orr.w	r2, r2, #32
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f002 021f 	and.w	r2, r2, #31
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ab      	bne.n	80010a6 <HAL_RCC_OscConfig+0x26a>
 800114e:	e002      	b.n	8001156 <HAL_RCC_OscConfig+0x31a>
 8001150:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800115a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 817f 	beq.w	800146a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800116c:	4ba7      	ldr	r3, [pc, #668]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001178:	4ba4      	ldr	r3, [pc, #656]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d173      	bne.n	800126c <HAL_RCC_OscConfig+0x430>
 8001184:	4ba1      	ldr	r3, [pc, #644]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800118c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001190:	d16c      	bne.n	800126c <HAL_RCC_OscConfig+0x430>
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80011a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a8:	fab3 f383 	clz	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <HAL_RCC_OscConfig+0x386>
 80011bc:	4b93      	ldr	r3, [pc, #588]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	e013      	b.n	80011ea <HAL_RCC_OscConfig+0x3ae>
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	2202      	movs	r2, #2
 80011ec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011f4:	fa92 f2a2 	rbit	r2, r2
 80011f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001200:	fab2 f282 	clz	r2, r2
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	f042 0220 	orr.w	r2, r2, #32
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	f002 021f 	and.w	r2, r2, #31
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <HAL_RCC_OscConfig+0x3f6>
 800121c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d002      	beq.n	8001232 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	f000 be52 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800123e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	21f8      	movs	r1, #248	; 0xf8
 8001248:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001250:	fa91 f1a1 	rbit	r1, r1
 8001254:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001258:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800125c:	fab1 f181 	clz	r1, r1
 8001260:	b2c9      	uxtb	r1, r1
 8001262:	408b      	lsls	r3, r1
 8001264:	4969      	ldr	r1, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e0fe      	b.n	800146a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8088 	beq.w	800138e <HAL_RCC_OscConfig+0x552>
 800127e:	2301      	movs	r3, #1
 8001280:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001290:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800129e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	461a      	mov	r2, r3
 80012a6:	2301      	movs	r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fac9 	bl	8000840 <HAL_GetTick>
 80012ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fac4 	bl	8000840 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d902      	bls.n	80012ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f000 be06 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_OscConfig+0x4be>
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	e013      	b.n	8001322 <HAL_RCC_OscConfig+0x4e6>
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001312:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	2202      	movs	r2, #2
 8001324:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001328:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800132c:	fa92 f2a2 	rbit	r2, r2
 8001330:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001334:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001338:	fab2 f282 	clz	r2, r2
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	f042 0220 	orr.w	r2, r2, #32
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	f002 021f 	and.w	r2, r2, #31
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0af      	beq.n	80012b4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001360:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	21f8      	movs	r1, #248	; 0xf8
 800136a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001372:	fa91 f1a1 	rbit	r1, r1
 8001376:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800137a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800137e:	fab1 f181 	clz	r1, r1
 8001382:	b2c9      	uxtb	r1, r1
 8001384:	408b      	lsls	r3, r1
 8001386:	4921      	ldr	r1, [pc, #132]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e06d      	b.n	800146a <HAL_RCC_OscConfig+0x62e>
 800138e:	2301      	movs	r3, #1
 8001390:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80013a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	461a      	mov	r2, r3
 80013b6:	2300      	movs	r3, #0
 80013b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fa41 	bl	8000840 <HAL_GetTick>
 80013be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e00a      	b.n	80013da <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fa3c 	bl	8000840 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d902      	bls.n	80013da <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f000 bd7e 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_RCC_OscConfig+0x5d4>
 8001404:	4b01      	ldr	r3, [pc, #4]	; (800140c <HAL_RCC_OscConfig+0x5d0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	e016      	b.n	8001438 <HAL_RCC_OscConfig+0x5fc>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001428:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001434:	4bbf      	ldr	r3, [pc, #764]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2202      	movs	r2, #2
 800143a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800143e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001442:	fa92 f2a2 	rbit	r2, r2
 8001446:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800144a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f002 021f 	and.w	r2, r2, #31
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ac      	bne.n	80013c4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8113 	beq.w	80016a6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001484:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d07c      	beq.n	800158a <HAL_RCC_OscConfig+0x74e>
 8001490:	2301      	movs	r3, #1
 8001492:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80014a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	4ba2      	ldr	r3, [pc, #648]	; (8001738 <HAL_RCC_OscConfig+0x8fc>)
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	461a      	mov	r2, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9c1 	bl	8000840 <HAL_GetTick>
 80014be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff f9bc 	bl	8000840 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d902      	bls.n	80014da <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f000 bcfe 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	fa93 f2a3 	rbit	r2, r3
 800150c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800151e:	2202      	movs	r2, #2
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fa93 f2a3 	rbit	r2, r3
 8001530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001534:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001538:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 800153c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001546:	2102      	movs	r1, #2
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f1a3 	rbit	r1, r3
 8001558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001560:	6019      	str	r1, [r3, #0]
  return result;
 8001562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001566:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d09d      	beq.n	80014c4 <HAL_RCC_OscConfig+0x688>
 8001588:	e08d      	b.n	80016a6 <HAL_RCC_OscConfig+0x86a>
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fa93 f2a3 	rbit	r2, r3
 80015a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ac:	601a      	str	r2, [r3, #0]
  return result;
 80015ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x8fc>)
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	461a      	mov	r2, r3
 80015c8:	2300      	movs	r3, #0
 80015ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff f938 	bl	8000840 <HAL_GetTick>
 80015d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff f933 	bl	8000840 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d902      	bls.n	80015ec <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f000 bc75 	b.w	8001ed6 <HAL_RCC_OscConfig+0x109a>
 80015ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001618:	2202      	movs	r2, #2
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f2a3 	rbit	r2, r3
 800162a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800163c:	2202      	movs	r2, #2
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001652:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001656:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 800165a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001660:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001664:	2102      	movs	r1, #2
 8001666:	6019      	str	r1, [r3, #0]
 8001668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f1a3 	rbit	r1, r3
 8001676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800167e:	6019      	str	r1, [r3, #0]
  return result;
 8001680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001684:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d197      	bne.n	80015d6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 81a5 	beq.w	8001a06 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_RCC_OscConfig+0x8f8>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_OscConfig+0x900>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d121      	bne.n	800174c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x900>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_RCC_OscConfig+0x900>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001714:	f7ff f894 	bl	8000840 <HAL_GetTick>
 8001718:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	e010      	b.n	8001740 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff f88f 	bl	8000840 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d908      	bls.n	8001740 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e3d1      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	10908120 	.word	0x10908120
 800173c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b8d      	ldr	r3, [pc, #564]	; (8001978 <HAL_RCC_OscConfig+0xb3c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0e8      	beq.n	800171e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001750:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x92e>
 800175c:	4b87      	ldr	r3, [pc, #540]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a86      	ldr	r2, [pc, #536]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	e035      	b.n	80017d6 <HAL_RCC_OscConfig+0x99a>
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x958>
 800177a:	4b80      	ldr	r3, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a7f      	ldr	r2, [pc, #508]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b7d      	ldr	r3, [pc, #500]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a7c      	ldr	r2, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	e020      	b.n	80017d6 <HAL_RCC_OscConfig+0x99a>
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x982>
 80017a4:	4b75      	ldr	r3, [pc, #468]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a74      	ldr	r2, [pc, #464]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	4b72      	ldr	r3, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a71      	ldr	r2, [pc, #452]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x99a>
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a6b      	ldr	r2, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8081 	beq.w	80018ea <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f82a 	bl	8000840 <HAL_GetTick>
 80017ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff f825 	bl	8000840 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e365      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
 800180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001836:	2202      	movs	r2, #2
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001850:	601a      	str	r2, [r3, #0]
  return result;
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800185a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0xa3a>
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	e013      	b.n	800189e <HAL_RCC_OscConfig+0xa62>
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001886:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018a6:	2102      	movs	r1, #2
 80018a8:	6011      	str	r1, [r2, #0]
 80018aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	fa92 f1a2 	rbit	r1, r2
 80018b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018bc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80018c0:	6011      	str	r1, [r2, #0]
  return result;
 80018c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018c6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fab2 f282 	clz	r2, r2
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f002 021f 	and.w	r2, r2, #31
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d084      	beq.n	80017f2 <HAL_RCC_OscConfig+0x9b6>
 80018e8:	e083      	b.n	80019f2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7fe ffa9 	bl	8000840 <HAL_GetTick>
 80018ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7fe ffa4 	bl	8000840 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e2e4      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001914:	2202      	movs	r2, #2
 8001916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001938:	2202      	movs	r2, #2
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001952:	601a      	str	r2, [r3, #0]
  return result;
 8001954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001958:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800195c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0xb44>
 8001972:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_RCC_OscConfig+0xb40>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	e017      	b.n	80019a8 <HAL_RCC_OscConfig+0xb6c>
 8001978:	40007000 	.word	0x40007000
 800197c:	40021000 	.word	0x40021000
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4bb3      	ldr	r3, [pc, #716]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019b0:	2102      	movs	r1, #2
 80019b2:	6011      	str	r1, [r2, #0]
 80019b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	fa92 f1a2 	rbit	r1, r2
 80019c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80019ca:	6011      	str	r1, [r2, #0]
  return result;
 80019cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019d0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	fab2 f282 	clz	r2, r2
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f002 021f 	and.w	r2, r2, #31
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d180      	bne.n	80018f4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019f2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a9d      	ldr	r2, [pc, #628]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 825e 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a18:	4b96      	ldr	r3, [pc, #600]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	f000 821f 	beq.w	8001e64 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	f040 8170 	bne.w	8001d18 <HAL_RCC_OscConfig+0xedc>
 8001a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a66:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fedf 	bl	8000840 <HAL_GetTick>
 8001a82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	e009      	b.n	8001a9c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe feda 	bl	8000840 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e21c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ac0:	601a      	str	r2, [r3, #0]
  return result;
 8001ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001aca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_OscConfig+0xcaa>
 8001ae0:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e027      	b.n	8001b36 <HAL_RCC_OscConfig+0xcfa>
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b3a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b42:	6011      	str	r1, [r2, #0]
 8001b44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b48:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	fa92 f1a2 	rbit	r1, r2
 8001b52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b56:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001b5a:	6011      	str	r1, [r2, #0]
  return result;
 8001b5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b60:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	fab2 f282 	clz	r2, r2
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f042 0220 	orr.w	r2, r2, #32
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f002 021f 	and.w	r2, r2, #31
 8001b76:	2101      	movs	r1, #1
 8001b78:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d182      	bne.n	8001a88 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b82:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f023 020f 	bic.w	r2, r3, #15
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	4937      	ldr	r1, [pc, #220]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a19      	ldr	r1, [r3, #32]
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001be8:	601a      	str	r2, [r3, #0]
  return result;
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bf2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	461a      	mov	r2, r3
 8001c06:	2301      	movs	r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fe19 	bl	8000840 <HAL_GetTick>
 8001c0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c12:	e009      	b.n	8001c28 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fe14 	bl	8000840 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e156      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c4c:	601a      	str	r2, [r3, #0]
  return result;
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0xe3c>
 8001c6c:	4b01      	ldr	r3, [pc, #4]	; (8001c74 <HAL_RCC_OscConfig+0xe38>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e02a      	b.n	8001cc8 <HAL_RCC_OscConfig+0xe8c>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4b86      	ldr	r3, [pc, #536]	; (8001ee0 <HAL_RCC_OscConfig+0x10a4>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ccc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fa92 f1a2 	rbit	r1, r2
 8001ce4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ce8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001cec:	6011      	str	r1, [r2, #0]
  return result;
 8001cee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f43f af7f 	beq.w	8001c14 <HAL_RCC_OscConfig+0xdd8>
 8001d16:	e0dd      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1098>
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d38:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d3c:	601a      	str	r2, [r3, #0]
  return result;
 8001d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d42:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d46:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fd6f 	bl	8000840 <HAL_GetTick>
 8001d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fd6a 	bl	8000840 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0ac      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001da0:	601a      	str	r2, [r3, #0]
  return result;
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001daa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xf8a>
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_OscConfig+0x10a4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e027      	b.n	8001e16 <HAL_RCC_OscConfig+0xfda>
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <HAL_RCC_OscConfig+0x10a4>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e1a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e22:	6011      	str	r1, [r2, #0]
 8001e24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	fa92 f1a2 	rbit	r1, r2
 8001e32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e36:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e3a:	6011      	str	r1, [r2, #0]
  return result;
 8001e3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e40:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d182      	bne.n	8001d68 <HAL_RCC_OscConfig+0xf2c>
 8001e62:	e037      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e02e      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_OscConfig+0x10a4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x10a4>)
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e8c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d117      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ea0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ea4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ebc:	f003 020f 	and.w	r2, r3, #15
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e162      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b90      	ldr	r3, [pc, #576]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b8d      	ldr	r3, [pc, #564]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	498b      	ldr	r1, [pc, #556]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e14a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	497f      	ldr	r1, [pc, #508]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80dc 	beq.w	8002110 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d13c      	bne.n	8001fda <HAL_RCC_ClockConfig+0xf6>
 8001f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xa6>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e00f      	b.n	8001faa <HAL_RCC_ClockConfig+0xc6>
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	667b      	str	r3, [r7, #100]	; 0x64
 8001f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d17b      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0f3      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d13c      	bne.n	800205c <HAL_RCC_ClockConfig+0x178>
 8001fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_ClockConfig+0x128>
 8002006:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e00f      	b.n	800202c <HAL_RCC_ClockConfig+0x148>
 800200c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	647b      	str	r3, [r7, #68]	; 0x44
 800201a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
 8002020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002030:	63ba      	str	r2, [r7, #56]	; 0x38
 8002032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800203a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d13a      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b2      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
 800205c:	2302      	movs	r3, #2
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1bc>
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2202      	movs	r2, #2
 80020a2:	61ba      	str	r2, [r7, #24]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	617a      	str	r2, [r7, #20]
  return result;
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e079      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	491a      	ldr	r1, [pc, #104]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fbae 	bl	8000840 <HAL_GetTick>
 80020e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fbaa 	bl	8000840 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e061      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d214      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4906      	ldr	r1, [pc, #24]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e040      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	491a      	ldr	r1, [pc, #104]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4912      	ldr	r1, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002186:	f000 f829 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	22f0      	movs	r2, #240	; 0xf0
 8002196:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	fa92 f2a2 	rbit	r2, r2
 800219e:	60fa      	str	r2, [r7, #12]
  return result;
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	40d3      	lsrs	r3, r2
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x2ec>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	fa21 f303 	lsr.w	r3, r1, r3
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x2f0>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_ClockConfig+0x2f4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fafc 	bl	80007b8 <HAL_InitTick>
  
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3778      	adds	r7, #120	; 0x78
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08003d10 	.word	0x08003d10
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x30>
 8002206:	2b08      	cmp	r3, #8
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x36>
 800220a:	e03f      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800220e:	623b      	str	r3, [r7, #32]
      break;
 8002210:	e03f      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002218:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800221c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	607a      	str	r2, [r7, #4]
  return result;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	40d3      	lsrs	r3, r2
 8002230:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	220f      	movs	r2, #15
 8002240:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	60fa      	str	r2, [r7, #12]
  return result;
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	fab2 f282 	clz	r2, r2
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	40d3      	lsrs	r3, r2
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	fbb2 f2f3 	udiv	r2, r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e007      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fbb2 f2f3 	udiv	r2, r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	623b      	str	r3, [r7, #32]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800228e:	623b      	str	r3, [r7, #32]
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6a3b      	ldr	r3, [r7, #32]
}
 8002294:	4618      	mov	r0, r3
 8002296:	372c      	adds	r7, #44	; 0x2c
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	08003d28 	.word	0x08003d28
 80022ac:	08003d38 	.word	0x08003d38

080022b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022ce:	f7ff ffef 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d2:	4601      	mov	r1, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	fa92 f2a2 	rbit	r2, r2
 80022e8:	603a      	str	r2, [r7, #0]
  return result;
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	40d3      	lsrs	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	08003d20 	.word	0x08003d20

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002312:	f7ff ffcd 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8002316:	4601      	mov	r1, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002324:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	fa92 f2a2 	rbit	r2, r2
 800232c:	603a      	str	r2, [r7, #0]
  return result;
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	fab2 f282 	clz	r2, r2
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	40d3      	lsrs	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_RCC_GetPCLK2Freq+0x40>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08003d20 	.word	0x08003d20

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b092      	sub	sp, #72	; 0x48
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80d4 	beq.w	800251c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002374:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10e      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a41      	ldr	r2, [pc, #260]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fa43 	bl	8000840 <HAL_GetTick>
 80023ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe fa3f 	bl	8000840 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e1d6      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8084 	beq.w	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d07c      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2301      	movs	r3, #1
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	461a      	mov	r2, r3
 800244a:	2300      	movs	r3, #0
 800244c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d04b      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe f9ef 	bl	8000840 <HAL_GetTick>
 8002462:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe f9eb 	bl	8000840 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e180      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	2302      	movs	r3, #2
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	61fb      	str	r3, [r7, #28]
  return result;
 8002494:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d108      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024aa:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	e00d      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
 80024b8:	10908100 	.word	0x10908100
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	4b9a      	ldr	r3, [pc, #616]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	2202      	movs	r2, #2
 80024ce:	613a      	str	r2, [r7, #16]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	fa92 f2a2 	rbit	r2, r2
 80024d6:	60fa      	str	r2, [r7, #12]
  return result;
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	fab2 f282 	clz	r2, r2
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	f002 021f 	and.w	r2, r2, #31
 80024ea:	2101      	movs	r1, #1
 80024ec:	fa01 f202 	lsl.w	r2, r1, r2
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0b7      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024f6:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	498c      	ldr	r1, [pc, #560]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002508:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4a87      	ldr	r2, [pc, #540]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002528:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f023 0203 	bic.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	497f      	ldr	r1, [pc, #508]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002546:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	4978      	ldr	r1, [pc, #480]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002564:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	4970      	ldr	r1, [pc, #448]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002582:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f023 0210 	bic.w	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4969      	ldr	r1, [pc, #420]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	4961      	ldr	r1, [pc, #388]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f023 0220 	bic.w	r2, r3, #32
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	495a      	ldr	r1, [pc, #360]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	4952      	ldr	r1, [pc, #328]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025fa:	4b4e      	ldr	r3, [pc, #312]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	494b      	ldr	r1, [pc, #300]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4943      	ldr	r1, [pc, #268]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	493c      	ldr	r1, [pc, #240]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	4934      	ldr	r1, [pc, #208]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	492d      	ldr	r1, [pc, #180]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269c:	4925      	ldr	r1, [pc, #148]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	491e      	ldr	r1, [pc, #120]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	4916      	ldr	r1, [pc, #88]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	490f      	ldr	r1, [pc, #60]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	4907      	ldr	r1, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002726:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	e002      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273a:	4913      	ldr	r1, [pc, #76]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800273c:	4313      	orrs	r3, r2
 800273e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	490b      	ldr	r1, [pc, #44]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800275a:	4313      	orrs	r3, r2
 800275c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002776:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002778:	4313      	orrs	r3, r2
 800277a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3748      	adds	r7, #72	; 0x48
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e09d      	b.n	80028da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ae:	d009      	beq.n	80027c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
 80027b6:	e005      	b.n	80027c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fd fed6 	bl	8000590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002804:	d902      	bls.n	800280c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e002      	b.n	8002812 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002810:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800281a:	d007      	beq.n	800282c <HAL_SPI_Init+0xa0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002824:	d002      	beq.n	800282c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	ea42 0103 	orr.w	r1, r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	f003 0204 	and.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b088      	sub	sp, #32
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_SPI_Transmit+0x22>
 8002900:	2302      	movs	r3, #2
 8002902:	e158      	b.n	8002bb6 <HAL_SPI_Transmit+0x2d4>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800290c:	f7fd ff98 	bl	8000840 <HAL_GetTick>
 8002910:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002922:	2302      	movs	r3, #2
 8002924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002926:	e13d      	b.n	8002ba4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Transmit+0x52>
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002938:	e134      	b.n	8002ba4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2203      	movs	r2, #3
 800293e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	88fa      	ldrh	r2, [r7, #6]
 8002958:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002984:	d10f      	bne.n	80029a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002994:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d007      	beq.n	80029c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029cc:	d94b      	bls.n	8002a66 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Transmit+0xfa>
 80029d6:	8afb      	ldrh	r3, [r7, #22]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d13e      	bne.n	8002a5a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	1c9a      	adds	r2, r3, #2
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a00:	e02b      	b.n	8002a5a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d112      	bne.n	8002a36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	1c9a      	adds	r2, r3, #2
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a34:	e011      	b.n	8002a5a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a36:	f7fd ff03 	bl	8000840 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d803      	bhi.n	8002a4e <HAL_SPI_Transmit+0x16c>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d102      	bne.n	8002a54 <HAL_SPI_Transmit+0x172>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a58:	e0a4      	b.n	8002ba4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ce      	bne.n	8002a02 <HAL_SPI_Transmit+0x120>
 8002a64:	e07c      	b.n	8002b60 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_Transmit+0x192>
 8002a6e:	8afb      	ldrh	r3, [r7, #22]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d170      	bne.n	8002b56 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d912      	bls.n	8002aa4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b02      	subs	r3, #2
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aa2:	e058      	b.n	8002b56 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002aca:	e044      	b.n	8002b56 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d12b      	bne.n	8002b32 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d912      	bls.n	8002b0a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	881a      	ldrh	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	1c9a      	adds	r2, r3, #2
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b02      	subs	r3, #2
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b08:	e025      	b.n	8002b56 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b30:	e011      	b.n	8002b56 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b32:	f7fd fe85 	bl	8000840 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d803      	bhi.n	8002b4a <HAL_SPI_Transmit+0x268>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d102      	bne.n	8002b50 <HAL_SPI_Transmit+0x26e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b54:	e026      	b.n	8002ba4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1b5      	bne.n	8002acc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fc7b 	bl	8003460 <SPI_EndRxTxTransaction>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]
 8002ba0:	e000      	b.n	8002ba4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x26>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e1fb      	b.n	8002fdc <HAL_SPI_TransmitReceive+0x41e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bec:	f7fd fe28 	bl	8000840 <HAL_GetTick>
 8002bf0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bf8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c08:	7efb      	ldrb	r3, [r7, #27]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d00e      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x6e>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c14:	d106      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x66>
 8002c1e:	7efb      	ldrb	r3, [r7, #27]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d003      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c2a:	e1cd      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x80>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x80>
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c44:	e1c0      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d003      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2205      	movs	r2, #5
 8002c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	887a      	ldrh	r2, [r7, #2]
 8002c86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_SPI_TransmitReceive+0xe6>
 8002c9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d908      	bls.n	8002cb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	e007      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cc4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d007      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cec:	d97c      	bls.n	8002de8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0x13e>
 8002cf6:	8a7b      	ldrh	r3, [r7, #18]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d169      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	881a      	ldrh	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	1c9a      	adds	r2, r3, #2
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d20:	e056      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x1aa>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x1aa>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d113      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	881a      	ldrh	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d11c      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x1f2>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	1c9a      	adds	r2, r3, #2
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dac:	2301      	movs	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db0:	f7fd fd46 	bl	8000840 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d807      	bhi.n	8002dd0 <HAL_SPI_TransmitReceive+0x212>
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d003      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dce:	e0fb      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1a3      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x164>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d19d      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x164>
 8002de6:	e0df      	b.n	8002fa8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x23a>
 8002df0:	8a7b      	ldrh	r3, [r7, #18]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f040 80cb 	bne.w	8002f8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d912      	bls.n	8002e28 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	1c9a      	adds	r2, r3, #2
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b02      	subs	r3, #2
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e26:	e0b2      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	7812      	ldrb	r2, [r2, #0]
 8002e34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e4e:	e09e      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d134      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x30a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02f      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x30a>
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d12c      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d912      	bls.n	8002e9e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b02      	subs	r3, #2
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e9c:	e012      	b.n	8002ec4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d148      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x3aa>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d042      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d923      	bls.n	8002f36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	1c9a      	adds	r2, r3, #2
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b02      	subs	r3, #2
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d81f      	bhi.n	8002f64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	e016      	b.n	8002f64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f103 020c 	add.w	r2, r3, #12
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f68:	f7fd fc6a 	bl	8000840 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d803      	bhi.n	8002f80 <HAL_SPI_TransmitReceive+0x3c2>
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d102      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x3c8>
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f8c:	e01c      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f af5b 	bne.w	8002e50 <HAL_SPI_TransmitReceive+0x292>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f47f af54 	bne.w	8002e50 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fa57 	bl	8003460 <SPI_EndRxTxTransaction>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60
 8002fc4:	e000      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3728      	adds	r7, #40	; 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
    return;
 8003026:	e0d7      	b.n	80031d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_SPI_IRQHandler+0x66>
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	09db      	lsrs	r3, r3, #7
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
    return;
 8003048:	e0c6      	b.n	80031d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10c      	bne.n	8003070 <HAL_SPI_IRQHandler+0x8c>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80b4 	beq.w	80031d8 <HAL_SPI_IRQHandler+0x1f4>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80ad 	beq.w	80031d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d023      	beq.n	80030d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b03      	cmp	r3, #3
 8003094:	d011      	beq.n	80030ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	e00b      	b.n	80030d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
        return;
 80030d0:	e082      	b.n	80031d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d014      	beq.n	8003108 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e2:	f043 0201 	orr.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00c      	beq.n	800312e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003118:	f043 0208 	orr.w	r2, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04f      	beq.n	80031d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003144:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_SPI_IRQHandler+0x17e>
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d034      	beq.n	80031cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0203 	bic.w	r2, r2, #3
 8003170:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_SPI_IRQHandler+0x1fc>)
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fc77 	bl	8000a7a <HAL_DMA_Abort_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_SPI_IRQHandler+0x1fc>)
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fc61 	bl	8000a7a <HAL_DMA_Abort_IT>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80031ca:	e003      	b.n	80031d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f809 	bl	80031e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80031d2:	e000      	b.n	80031d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80031d4:	bf00      	nop
    return;
 80031d6:	bf00      	nop
  }
}
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	080031f9 	.word	0x080031f9

080031e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff ffe5 	bl	80031e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003234:	f7fd fb04 	bl	8000840 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003244:	f7fd fafc 	bl	8000840 <HAL_GetTick>
 8003248:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800324a:	4b39      	ldr	r3, [pc, #228]	; (8003330 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	015b      	lsls	r3, r3, #5
 8003250:	0d1b      	lsrs	r3, r3, #20
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800325a:	e054      	b.n	8003306 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d050      	beq.n	8003306 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003264:	f7fd faec 	bl	8000840 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	429a      	cmp	r2, r3
 8003272:	d902      	bls.n	800327a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d13d      	bne.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003288:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003292:	d111      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329c:	d004      	beq.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d107      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d10f      	bne.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e017      	b.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3b01      	subs	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	429a      	cmp	r2, r3
 8003322:	d19b      	bne.n	800325c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000

08003334 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003346:	f7fd fa7b 	bl	8000840 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003356:	f7fd fa73 	bl	8000840 <HAL_GetTick>
 800335a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003364:	4b3d      	ldr	r3, [pc, #244]	; (800345c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00da      	lsls	r2, r3, #3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	0d1b      	lsrs	r3, r3, #20
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800337c:	e060      	b.n	8003440 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003384:	d107      	bne.n	8003396 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003394:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d050      	beq.n	8003440 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800339e:	f7fd fa4f 	bl	8000840 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d902      	bls.n	80033b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d13d      	bne.n	8003430 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033cc:	d111      	bne.n	80033f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d6:	d004      	beq.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d107      	bne.n	80033f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	d10f      	bne.n	800341c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800341a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e010      	b.n	8003452 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	3b01      	subs	r3, #1
 800343e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d196      	bne.n	800337e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3728      	adds	r7, #40	; 0x28
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2200      	movs	r2, #0
 8003474:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff ff5b 	bl	8003334 <SPI_WaitFifoStateUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e027      	b.n	80034e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2200      	movs	r2, #0
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff fec0 	bl	8003224 <SPI_WaitFlagStateUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e014      	b.n	80034e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ff34 	bl	8003334 <SPI_WaitFifoStateUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e000      	b.n	80034e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e040      	b.n	8003580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd f88a 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f82c 	bl	8003588 <UART_SetConfig>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e022      	b.n	8003580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9f6 	bl	8003934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fa7d 	bl	8003a78 <UART_CheckIdleState>
 800357e:	4603      	mov	r3, r0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b92      	ldr	r3, [pc, #584]	; (80037fc <UART_SetConfig+0x274>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	6979      	ldr	r1, [r7, #20]
 80035bc:	430b      	orrs	r3, r1
 80035be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a80      	ldr	r2, [pc, #512]	; (8003800 <UART_SetConfig+0x278>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d120      	bne.n	8003646 <UART_SetConfig+0xbe>
 8003604:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <UART_SetConfig+0x27c>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b03      	cmp	r3, #3
 800360e:	d817      	bhi.n	8003640 <UART_SetConfig+0xb8>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0x90>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003635 	.word	0x08003635
 8003620:	0800363b 	.word	0x0800363b
 8003624:	0800362f 	.word	0x0800362f
 8003628:	2301      	movs	r3, #1
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0b5      	b.n	800379a <UART_SetConfig+0x212>
 800362e:	2302      	movs	r3, #2
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e0b2      	b.n	800379a <UART_SetConfig+0x212>
 8003634:	2304      	movs	r3, #4
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e0af      	b.n	800379a <UART_SetConfig+0x212>
 800363a:	2308      	movs	r3, #8
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e0ac      	b.n	800379a <UART_SetConfig+0x212>
 8003640:	2310      	movs	r3, #16
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e0a9      	b.n	800379a <UART_SetConfig+0x212>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6f      	ldr	r2, [pc, #444]	; (8003808 <UART_SetConfig+0x280>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d124      	bne.n	800369a <UART_SetConfig+0x112>
 8003650:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <UART_SetConfig+0x27c>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003658:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800365c:	d011      	beq.n	8003682 <UART_SetConfig+0xfa>
 800365e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003662:	d817      	bhi.n	8003694 <UART_SetConfig+0x10c>
 8003664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003668:	d011      	beq.n	800368e <UART_SetConfig+0x106>
 800366a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800366e:	d811      	bhi.n	8003694 <UART_SetConfig+0x10c>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <UART_SetConfig+0xf4>
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d006      	beq.n	8003688 <UART_SetConfig+0x100>
 800367a:	e00b      	b.n	8003694 <UART_SetConfig+0x10c>
 800367c:	2300      	movs	r3, #0
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e08b      	b.n	800379a <UART_SetConfig+0x212>
 8003682:	2302      	movs	r3, #2
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e088      	b.n	800379a <UART_SetConfig+0x212>
 8003688:	2304      	movs	r3, #4
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e085      	b.n	800379a <UART_SetConfig+0x212>
 800368e:	2308      	movs	r3, #8
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e082      	b.n	800379a <UART_SetConfig+0x212>
 8003694:	2310      	movs	r3, #16
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e07f      	b.n	800379a <UART_SetConfig+0x212>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5b      	ldr	r2, [pc, #364]	; (800380c <UART_SetConfig+0x284>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d124      	bne.n	80036ee <UART_SetConfig+0x166>
 80036a4:	4b57      	ldr	r3, [pc, #348]	; (8003804 <UART_SetConfig+0x27c>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80036ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036b0:	d011      	beq.n	80036d6 <UART_SetConfig+0x14e>
 80036b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036b6:	d817      	bhi.n	80036e8 <UART_SetConfig+0x160>
 80036b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036bc:	d011      	beq.n	80036e2 <UART_SetConfig+0x15a>
 80036be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036c2:	d811      	bhi.n	80036e8 <UART_SetConfig+0x160>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <UART_SetConfig+0x148>
 80036c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036cc:	d006      	beq.n	80036dc <UART_SetConfig+0x154>
 80036ce:	e00b      	b.n	80036e8 <UART_SetConfig+0x160>
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e061      	b.n	800379a <UART_SetConfig+0x212>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e05e      	b.n	800379a <UART_SetConfig+0x212>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e05b      	b.n	800379a <UART_SetConfig+0x212>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e058      	b.n	800379a <UART_SetConfig+0x212>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e055      	b.n	800379a <UART_SetConfig+0x212>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a47      	ldr	r2, [pc, #284]	; (8003810 <UART_SetConfig+0x288>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d124      	bne.n	8003742 <UART_SetConfig+0x1ba>
 80036f8:	4b42      	ldr	r3, [pc, #264]	; (8003804 <UART_SetConfig+0x27c>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003704:	d011      	beq.n	800372a <UART_SetConfig+0x1a2>
 8003706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800370a:	d817      	bhi.n	800373c <UART_SetConfig+0x1b4>
 800370c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003710:	d011      	beq.n	8003736 <UART_SetConfig+0x1ae>
 8003712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003716:	d811      	bhi.n	800373c <UART_SetConfig+0x1b4>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <UART_SetConfig+0x19c>
 800371c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003720:	d006      	beq.n	8003730 <UART_SetConfig+0x1a8>
 8003722:	e00b      	b.n	800373c <UART_SetConfig+0x1b4>
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e037      	b.n	800379a <UART_SetConfig+0x212>
 800372a:	2302      	movs	r3, #2
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e034      	b.n	800379a <UART_SetConfig+0x212>
 8003730:	2304      	movs	r3, #4
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e031      	b.n	800379a <UART_SetConfig+0x212>
 8003736:	2308      	movs	r3, #8
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e02e      	b.n	800379a <UART_SetConfig+0x212>
 800373c:	2310      	movs	r3, #16
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e02b      	b.n	800379a <UART_SetConfig+0x212>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a33      	ldr	r2, [pc, #204]	; (8003814 <UART_SetConfig+0x28c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d124      	bne.n	8003796 <UART_SetConfig+0x20e>
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <UART_SetConfig+0x27c>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003754:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003758:	d011      	beq.n	800377e <UART_SetConfig+0x1f6>
 800375a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800375e:	d817      	bhi.n	8003790 <UART_SetConfig+0x208>
 8003760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003764:	d011      	beq.n	800378a <UART_SetConfig+0x202>
 8003766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376a:	d811      	bhi.n	8003790 <UART_SetConfig+0x208>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <UART_SetConfig+0x1f0>
 8003770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x1fc>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x208>
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x212>
 800377e:	2302      	movs	r3, #2
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e00a      	b.n	800379a <UART_SetConfig+0x212>
 8003784:	2304      	movs	r3, #4
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e007      	b.n	800379a <UART_SetConfig+0x212>
 800378a:	2308      	movs	r3, #8
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e004      	b.n	800379a <UART_SetConfig+0x212>
 8003790:	2310      	movs	r3, #16
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e001      	b.n	800379a <UART_SetConfig+0x212>
 8003796:	2310      	movs	r3, #16
 8003798:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a2:	d16c      	bne.n	800387e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d838      	bhi.n	800381c <UART_SetConfig+0x294>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <UART_SetConfig+0x228>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	0800381d 	.word	0x0800381d
 80037c0:	080037eb 	.word	0x080037eb
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	080037f3 	.word	0x080037f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d4:	f7fe fd78 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80037d8:	61b8      	str	r0, [r7, #24]
        break;
 80037da:	e024      	b.n	8003826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7fe fd96 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80037e0:	61b8      	str	r0, [r7, #24]
        break;
 80037e2:	e020      	b.n	8003826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <UART_SetConfig+0x290>)
 80037e6:	61bb      	str	r3, [r7, #24]
        break;
 80037e8:	e01d      	b.n	8003826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ea:	f7fe fcf7 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 80037ee:	61b8      	str	r0, [r7, #24]
        break;
 80037f0:	e019      	b.n	8003826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	61bb      	str	r3, [r7, #24]
        break;
 80037f8:	e015      	b.n	8003826 <UART_SetConfig+0x29e>
 80037fa:	bf00      	nop
 80037fc:	efff69f3 	.word	0xefff69f3
 8003800:	40013800 	.word	0x40013800
 8003804:	40021000 	.word	0x40021000
 8003808:	40004400 	.word	0x40004400
 800380c:	40004800 	.word	0x40004800
 8003810:	40004c00 	.word	0x40004c00
 8003814:	40005000 	.word	0x40005000
 8003818:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	77bb      	strb	r3, [r7, #30]
        break;
 8003824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d075      	beq.n	8003918 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	005a      	lsls	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d916      	bls.n	8003878 <UART_SetConfig+0x2f0>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d212      	bcs.n	8003878 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	b29b      	uxth	r3, r3
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	b29a      	uxth	r2, r3
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	4313      	orrs	r3, r2
 800386c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e04f      	b.n	8003918 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77bb      	strb	r3, [r7, #30]
 800387c:	e04c      	b.n	8003918 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x34e>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x304>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fd0a 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fd28 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <UART_SetConfig+0x3a8>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fc89 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085a      	lsrs	r2, r3, #1
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d908      	bls.n	8003914 <UART_SetConfig+0x38c>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d204      	bcs.n	8003914 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e001      	b.n	8003918 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003924:	7fbb      	ldrb	r3, [r7, #30]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	007a1200 	.word	0x007a1200

08003934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01a      	beq.n	8003a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a32:	d10a      	bne.n	8003a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a88:	f7fc feda 	bl	8000840 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d10e      	bne.n	8003aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f82d 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e023      	b.n	8003b02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d10e      	bne.n	8003ae6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f817 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e00d      	b.n	8003b02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b09c      	sub	sp, #112	; 0x70
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	e0a5      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	f000 80a1 	beq.w	8003c68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fc fe8b 	bl	8000840 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d13e      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b50:	667b      	str	r3, [r7, #100]	; 0x64
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e6      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3308      	adds	r3, #8
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	663b      	str	r3, [r7, #96]	; 0x60
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e5      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e067      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d04f      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd6:	d147      	bne.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
 8003c02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	613b      	str	r3, [r7, #16]
   return(result);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c34:	623a      	str	r2, [r7, #32]
 8003c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	69f9      	ldr	r1, [r7, #28]
 8003c3a:	6a3a      	ldr	r2, [r7, #32]
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e010      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	f43f af4a 	beq.w	8003b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3770      	adds	r7, #112	; 0x70
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <__libc_init_array>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	4d0d      	ldr	r5, [pc, #52]	; (8003ccc <__libc_init_array+0x38>)
 8003c98:	4c0d      	ldr	r4, [pc, #52]	; (8003cd0 <__libc_init_array+0x3c>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	42a6      	cmp	r6, r4
 8003ca2:	d109      	bne.n	8003cb8 <__libc_init_array+0x24>
 8003ca4:	4d0b      	ldr	r5, [pc, #44]	; (8003cd4 <__libc_init_array+0x40>)
 8003ca6:	4c0c      	ldr	r4, [pc, #48]	; (8003cd8 <__libc_init_array+0x44>)
 8003ca8:	f000 f820 	bl	8003cec <_init>
 8003cac:	1b64      	subs	r4, r4, r5
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	42a6      	cmp	r6, r4
 8003cb4:	d105      	bne.n	8003cc2 <__libc_init_array+0x2e>
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbc:	4798      	blx	r3
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	e7ee      	b.n	8003ca0 <__libc_init_array+0xc>
 8003cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc6:	4798      	blx	r3
 8003cc8:	3601      	adds	r6, #1
 8003cca:	e7f2      	b.n	8003cb2 <__libc_init_array+0x1e>
 8003ccc:	08003d48 	.word	0x08003d48
 8003cd0:	08003d48 	.word	0x08003d48
 8003cd4:	08003d48 	.word	0x08003d48
 8003cd8:	08003d4c 	.word	0x08003d4c

08003cdc <memset>:
 8003cdc:	4402      	add	r2, r0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <memset+0xa>
 8003ce4:	4770      	bx	lr
 8003ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cea:	e7f9      	b.n	8003ce0 <memset+0x4>

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
