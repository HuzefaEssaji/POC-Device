
new_uart_32bit-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f78  08002f78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f78  08002f78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f78  08002f78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000128  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009064  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001446  00000000  00000000  000290a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e8  00000000  00000000  0002ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eca0  00000000  00000000  0002b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009194  00000000  00000000  00049dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbfc8  00000000  00000000  00052f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ef2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018bc  00000000  00000000  0010ef7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f14 	.word	0x08002f14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f14 	.word	0x08002f14

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa4d 	bl	8000678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f81d 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8df 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 f8ad 	bl	8000344 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001ea:	f000 f877 	bl	80002dc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t pData[18] = {0x20,0x30,0x40,0x50,0x6A,0x20,0x30,0x40,0x50,0x6A,0x20,0x30,0x40,0x50,0x6A,0x20,0x30,0x50};
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <main+0x40>)
 80001f0:	1d3c      	adds	r4, r7, #4
 80001f2:	461d      	mov	r5, r3
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	682b      	ldr	r3, [r5, #0]
 80001fa:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_UART_Transmit(&huart1,pData,18,100);
 80001fc:	1d39      	adds	r1, r7, #4
 80001fe:	2364      	movs	r3, #100	; 0x64
 8000200:	2212      	movs	r2, #18
 8000202:	4805      	ldr	r0, [pc, #20]	; (8000218 <main+0x44>)
 8000204:	f002 fa40 	bl	8002688 <HAL_UART_Transmit>
HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 fa9a 	bl	8000744 <HAL_Delay>
HAL_UART_Transmit(&huart1,pData,18,100);
 8000210:	e7f4      	b.n	80001fc <main+0x28>
 8000212:	bf00      	nop
 8000214:	08002f2c 	.word	0x08002f2c
 8000218:	20000028 	.word	0x20000028

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b0a6      	sub	sp, #152	; 0x98
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fe6a 	bl	8002f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2258      	movs	r2, #88	; 0x58
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fe5c 	bl	8002f04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024c:	2302      	movs	r3, #2
 800024e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000254:	2310      	movs	r3, #16
 8000256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000268:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fd0e 	bl	8000c9c <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000286:	f000 f8f3 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fd4c 	bl	8001d44 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002b2:	f000 f8dd 	bl	8000470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80002b6:	2303      	movs	r3, #3
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 ff73 	bl	80021b0 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002d0:	f000 f8ce 	bl	8000470 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3798      	adds	r7, #152	; 0x98
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_USART1_UART_Init+0x60>)
 80002e2:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_USART1_UART_Init+0x64>)
 80002e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_USART1_UART_Init+0x60>)
 80002e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_USART1_UART_Init+0x60>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x60>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART1_UART_Init+0x60>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x60>)
 8000302:	220c      	movs	r2, #12
 8000304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <MX_USART1_UART_Init+0x60>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x60>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_USART1_UART_Init+0x60>)
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x60>)
 800031a:	2210      	movs	r2, #16
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_USART1_UART_Init+0x60>)
 8000320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000324:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x60>)
 8000328:	f002 f960 	bl	80025ec <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000332:	f000 f89d 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	40013800 	.word	0x40013800

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_USART2_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <MX_USART2_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000350:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART2_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000388:	f002 f930 	bl	80025ec <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f86d 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200000ac 	.word	0x200000ac
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ce:	613b      	str	r3, [r7, #16]
 80003d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a24      	ldr	r2, [pc, #144]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <MX_GPIO_Init+0xc4>)
 8000408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2120      	movs	r1, #32
 800041e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000422:	f000 fc23 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800042c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	480b      	ldr	r0, [pc, #44]	; (800046c <MX_GPIO_Init+0xc8>)
 800043e:	f000 fa8b 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000442:	2320      	movs	r3, #32
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f000 fa7c 	bl	8000958 <HAL_GPIO_Init>

}
 8000460:	bf00      	nop
 8000462:	3728      	adds	r7, #40	; 0x28
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	48000800 	.word	0x48000800

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <HAL_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_MspInit+0x44>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <HAL_MspInit+0x44>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <HAL_MspInit+0x44>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_MspInit+0x44>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004b2:	2007      	movs	r0, #7
 80004b4:	f000 fa1c 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	; 0x30
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 031c 	add.w	r3, r7, #28
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a2e      	ldr	r2, [pc, #184]	; (800059c <HAL_UART_MspInit+0xd8>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d128      	bne.n	8000538 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e6:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a2d      	ldr	r2, [pc, #180]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 80004ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b2b      	ldr	r3, [pc, #172]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000516:	2330      	movs	r3, #48	; 0x30
 8000518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000526:	2307      	movs	r3, #7
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	4619      	mov	r1, r3
 8000530:	481c      	ldr	r0, [pc, #112]	; (80005a4 <HAL_UART_MspInit+0xe0>)
 8000532:	f000 fa11 	bl	8000958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000536:	e02d      	b.n	8000594 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <HAL_UART_MspInit+0xe4>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d128      	bne.n	8000594 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_UART_MspInit+0xdc>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000572:	230c      	movs	r3, #12
 8000574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000576:	2302      	movs	r3, #2
 8000578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2300      	movs	r3, #0
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000582:	2307      	movs	r3, #7
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	4619      	mov	r1, r3
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 f9e2 	bl	8000958 <HAL_GPIO_Init>
}
 8000594:	bf00      	nop
 8000596:	3730      	adds	r7, #48	; 0x30
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013800 	.word	0x40013800
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800
 80005a8:	40004400 	.word	0x40004400

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <NMI_Handler+0x4>

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler+0x4>

080005be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <UsageFault_Handler+0x4>

080005ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f884 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SystemInit+0x20>)
 8000606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <SystemInit+0x20>)
 800060c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800065c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0b      	ldr	r4, [pc, #44]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800064e:	f7ff ffd7 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000652:	f002 fc33 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000656:	f7ff fdbd 	bl	80001d4 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800065c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000668:	08002f80 	.word	0x08002f80
  ldr r2, =_sbss
 800066c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000670:	20000134 	.word	0x20000134

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>
	...

08000678 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_Init+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_Init+0x28>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f931 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f808 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000694:	f7ff fef2 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_InitTick+0x54>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x58>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f93b 	bl	800093e <HAL_SYSTICK_Config>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00e      	b.n	80006f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d80a      	bhi.n	80006ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f000 f911 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_InitTick+0x5c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x20>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_IncTick+0x24>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_IncTick+0x24>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008
 8000728:	20000130 	.word	0x20000130

0800072c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <HAL_GetTick+0x14>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000130 	.word	0x20000130

08000744 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800074c:	f7ff ffee 	bl	800072c <HAL_GetTick>
 8000750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075c:	d005      	beq.n	800076a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_Delay+0x44>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4413      	add	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800076a:	bf00      	nop
 800076c:	f7ff ffde 	bl	800072c <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8f7      	bhi.n	800076c <HAL_Delay+0x28>
  {
  }
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff8e 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff47 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff5c 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ff8e 	bl	8000844 <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5d 	bl	80007f0 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffb0 	bl	80008ac <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000966:	e160      	b.n	8000c2a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 8152 	beq.w	8000c24 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d005      	beq.n	8000998 <HAL_GPIO_Init+0x40>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b02      	cmp	r3, #2
 8000996:	d130      	bne.n	80009fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 0201 	and.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d017      	beq.n	8000a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d123      	bne.n	8000a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	08da      	lsrs	r2, r3, #3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3208      	adds	r2, #8
 8000a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	691a      	ldr	r2, [r3, #16]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	08da      	lsrs	r2, r3, #3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3208      	adds	r2, #8
 8000a84:	6939      	ldr	r1, [r7, #16]
 8000a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0203 	and.w	r2, r3, #3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80ac 	beq.w	8000c24 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000acc:	4b5e      	ldr	r3, [pc, #376]	; (8000c48 <HAL_GPIO_Init+0x2f0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a5d      	ldr	r2, [pc, #372]	; (8000c48 <HAL_GPIO_Init+0x2f0>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b5b      	ldr	r3, [pc, #364]	; (8000c48 <HAL_GPIO_Init+0x2f0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae4:	4a59      	ldr	r2, [pc, #356]	; (8000c4c <HAL_GPIO_Init+0x2f4>)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	220f      	movs	r2, #15
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b0e:	d025      	beq.n	8000b5c <HAL_GPIO_Init+0x204>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4f      	ldr	r2, [pc, #316]	; (8000c50 <HAL_GPIO_Init+0x2f8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d01f      	beq.n	8000b58 <HAL_GPIO_Init+0x200>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4e      	ldr	r2, [pc, #312]	; (8000c54 <HAL_GPIO_Init+0x2fc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d019      	beq.n	8000b54 <HAL_GPIO_Init+0x1fc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4d      	ldr	r2, [pc, #308]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d013      	beq.n	8000b50 <HAL_GPIO_Init+0x1f8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4c      	ldr	r2, [pc, #304]	; (8000c5c <HAL_GPIO_Init+0x304>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d00d      	beq.n	8000b4c <HAL_GPIO_Init+0x1f4>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a4b      	ldr	r2, [pc, #300]	; (8000c60 <HAL_GPIO_Init+0x308>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d007      	beq.n	8000b48 <HAL_GPIO_Init+0x1f0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a4a      	ldr	r2, [pc, #296]	; (8000c64 <HAL_GPIO_Init+0x30c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b40:	2306      	movs	r3, #6
 8000b42:	e00c      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b44:	2307      	movs	r3, #7
 8000b46:	e00a      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e008      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b6e:	4937      	ldr	r1, [pc, #220]	; (8000c4c <HAL_GPIO_Init+0x2f4>)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba0:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba6:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa22 f303 	lsr.w	r3, r2, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f47f ae97 	bne.w	8000968 <HAL_GPIO_Init+0x10>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	48001000 	.word	0x48001000
 8000c60:	48001400 	.word	0x48001400
 8000c64:	48001800 	.word	0x48001800
 8000c68:	40010400 	.word	0x40010400

08000c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ca8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f001 b83a 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 816f 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd8:	4bb5      	ldr	r3, [pc, #724]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d00c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce4:	4bb2      	ldr	r3, [pc, #712]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d15c      	bne.n	8000daa <HAL_RCC_OscConfig+0x10e>
 8000cf0:	4baf      	ldr	r3, [pc, #700]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d155      	bne.n	8000daa <HAL_RCC_OscConfig+0x10e>
 8000cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	fab3 f383 	clz	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	095b      	lsrs	r3, r3, #5
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d102      	bne.n	8000d30 <HAL_RCC_OscConfig+0x94>
 8000d2a:	4ba1      	ldr	r3, [pc, #644]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	e015      	b.n	8000d5c <HAL_RCC_OscConfig+0xc0>
 8000d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d4c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d58:	4b95      	ldr	r3, [pc, #596]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d60:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d64:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d68:	fa92 f2a2 	rbit	r2, r2
 8000d6c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d70:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	f042 0220 	orr.w	r2, r2, #32
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	f002 021f 	and.w	r2, r2, #31
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 8111 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x318>
 8000d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8108 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f000 bfc6 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dba:	d106      	bne.n	8000dca <HAL_RCC_OscConfig+0x12e>
 8000dbc:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7b      	ldr	r2, [pc, #492]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e036      	b.n	8000e38 <HAL_RCC_OscConfig+0x19c>
 8000dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x158>
 8000dda:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a74      	ldr	r2, [pc, #464]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a71      	ldr	r2, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e021      	b.n	8000e38 <HAL_RCC_OscConfig+0x19c>
 8000df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x184>
 8000e06:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a69      	ldr	r2, [pc, #420]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a66      	ldr	r2, [pc, #408]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e00b      	b.n	8000e38 <HAL_RCC_OscConfig+0x19c>
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a62      	ldr	r2, [pc, #392]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d059      	beq.n	8000efc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc70 	bl	800072c <HAL_GetTick>
 8000e4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e50:	e00a      	b.n	8000e68 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e52:	f7ff fc6b 	bl	800072c <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d902      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f000 bf67 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
 8000e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d102      	bne.n	8000e9a <HAL_RCC_OscConfig+0x1fe>
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x22a>
 8000e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ea6:	fa93 f3a3 	rbit	r3, r3
 8000eaa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ece:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ed2:	fa92 f2a2 	rbit	r2, r2
 8000ed6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000eda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f042 0220 	orr.w	r2, r2, #32
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f002 021f 	and.w	r2, r2, #31
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0ab      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1b6>
 8000efa:	e05c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fc16 	bl	800072c <HAL_GetTick>
 8000f00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f06:	f7ff fc11 	bl	800072c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d902      	bls.n	8000f1c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f000 bf0d 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x2b2>
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e015      	b.n	8000f7a <HAL_RCC_OscConfig+0x2de>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_RCC_OscConfig+0x314>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f82:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ab      	bne.n	8000f06 <HAL_RCC_OscConfig+0x26a>
 8000fae:	e002      	b.n	8000fb6 <HAL_RCC_OscConfig+0x31a>
 8000fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 817f 	beq.w	80012ca <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fcc:	4ba7      	ldr	r3, [pc, #668]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd8:	4ba4      	ldr	r3, [pc, #656]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d173      	bne.n	80010cc <HAL_RCC_OscConfig+0x430>
 8000fe4:	4ba1      	ldr	r3, [pc, #644]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff0:	d16c      	bne.n	80010cc <HAL_RCC_OscConfig+0x430>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001004:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d102      	bne.n	8001022 <HAL_RCC_OscConfig+0x386>
 800101c:	4b93      	ldr	r3, [pc, #588]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	e013      	b.n	800104a <HAL_RCC_OscConfig+0x3ae>
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800103a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	2202      	movs	r2, #2
 800104c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001050:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001054:	fa92 f2a2 	rbit	r2, r2
 8001058:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800105c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001060:	fab2 f282 	clz	r2, r2
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	f042 0220 	orr.w	r2, r2, #32
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	f002 021f 	and.w	r2, r2, #31
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00a      	beq.n	8001092 <HAL_RCC_OscConfig+0x3f6>
 800107c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	f000 be52 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800109e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	21f8      	movs	r1, #248	; 0xf8
 80010a8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010b0:	fa91 f1a1 	rbit	r1, r1
 80010b4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010bc:	fab1 f181 	clz	r1, r1
 80010c0:	b2c9      	uxtb	r1, r1
 80010c2:	408b      	lsls	r3, r1
 80010c4:	4969      	ldr	r1, [pc, #420]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	e0fe      	b.n	80012ca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 8088 	beq.w	80011ee <HAL_RCC_OscConfig+0x552>
 80010de:	2301      	movs	r3, #1
 80010e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80010f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	461a      	mov	r2, r3
 8001106:	2301      	movs	r3, #1
 8001108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb0f 	bl	800072c <HAL_GetTick>
 800110e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	e00a      	b.n	800112a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fb0a 	bl	800072c <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d902      	bls.n	800112a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	f000 be06 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800113c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d102      	bne.n	800115a <HAL_RCC_OscConfig+0x4be>
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	e013      	b.n	8001182 <HAL_RCC_OscConfig+0x4e6>
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001172:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	2202      	movs	r2, #2
 8001184:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001188:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800118c:	fa92 f2a2 	rbit	r2, r2
 8001190:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001194:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001198:	fab2 f282 	clz	r2, r2
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	f002 021f 	and.w	r2, r2, #31
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0af      	beq.n	8001114 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	21f8      	movs	r1, #248	; 0xf8
 80011ca:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011d2:	fa91 f1a1 	rbit	r1, r1
 80011d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011de:	fab1 f181 	clz	r1, r1
 80011e2:	b2c9      	uxtb	r1, r1
 80011e4:	408b      	lsls	r3, r1
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
 80011ec:	e06d      	b.n	80012ca <HAL_RCC_OscConfig+0x62e>
 80011ee:	2301      	movs	r3, #1
 80011f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001200:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800120e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	461a      	mov	r2, r3
 8001216:	2300      	movs	r3, #0
 8001218:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fa87 	bl	800072c <HAL_GetTick>
 800121e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fa82 	bl	800072c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d902      	bls.n	800123a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	f000 bd7e 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001244:	fa93 f3a3 	rbit	r3, r3
 8001248:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800124c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_RCC_OscConfig+0x5d4>
 8001264:	4b01      	ldr	r3, [pc, #4]	; (800126c <HAL_RCC_OscConfig+0x5d0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	e016      	b.n	8001298 <HAL_RCC_OscConfig+0x5fc>
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001288:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001294:	4bbf      	ldr	r3, [pc, #764]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	2202      	movs	r2, #2
 800129a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800129e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012a2:	fa92 f2a2 	rbit	r2, r2
 80012a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012ae:	fab2 f282 	clz	r2, r2
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	f042 0220 	orr.w	r2, r2, #32
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f002 021f 	and.w	r2, r2, #31
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ac      	bne.n	8001224 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8113 	beq.w	8001506 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d07c      	beq.n	80013ea <HAL_RCC_OscConfig+0x74e>
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001302:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4ba2      	ldr	r3, [pc, #648]	; (8001598 <HAL_RCC_OscConfig+0x8fc>)
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	2301      	movs	r3, #1
 8001318:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fa07 	bl	800072c <HAL_GetTick>
 800131e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fa02 	bl	800072c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 bcfe 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001344:	fa93 f2a3 	rbit	r2, r3
 8001348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800134c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800135a:	2202      	movs	r2, #2
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	fa93 f2a3 	rbit	r2, r3
 800136c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800137e:	2202      	movs	r2, #2
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001398:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b7e      	ldr	r3, [pc, #504]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013a6:	2102      	movs	r1, #2
 80013a8:	6019      	str	r1, [r3, #0]
 80013aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	fa93 f1a3 	rbit	r1, r3
 80013b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013c0:	6019      	str	r1, [r3, #0]
  return result;
 80013c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	2101      	movs	r1, #1
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d09d      	beq.n	8001324 <HAL_RCC_OscConfig+0x688>
 80013e8:	e08d      	b.n	8001506 <HAL_RCC_OscConfig+0x86a>
 80013ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001408:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800140c:	601a      	str	r2, [r3, #0]
  return result;
 800140e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001412:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001416:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_RCC_OscConfig+0x8fc>)
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	461a      	mov	r2, r3
 8001428:	2300      	movs	r3, #0
 800142a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff f97e 	bl	800072c <HAL_GetTick>
 8001430:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff f979 	bl	800072c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d902      	bls.n	800144c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	f000 bc75 	b.w	8001d36 <HAL_RCC_OscConfig+0x109a>
 800144c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001450:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001478:	2202      	movs	r2, #2
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fa93 f2a3 	rbit	r2, r3
 800148a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001498:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 80014ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014c4:	2102      	movs	r1, #2
 80014c6:	6019      	str	r1, [r3, #0]
 80014c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f1a3 	rbit	r1, r3
 80014d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014da:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014de:	6019      	str	r1, [r3, #0]
  return result;
 80014e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d197      	bne.n	8001436 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 81a5 	beq.w	8001866 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_RCC_OscConfig+0x8f8>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001554:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_RCC_OscConfig+0x900>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d121      	bne.n	80015ac <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_RCC_OscConfig+0x900>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x900>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001574:	f7ff f8da 	bl	800072c <HAL_GetTick>
 8001578:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e010      	b.n	80015a0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff f8d5 	bl	800072c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d908      	bls.n	80015a0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e3d1      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	10908120 	.word	0x10908120
 800159c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b8d      	ldr	r3, [pc, #564]	; (80017d8 <HAL_RCC_OscConfig+0xb3c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0e8      	beq.n	800157e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x92e>
 80015bc:	4b87      	ldr	r3, [pc, #540]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a86      	ldr	r2, [pc, #536]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e035      	b.n	8001636 <HAL_RCC_OscConfig+0x99a>
 80015ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x958>
 80015da:	4b80      	ldr	r3, [pc, #512]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a7f      	ldr	r2, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	4b7d      	ldr	r3, [pc, #500]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a7c      	ldr	r2, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	e020      	b.n	8001636 <HAL_RCC_OscConfig+0x99a>
 80015f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b05      	cmp	r3, #5
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x982>
 8001604:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a74      	ldr	r2, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a71      	ldr	r2, [pc, #452]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x99a>
 800161e:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a6e      	ldr	r2, [pc, #440]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a6b      	ldr	r2, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8081 	beq.w	800174a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff f870 	bl	800072c <HAL_GetTick>
 800164c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff f86b 	bl	800072c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e365      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
 800166a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001692:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0xa3a>
 80016d0:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	e013      	b.n	80016fe <HAL_RCC_OscConfig+0xa62>
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001702:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001706:	2102      	movs	r1, #2
 8001708:	6011      	str	r1, [r2, #0]
 800170a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800170e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	fa92 f1a2 	rbit	r1, r2
 8001718:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800171c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001720:	6011      	str	r1, [r2, #0]
  return result;
 8001722:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001726:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	fab2 f282 	clz	r2, r2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f002 021f 	and.w	r2, r2, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d084      	beq.n	8001652 <HAL_RCC_OscConfig+0x9b6>
 8001748:	e083      	b.n	8001852 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7fe ffef 	bl	800072c <HAL_GetTick>
 800174e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7fe ffea 	bl	800072c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e2e4      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
 800176c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001770:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001774:	2202      	movs	r2, #2
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001794:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017b2:	601a      	str	r2, [r3, #0]
  return result;
 80017b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d106      	bne.n	80017e0 <HAL_RCC_OscConfig+0xb44>
 80017d2:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_RCC_OscConfig+0xb40>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	e017      	b.n	8001808 <HAL_RCC_OscConfig+0xb6c>
 80017d8:	40007000 	.word	0x40007000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4bb3      	ldr	r3, [pc, #716]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800180c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001810:	2102      	movs	r1, #2
 8001812:	6011      	str	r1, [r2, #0]
 8001814:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001818:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	fa92 f1a2 	rbit	r1, r2
 8001822:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001826:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800182a:	6011      	str	r1, [r2, #0]
  return result;
 800182c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001830:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d180      	bne.n	8001754 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001852:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b9e      	ldr	r3, [pc, #632]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a9d      	ldr	r2, [pc, #628]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 825e 	beq.w	8001d34 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	f000 821f 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b02      	cmp	r3, #2
 8001894:	f040 8170 	bne.w	8001b78 <HAL_RCC_OscConfig+0xedc>
 8001898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018bc:	601a      	str	r2, [r3, #0]
  return result;
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	461a      	mov	r2, r3
 80018da:	2300      	movs	r3, #0
 80018dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7fe ff25 	bl	800072c <HAL_GetTick>
 80018e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	e009      	b.n	80018fc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7fe ff20 	bl	800072c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e21c      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
 80018fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001900:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001920:	601a      	str	r2, [r3, #0]
  return result;
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800192a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0xcaa>
 8001940:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e027      	b.n	8001996 <HAL_RCC_OscConfig+0xcfa>
 8001946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800194e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001958:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800199a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800199e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019a2:	6011      	str	r1, [r2, #0]
 80019a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	fa92 f1a2 	rbit	r1, r2
 80019b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019b6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019ba:	6011      	str	r1, [r2, #0]
  return result;
 80019bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	fab2 f282 	clz	r2, r2
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f002 021f 	and.w	r2, r2, #31
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d182      	bne.n	80018e8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e2:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f023 020f 	bic.w	r2, r3, #15
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	4937      	ldr	r1, [pc, #220]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a19      	ldr	r1, [r3, #32]
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a44:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a48:	601a      	str	r2, [r3, #0]
  return result;
 8001a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a52:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	461a      	mov	r2, r3
 8001a66:	2301      	movs	r3, #1
 8001a68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7fe fe5f 	bl	800072c <HAL_GetTick>
 8001a6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a72:	e009      	b.n	8001a88 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a74:	f7fe fe5a 	bl	800072c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e156      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
 8001a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001aac:	601a      	str	r2, [r3, #0]
  return result;
 8001aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xe3c>
 8001acc:	4b01      	ldr	r3, [pc, #4]	; (8001ad4 <HAL_RCC_OscConfig+0xe38>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e02a      	b.n	8001b28 <HAL_RCC_OscConfig+0xe8c>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001adc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b86      	ldr	r3, [pc, #536]	; (8001d40 <HAL_RCC_OscConfig+0x10a4>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	fa92 f1a2 	rbit	r1, r2
 8001b44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b48:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b4c:	6011      	str	r1, [r2, #0]
  return result;
 8001b4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b52:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f43f af7f 	beq.w	8001a74 <HAL_RCC_OscConfig+0xdd8>
 8001b76:	e0dd      	b.n	8001d34 <HAL_RCC_OscConfig+0x1098>
 8001b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b9c:	601a      	str	r2, [r3, #0]
  return result;
 8001b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ba6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fdb5 	bl	800072c <HAL_GetTick>
 8001bc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	e009      	b.n	8001bdc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7fe fdb0 	bl	800072c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0ac      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c00:	601a      	str	r2, [r3, #0]
  return result;
 8001c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0xf8a>
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x10a4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e027      	b.n	8001c76 <HAL_RCC_OscConfig+0xfda>
 8001c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c50:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <HAL_RCC_OscConfig+0x10a4>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c82:	6011      	str	r1, [r2, #0]
 8001c84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c88:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	fa92 f1a2 	rbit	r1, r2
 8001c92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c96:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001c9a:	6011      	str	r1, [r2, #0]
  return result;
 8001c9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ca0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f042 0220 	orr.w	r2, r2, #32
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f002 021f 	and.w	r2, r2, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d182      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xf2c>
 8001cc2:	e037      	b.n	8001d34 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e02e      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_RCC_OscConfig+0x10a4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_RCC_OscConfig+0x10a4>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ce8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cec:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d117      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d04:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d10b      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1c:	f003 020f 	and.w	r2, r3, #15
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09e      	sub	sp, #120	; 0x78
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e162      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	498b      	ldr	r1, [pc, #556]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e14a      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	497f      	ldr	r1, [pc, #508]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80dc 	beq.w	8001f70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d13c      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xf6>
 8001dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d102      	bne.n	8001dea <HAL_RCC_ClockConfig+0xa6>
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_RCC_ClockConfig+0xc6>
 8001dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	667b      	str	r3, [r7, #100]	; 0x64
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0220 	orr.w	r2, r2, #32
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d17b      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0f3      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d13c      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x178>
 8001e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x128>
 8001e66:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCC_ClockConfig+0x148>
 8001e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e90:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d13a      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b2      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x1a0>
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e00d      	b.n	8001f00 <HAL_RCC_ClockConfig+0x1bc>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	61ba      	str	r2, [r7, #24]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	617a      	str	r2, [r7, #20]
  return result;
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0220 	orr.w	r2, r2, #32
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f002 021f 	and.w	r2, r2, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e079      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fbf4 	bl	800072c <HAL_GetTick>
 8001f44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7fe fbf0 	bl	800072c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e061      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d214      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e040      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	491a      	ldr	r1, [pc, #104]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4912      	ldr	r1, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fe6:	f000 f829 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001fea:	4601      	mov	r1, r0
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	22f0      	movs	r2, #240	; 0xf0
 8001ff6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	60fa      	str	r2, [r7, #12]
  return result;
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	40d3      	lsrs	r3, r2
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x2ec>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	fa21 f303 	lsr.w	r3, r1, r3
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_RCC_ClockConfig+0x2f0>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x2f4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fb42 	bl	80006a4 <HAL_InitTick>
  
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3778      	adds	r7, #120	; 0x78
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	08002f40 	.word	0x08002f40
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x30>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x36>
 800206a:	e03f      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc8>)
 800206e:	623b      	str	r3, [r7, #32]
      break;
 8002070:	e03f      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002078:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800207c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	607a      	str	r2, [r7, #4]
  return result;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	fab2 f282 	clz	r2, r2
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	40d3      	lsrs	r3, r2
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	220f      	movs	r2, #15
 80020a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	60fa      	str	r2, [r7, #12]
  return result;
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	40d3      	lsrs	r3, r2
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	e007      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fbb2 f2f3 	udiv	r2, r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	623b      	str	r3, [r7, #32]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6a3b      	ldr	r3, [r7, #32]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	372c      	adds	r7, #44	; 0x2c
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40021000 	.word	0x40021000
 8002104:	007a1200 	.word	0x007a1200
 8002108:	08002f58 	.word	0x08002f58
 800210c:	08002f68 	.word	0x08002f68

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800212e:	f7ff ffef 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800213c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	603a      	str	r2, [r7, #0]
  return result;
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	40d3      	lsrs	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08002f50 	.word	0x08002f50

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002172:	f7ff ffcd 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002176:	4601      	mov	r1, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002180:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	603a      	str	r2, [r7, #0]
  return result;
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	40d3      	lsrs	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08002f50 	.word	0x08002f50

080021b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b092      	sub	sp, #72	; 0x48
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80d4 	beq.w	800237c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d4:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	61d3      	str	r3, [r2, #28]
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fa89 	bl	800072c <HAL_GetTick>
 800221a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fa85 	bl	800072c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1d6      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8084 	beq.w	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002258:	429a      	cmp	r2, r3
 800225a:	d07c      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	461a      	mov	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	461a      	mov	r2, r3
 80022aa:	2300      	movs	r3, #0
 80022ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d04b      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fa35 	bl	800072c <HAL_GetTick>
 80022c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fa31 	bl	800072c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e180      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80022dc:	2302      	movs	r3, #2
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	2302      	movs	r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	61fb      	str	r3, [r7, #28]
  return result;
 80022f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d108      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800230a:	4b01      	ldr	r3, [pc, #4]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	e00d      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	10908100 	.word	0x10908100
 800231c:	2302      	movs	r3, #2
 800231e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	4b9a      	ldr	r3, [pc, #616]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2202      	movs	r2, #2
 800232e:	613a      	str	r2, [r7, #16]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	fa92 f2a2 	rbit	r2, r2
 8002336:	60fa      	str	r2, [r7, #12]
  return result;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f002 021f 	and.w	r2, r2, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0b7      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002356:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	498c      	ldr	r1, [pc, #560]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002388:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f023 0203 	bic.w	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	497f      	ldr	r1, [pc, #508]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a6:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4978      	ldr	r1, [pc, #480]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c4:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4970      	ldr	r1, [pc, #448]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f023 0210 	bic.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4969      	ldr	r1, [pc, #420]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002400:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	4961      	ldr	r1, [pc, #388]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800241e:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f023 0220 	bic.w	r2, r3, #32
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	495a      	ldr	r1, [pc, #360]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800243c:	4b55      	ldr	r3, [pc, #340]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	494b      	ldr	r1, [pc, #300]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4943      	ldr	r1, [pc, #268]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	493c      	ldr	r1, [pc, #240]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024b4:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	4934      	ldr	r1, [pc, #208]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	492d      	ldr	r1, [pc, #180]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	4925      	ldr	r1, [pc, #148]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	491e      	ldr	r1, [pc, #120]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	490f      	ldr	r1, [pc, #60]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002586:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	e002      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	4913      	ldr	r1, [pc, #76]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800259c:	4313      	orrs	r3, r2
 800259e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	490b      	ldr	r1, [pc, #44]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3748      	adds	r7, #72	; 0x48
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e040      	b.n	8002680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fd ff58 	bl	80004c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8c0 	bl	80027b0 <UART_SetConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e022      	b.n	8002680 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa8a 	bl	8002b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fb11 	bl	8002ca0 <UART_CheckIdleState>
 800267e:	4603      	mov	r3, r0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269c:	2b20      	cmp	r3, #32
 800269e:	f040 8082 	bne.w	80027a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_UART_Transmit+0x26>
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07a      	b.n	80027a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Transmit+0x38>
 80026bc:	2302      	movs	r3, #2
 80026be:	e073      	b.n	80027a8 <HAL_UART_Transmit+0x120>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d6:	f7fe f829 	bl	800072c <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f4:	d108      	bne.n	8002708 <HAL_UART_Transmit+0x80>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e003      	b.n	8002710 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002718:	e02d      	b.n	8002776 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fb04 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e039      	b.n	80027a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002746:	b292      	uxth	r2, r2
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	3302      	adds	r3, #2
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	e008      	b.n	8002764 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b292      	uxth	r2, r2
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1cb      	bne.n	800271a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fad0 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e005      	b.n	80027a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <UART_SetConfig+0x274>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6979      	ldr	r1, [r7, #20]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a80      	ldr	r2, [pc, #512]	; (8002a28 <UART_SetConfig+0x278>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d120      	bne.n	800286e <UART_SetConfig+0xbe>
 800282c:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <UART_SetConfig+0x27c>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d817      	bhi.n	8002868 <UART_SetConfig+0xb8>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <UART_SetConfig+0x90>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002851 	.word	0x08002851
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002863 	.word	0x08002863
 800284c:	08002857 	.word	0x08002857
 8002850:	2301      	movs	r3, #1
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e0b5      	b.n	80029c2 <UART_SetConfig+0x212>
 8002856:	2302      	movs	r3, #2
 8002858:	77fb      	strb	r3, [r7, #31]
 800285a:	e0b2      	b.n	80029c2 <UART_SetConfig+0x212>
 800285c:	2304      	movs	r3, #4
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e0af      	b.n	80029c2 <UART_SetConfig+0x212>
 8002862:	2308      	movs	r3, #8
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e0ac      	b.n	80029c2 <UART_SetConfig+0x212>
 8002868:	2310      	movs	r3, #16
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e0a9      	b.n	80029c2 <UART_SetConfig+0x212>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	; (8002a30 <UART_SetConfig+0x280>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d124      	bne.n	80028c2 <UART_SetConfig+0x112>
 8002878:	4b6c      	ldr	r3, [pc, #432]	; (8002a2c <UART_SetConfig+0x27c>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002880:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002884:	d011      	beq.n	80028aa <UART_SetConfig+0xfa>
 8002886:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800288a:	d817      	bhi.n	80028bc <UART_SetConfig+0x10c>
 800288c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002890:	d011      	beq.n	80028b6 <UART_SetConfig+0x106>
 8002892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002896:	d811      	bhi.n	80028bc <UART_SetConfig+0x10c>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <UART_SetConfig+0xf4>
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d006      	beq.n	80028b0 <UART_SetConfig+0x100>
 80028a2:	e00b      	b.n	80028bc <UART_SetConfig+0x10c>
 80028a4:	2300      	movs	r3, #0
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	e08b      	b.n	80029c2 <UART_SetConfig+0x212>
 80028aa:	2302      	movs	r3, #2
 80028ac:	77fb      	strb	r3, [r7, #31]
 80028ae:	e088      	b.n	80029c2 <UART_SetConfig+0x212>
 80028b0:	2304      	movs	r3, #4
 80028b2:	77fb      	strb	r3, [r7, #31]
 80028b4:	e085      	b.n	80029c2 <UART_SetConfig+0x212>
 80028b6:	2308      	movs	r3, #8
 80028b8:	77fb      	strb	r3, [r7, #31]
 80028ba:	e082      	b.n	80029c2 <UART_SetConfig+0x212>
 80028bc:	2310      	movs	r3, #16
 80028be:	77fb      	strb	r3, [r7, #31]
 80028c0:	e07f      	b.n	80029c2 <UART_SetConfig+0x212>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <UART_SetConfig+0x284>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d124      	bne.n	8002916 <UART_SetConfig+0x166>
 80028cc:	4b57      	ldr	r3, [pc, #348]	; (8002a2c <UART_SetConfig+0x27c>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80028d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028d8:	d011      	beq.n	80028fe <UART_SetConfig+0x14e>
 80028da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028de:	d817      	bhi.n	8002910 <UART_SetConfig+0x160>
 80028e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028e4:	d011      	beq.n	800290a <UART_SetConfig+0x15a>
 80028e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ea:	d811      	bhi.n	8002910 <UART_SetConfig+0x160>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <UART_SetConfig+0x148>
 80028f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028f4:	d006      	beq.n	8002904 <UART_SetConfig+0x154>
 80028f6:	e00b      	b.n	8002910 <UART_SetConfig+0x160>
 80028f8:	2300      	movs	r3, #0
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e061      	b.n	80029c2 <UART_SetConfig+0x212>
 80028fe:	2302      	movs	r3, #2
 8002900:	77fb      	strb	r3, [r7, #31]
 8002902:	e05e      	b.n	80029c2 <UART_SetConfig+0x212>
 8002904:	2304      	movs	r3, #4
 8002906:	77fb      	strb	r3, [r7, #31]
 8002908:	e05b      	b.n	80029c2 <UART_SetConfig+0x212>
 800290a:	2308      	movs	r3, #8
 800290c:	77fb      	strb	r3, [r7, #31]
 800290e:	e058      	b.n	80029c2 <UART_SetConfig+0x212>
 8002910:	2310      	movs	r3, #16
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e055      	b.n	80029c2 <UART_SetConfig+0x212>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <UART_SetConfig+0x288>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d124      	bne.n	800296a <UART_SetConfig+0x1ba>
 8002920:	4b42      	ldr	r3, [pc, #264]	; (8002a2c <UART_SetConfig+0x27c>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002928:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800292c:	d011      	beq.n	8002952 <UART_SetConfig+0x1a2>
 800292e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002932:	d817      	bhi.n	8002964 <UART_SetConfig+0x1b4>
 8002934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002938:	d011      	beq.n	800295e <UART_SetConfig+0x1ae>
 800293a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800293e:	d811      	bhi.n	8002964 <UART_SetConfig+0x1b4>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <UART_SetConfig+0x19c>
 8002944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002948:	d006      	beq.n	8002958 <UART_SetConfig+0x1a8>
 800294a:	e00b      	b.n	8002964 <UART_SetConfig+0x1b4>
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e037      	b.n	80029c2 <UART_SetConfig+0x212>
 8002952:	2302      	movs	r3, #2
 8002954:	77fb      	strb	r3, [r7, #31]
 8002956:	e034      	b.n	80029c2 <UART_SetConfig+0x212>
 8002958:	2304      	movs	r3, #4
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e031      	b.n	80029c2 <UART_SetConfig+0x212>
 800295e:	2308      	movs	r3, #8
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e02e      	b.n	80029c2 <UART_SetConfig+0x212>
 8002964:	2310      	movs	r3, #16
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e02b      	b.n	80029c2 <UART_SetConfig+0x212>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <UART_SetConfig+0x28c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d124      	bne.n	80029be <UART_SetConfig+0x20e>
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <UART_SetConfig+0x27c>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800297c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002980:	d011      	beq.n	80029a6 <UART_SetConfig+0x1f6>
 8002982:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002986:	d817      	bhi.n	80029b8 <UART_SetConfig+0x208>
 8002988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800298c:	d011      	beq.n	80029b2 <UART_SetConfig+0x202>
 800298e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002992:	d811      	bhi.n	80029b8 <UART_SetConfig+0x208>
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <UART_SetConfig+0x1f0>
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299c:	d006      	beq.n	80029ac <UART_SetConfig+0x1fc>
 800299e:	e00b      	b.n	80029b8 <UART_SetConfig+0x208>
 80029a0:	2300      	movs	r3, #0
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e00d      	b.n	80029c2 <UART_SetConfig+0x212>
 80029a6:	2302      	movs	r3, #2
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e00a      	b.n	80029c2 <UART_SetConfig+0x212>
 80029ac:	2304      	movs	r3, #4
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e007      	b.n	80029c2 <UART_SetConfig+0x212>
 80029b2:	2308      	movs	r3, #8
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e004      	b.n	80029c2 <UART_SetConfig+0x212>
 80029b8:	2310      	movs	r3, #16
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e001      	b.n	80029c2 <UART_SetConfig+0x212>
 80029be:	2310      	movs	r3, #16
 80029c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ca:	d16c      	bne.n	8002aa6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d838      	bhi.n	8002a44 <UART_SetConfig+0x294>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <UART_SetConfig+0x228>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029fd 	.word	0x080029fd
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	08002a0d 	.word	0x08002a0d
 80029e4:	08002a45 	.word	0x08002a45
 80029e8:	08002a13 	.word	0x08002a13
 80029ec:	08002a45 	.word	0x08002a45
 80029f0:	08002a45 	.word	0x08002a45
 80029f4:	08002a45 	.word	0x08002a45
 80029f8:	08002a1b 	.word	0x08002a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7ff fb94 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002a00:	61b8      	str	r0, [r7, #24]
        break;
 8002a02:	e024      	b.n	8002a4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7ff fbb2 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8002a08:	61b8      	str	r0, [r7, #24]
        break;
 8002a0a:	e020      	b.n	8002a4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <UART_SetConfig+0x290>)
 8002a0e:	61bb      	str	r3, [r7, #24]
        break;
 8002a10:	e01d      	b.n	8002a4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a12:	f7ff fb13 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8002a16:	61b8      	str	r0, [r7, #24]
        break;
 8002a18:	e019      	b.n	8002a4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1e:	61bb      	str	r3, [r7, #24]
        break;
 8002a20:	e015      	b.n	8002a4e <UART_SetConfig+0x29e>
 8002a22:	bf00      	nop
 8002a24:	efff69f3 	.word	0xefff69f3
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40004400 	.word	0x40004400
 8002a34:	40004800 	.word	0x40004800
 8002a38:	40004c00 	.word	0x40004c00
 8002a3c:	40005000 	.word	0x40005000
 8002a40:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	77bb      	strb	r3, [r7, #30]
        break;
 8002a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d075      	beq.n	8002b40 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	005a      	lsls	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	d916      	bls.n	8002aa0 <UART_SetConfig+0x2f0>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d212      	bcs.n	8002aa0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f023 030f 	bic.w	r3, r3, #15
 8002a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	89fa      	ldrh	r2, [r7, #14]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e04f      	b.n	8002b40 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77bb      	strb	r3, [r7, #30]
 8002aa4:	e04c      	b.n	8002b40 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d828      	bhi.n	8002afe <UART_SetConfig+0x34e>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <UART_SetConfig+0x304>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ad9 	.word	0x08002ad9
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002ae9 	.word	0x08002ae9
 8002ac0:	08002aff 	.word	0x08002aff
 8002ac4:	08002aef 	.word	0x08002aef
 8002ac8:	08002aff 	.word	0x08002aff
 8002acc:	08002aff 	.word	0x08002aff
 8002ad0:	08002aff 	.word	0x08002aff
 8002ad4:	08002af7 	.word	0x08002af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7ff fb26 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002adc:	61b8      	str	r0, [r7, #24]
        break;
 8002ade:	e013      	b.n	8002b08 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7ff fb44 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8002ae4:	61b8      	str	r0, [r7, #24]
        break;
 8002ae6:	e00f      	b.n	8002b08 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <UART_SetConfig+0x3a8>)
 8002aea:	61bb      	str	r3, [r7, #24]
        break;
 8002aec:	e00c      	b.n	8002b08 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aee:	f7ff faa5 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8002af2:	61b8      	str	r0, [r7, #24]
        break;
 8002af4:	e008      	b.n	8002b08 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afa:	61bb      	str	r3, [r7, #24]
        break;
 8002afc:	e004      	b.n	8002b08 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	77bb      	strb	r3, [r7, #30]
        break;
 8002b06:	bf00      	nop
    }

    if (pclk != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	085a      	lsrs	r2, r3, #1
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	d908      	bls.n	8002b3c <UART_SetConfig+0x38c>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d204      	bcs.n	8002b3c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	e001      	b.n	8002b40 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01a      	beq.n	8002c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5a:	d10a      	bne.n	8002c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cb0:	f7fd fd3c 	bl	800072c <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d10e      	bne.n	8002ce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f82d 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e023      	b.n	8002d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d10e      	bne.n	8002d0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f817 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e00d      	b.n	8002d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b09c      	sub	sp, #112	; 0x70
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d42:	e0a5      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	f000 80a1 	beq.w	8002e90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fd fced 	bl	800072c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d13e      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d78:	667b      	str	r3, [r7, #100]	; 0x64
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e6      	bne.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	663b      	str	r3, [r7, #96]	; 0x60
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3308      	adds	r3, #8
 8002db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e5      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e067      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d04f      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfe:	d147      	bne.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e6      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3308      	adds	r3, #8
 8002e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e5c:	623a      	str	r2, [r7, #32]
 8002e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	69f9      	ldr	r1, [r7, #28]
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e010      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f43f af4a 	beq.w	8002d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3770      	adds	r7, #112	; 0x70
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	4d0d      	ldr	r5, [pc, #52]	; (8002ef4 <__libc_init_array+0x38>)
 8002ec0:	4c0d      	ldr	r4, [pc, #52]	; (8002ef8 <__libc_init_array+0x3c>)
 8002ec2:	1b64      	subs	r4, r4, r5
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	4d0b      	ldr	r5, [pc, #44]	; (8002efc <__libc_init_array+0x40>)
 8002ece:	4c0c      	ldr	r4, [pc, #48]	; (8002f00 <__libc_init_array+0x44>)
 8002ed0:	f000 f820 	bl	8002f14 <_init>
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	2600      	movs	r6, #0
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	4798      	blx	r3
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	4798      	blx	r3
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	08002f78 	.word	0x08002f78
 8002ef8:	08002f78 	.word	0x08002f78
 8002efc:	08002f78 	.word	0x08002f78
 8002f00:	08002f7c 	.word	0x08002f7c

08002f04 <memset>:
 8002f04:	4402      	add	r2, r0
 8002f06:	4603      	mov	r3, r0
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <memset+0xa>
 8002f0c:	4770      	bx	lr
 8002f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f12:	e7f9      	b.n	8002f08 <memset+0x4>

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
